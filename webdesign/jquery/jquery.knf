=== [ topic ][ intro ] ===
[ --- start ---- ]
jQuery is a JavaScript Library.
jQuery greatly simplifies JavaScript programming.
jQuery is easy to learn.
- Using JQuery would take care of that browser inconsistency.
[ ---  end  ---- ]

=== [ topic ][ script ][ source ] ===
[ --- start ---- ]
<script src="/home/knxy/confignewpc/jquery/jquery-1.10.1.min.js">
[ ---  end  ---- ]

=== [ topic ][ script ][ use CDN otherwise fallback local ] ===
[ --- start ---- ]
/// in html 5 type="text/javascript" is no longer required
/// https://developers.google.com/speed/libraries/devguide
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"> </script>
<script charset="utf-8">
if (typeof jQuery == "undefined") {
    document.write(unescape("%3Cscript src='path/to/local/jquery.js'
                %3E%3C/script%3E"));
}
</script>
[ ---  end  ---- ]

=== [ topic ][ the basic structure ] ===
[ --- start ---- ]
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Demo</title>
</head>
<body>
    <a href="http://jquery.com/">jQuery</a>
    <script src="jquery.js"></script>
    <script>
 
    // Your code goes here.
 
    </script>
</body>
</html>
[ ---  end  ---- ]

=== [ topic ][ ready ][ example ] ===
[ --- start ---- ]
- run as soon as the DOM objects has finished downloading without waiting for
  all images to finish
Example 1:
$(document).ready(function(){
	$(".btn_show").click(function(){
		var pos=$(this).attr("value")
		$(this).siblings("a").after("<img style='max-width: 300px' src='"+pos+"'>");
	});

	$(".btn_del").click(function(){
		$(this).siblings("img").remove();
	});

	$("#btn_remove").click(function(){
		$("img").remove();
	});
});

Example 2:
function myFunction(){
    ...
}
$(document).ready(myFunction);
Example 3: shorthand for $(document).ready(function(){...})
$(function(){
    ...
});
[ ---  end  ---- ]

=== [ topic ][ ready vs onload ] ===
[ --- start ---- ]
/// js onload function only executes after all images are finished downloading
/// until iframes or images is ready
/// take note it is window.onload not document.onload
window.onload = function() {  ...  }
$(window).load(function(){
    console.log("window(iframes and images) is ready")
});

/// jquery ready run once the dom is ready to be manipulated, w/o waiting for
/// images to finish download
$(document).ready( function(){
    console.log("DOM object is ready");
});
[ ---  end  ---- ]

=== [ topic ][ $ vs $() ] ===
[ --- start ---- ]
[ jQuery object method ]
- these methods are part of "$.fn namespace", or 'jQuery prototype'
- can be thought as "jQuery object methods". 
- automatically receive and return the selection as "this"
Example 1:
$( "h1" ).remove();

[ jQuery method ]
- several methods do not act on a selection
- these methods are said to be part of the "jQuery namespace"
- are best thought of as core "jQuery methods"
- method in the $ namespace are generally utility-type methods
- they are not automatically passed any arguments, and their return value vary

[ same names ]
- convention 
utility: $.each()
selection: .each()

from so:
jQuery.data(document.body, 'foo', 'bar') === $(document.body).data('foo', 'bar');
[ ---  end  ---- ]

=== [ topic ][ non-conflict mode ] ===
[ --- start ---- ]
- by default, jQuery use $ as a shortcut for jQuery.
- if using another javascript library that uses $ variable, will run into
  conflicts with jQuery

Example 1:
<!-- Putting jQuery into no-conflict mode. -->
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
 
var $j = jQuery.noConflict();
// $j is now an alias to the jQuery function; creating the new alias is optional.
 
$j(document).ready(function() {
    $j( "div" ).hide();
});
 
// The $ variable now has the prototype meaning, which is a shortcut for
// document.getElementById(). mainDiv below is a DOM element, not a jQuery object.
window.onload = function() {
    var mainDiv = $( "main" );
}
</script>

Example 2: use $ for jQuery instead, dont' care about using other library's $
<!-- Another way to put jQuery into no-conflict mode. -->
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
 
jQuery.noConflict();
 
jQuery( document ).ready(function( $ ) {
    // You can use the locally-scoped $ in here as an alias to jQuery.
    $( "div" ).hide();
});
 
// The $ variable in the global scope has the prototype.js meaning.
window.onload = function(){
    var mainDiv = $( "main" );
}
 
</script>

Example 3: 
- load jQuery before others, $ have meaning defined by other library
- no need to relingquish the $ alias by calling jQuery.noConflict()
<!-- Loading jQuery before other libraries. -->
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
// Use full jQuery function name to reference jQuery.
jQuery( document ).ready(function() {
    jQuery( "div" ).hide();
});
 
// Use the $ variable as defined in prototype.js
window.onload = function() {
    var mainDiv = $( "main" );
};
 
</script>

Example 4:
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
jQuery(document).ready(function( $ ) {
    // Your jQuery code here, using $ to refer to jQuery.
});
 
</script>

Example 5: concise form
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
jQuery(function($){
    // Your jQuery code here, using the $
});
 
</script>

Example 6: from source code
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;
[ ---  end  ---- ]

=== [ topic ][ insert html ][ innerHTML ] ===
[ --- start ---- ]
- getter
$(..).html()
- setter
$(...).html("new html content")

Example :
$('#yourDivName').html('yourtHTML');
// add as the last item of the selected div
$('#yourDivName').append('yourtHTML');
// add as the first item in the selected div
$('#yourDivName').prepend('yourtHTML');
[ ---  end  ---- ]

=== [ topic ][ changing ][ attribute ] ===
[ --- start ---- ]
Example 1:
$("#h01").attr("style","color:red").html("Hello jQuery")
$(document).ready(myFunction);
<h1 id="h01"></h1>


Example 2:
// Using a function to determine an attribute's new value.
$( "#myDiv a:first" ).attr({
    rel: "super-special",
    href: function( idx, href ) {
        return "/new/" + href;
    }
});
 
$( "#myDiv a:first" ).attr( "href", function( idx, href ) {
    return "/new/" + href;
});
[ ---  end  ---- ]

=== [ topic ][ attr ] ===
[ --- start ---- ]
$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
 
$( "a" ).attr({
    title: "all titles are the same too!",
    href: "somethingNew.html"
});
[ ---  end  ---- ]

=== [ topic ][ css ] ===
[ --- start ---- ]
// Getting CSS properties.
Example 1:
$( "h1" ).css( "fontSize" ); // Returns a string such as "19px".
$( "h1" ).css( "font-size" ); // Also works.

- setting css value
Example 1:
$( "h1" ).css( "fontSize", "100px" ); // Setting an individual property.
// Setting multiple properties.
$( "h1" ).css({
    fontSize: "100px",
    color: "red"
});

Example 2:
var $h1 = $( "h1" );
 
$h1.addClass( "big" );
$h1.removeClass( "big" );
$h1.toggleClass( "big" );
 
if ( $h1.hasClass( "big" ) ) {
    ...
}

Example 3:
// Basic dimensions methods.
// Sets the width of all <h1> elements.
$( "h1" ).width( "50px" );
// Gets the width of the first <h1> element.
$( "h1" ).width();
// Sets the height of all <h1> elements.
$( "h1" ).height( "50px" );
// Gets the height of the first <h1> element.
$( "h1" ).height();
// Returns an object containing position information for
// the first <h1> relative to its "offset (positioned) parent".
$( "h1" ).position();
[ ---  end  ---- ]

=== [ topic ][ jQuery object ][ selecting ] ===
[ --- start ---- ]
- jQuery returns the element in a collection.
- jQuery returned collection is more than an array

Example : Compatibility
javascript:
var target = document.getElementById( "target" );
target.innerHTML = "<td>Hello <b>World</b>!</td>";
jQuery:
var target = document.getElementById( "target" );
$( target ).html( "<td>Hello <b>World</b>!</td>" );

Example : Convenience
// Inserting a new element after another with the native DOM API.
var target = document.getElementById( "target" );
var newElement = document.createElement( "div" );
target.parentNode.insertBefore( newElement, target.nextSibling )

// Inserting a new element after another with jQuery.
var target = document.getElementById( "target" );
var newElement = document.createElement( "div" );
$( target ).after( newElement );

[ ---  end  ---- ]

=== [ topic ][ jQuery object ][ retrieving ] ===
[ --- start ---- ]
var headings = $("h1")
alert( allHeadings.length );
/// select first element, the firstHeading is a jQuery object
var firstHeading = headings.eq( 0 );
/// firstHeadingElem contains the native DOM element
/// native DOM doesn't has access to jQuery methods like .html() etc
var firstHeadingElem = $( "h1" ).get( 0 );
var firstHeadingElem = $( "h1" )[ 0 ];
[ ---  end  ---- ]

=== [ topic ][ jQuery object ][ vs native DOM ] ===
[ --- start ---- ]
Example 1:
var logo1 = $( "#logo" );
var logo2 = $( "#logo" );
/// comparing jQuery object
alert( $( "#logo" ) === $( "#logo" ) ); // alerts "false"

Example 2:
// Comparing DOM elements.
var logo1 = $( "#logo" );
var logo1Elem = logo1.get( 0 );
var logo2 = $( "#logo" );
var logo2Elem = logo2.get( 0 );
alert( logo1Elem === logo2Elem ); // alerts "true"

Example 3: the $logo1 just indicate it is jQuery variable, no magic done
// Comparing DOM elements (with more readable variable names).
var $logo1 = $( "#logo" );
var logo1 = $logo1.get( 0 );
var $logo2 = $( "#logo" );
var logo2 = $logo2.get( 0 );
alert( logo1 === logo2 ); // alerts "true"

Example 4:
Error messages like "event.target.closest is not a function"' and "TypeError:
Object [object Object] has no method 'setAttribute'" indicate the presence of
this common mistake.
e.g.:
$logo2Elem.html()  /// resulting in error
[ ---  end  ---- ]

=== [ topic ][ traversing ][ parent ] ===
[ --- start ---- ]
Example 1:
@@@ html:
<div class="grandparent">
    <div class="parent">
        <div class="child">
            <span class="subchild"></span>
        </div>
    </div>
    <div class="surrogateParent1"></div>
    <div class="surrogateParent2"></div>
</div>

@@@ jquery:
///  Selecting an element's direct parent:
 
// returns [ div.child ]
$( "span.subchild" ).parent();
 
// Selecting all the parents of an element that match a given selector:
// returns [ div.parent ]
$( "span.subchild" ).parents( "div.parent" );
 
// returns [ div.child, div.parent, div.grandparent ]
$( "span.subchild" ).parents();
 
// Selecting all the parents of an element up to, but *not including* the selector:
// returns [ div.child, div.parent ]
$( "span.subchild" ).parentsUntil( "div.grandparent" );
 
// Selecting the closest parent, note that only one parent will be selected
// and that the initial element itself is included in the search:
 
// returns [ div.child ]
$( "span.subchild" ).closest( "div" );
 
// returns [ div.child ] as the selector is also included in the search:
$( "div.child" ).closest( "div" );
[ ---  end  ---- ]

=== [ topic ][ traversing ][ children ] ===
[ --- start ---- ]
- .children() operates on direct child nodes
- .find() can traverse recursively into children, children of children, and so on
- to get all children including text and comment nodes, use .contents().
Example 1:
@@@ html:
<div class="grandparent">
    <div class="parent">
        <div class="child">
            <span class="subchild"></span>
        </div>
    </div>
    <div class="surrogateParent1"></div>
    <div class="surrogateParent2"></div>
</div>

@@@ jqeury:
// Selecting an element's direct children:
 
// returns [ div.parent, div.surrogateParent1, div.surrogateParent2 ]
$( "div.grandparent" ).children( "div" );
 
// Finding all elements within a selection that match the selector:
 
// returns [ div.child, div.parent, div.surrogateParent1, div.surrogateParent2 ]
$( "div.grandparent" ).find( "div" );
[ ---  end  ---- ]

=== [ topic ][ traversing ][ siblings ] ===
[ --- start ---- ]
// Selecting a next sibling of the selectors:
 
// returns [ div.surrogateParent1 ]
$( "div.parent" ).next();
 
// Selecting a prev sibling of the selectors:
 
// returns [] as No sibling exists before div.parent
$( "div.parent" ).prev();
 
// Selecting all the next siblings of the selector:
 
// returns [ div.surrogateParent1, div.surrogateParent2 ]
$( "div.parent" ).nextAll();
 
// returns [ div.surrogateParent1 ]
$( "div.parent" ).nextAll().first();
 
// returns [ div.surrogateParent2 ]
$( "div.parent" ).nextAll().last();
 
// Selecting all the previous siblings of the selector:
 
// returns [ div.surrogateParent1, div.parent ]
$( "div.surrogateParent2" ).prevAll();
 
// returns [ div.surrogateParent1 ]
$( "div.surrogateParent2" ).prevAll().first();
 
// returns [ div.parent ]
$( "div.surrogateParent2" ).prevAll().last(); 

// Selecting an element's siblings in both directions that matches the given selector:
 
// returns [ div.surrogateParent1, div.surrogateParent2 ]
$( "div.parent" ).siblings();
 
// returns [ div.parent, div.surrogateParent2 ]
$( "div.surrogateParent1" ).siblings();
[ ---  end  ---- ]

=== [ topic ][ selecting element ] ===
[ --- start ---- ]
select ID
> $("#myId")

select class
> $(".myClass")

select element by attribute
/// beware, might be slow in older browser
> $("input[name='first_name']")

select element by compund css selector
> $("#contents ul.people li")

pseudo-selectors
> $("a.external:first")
> $("tr:odd")
/// select all input-like elements in a form
> $("#myForm :input")
> $("div:visible")
/// all except the first three divs
> $("div:gt(2)")
/// all currently animated divs
> $("div:animated")
- for :visible and :hidden pseudo-selectors, jQuery tests actual visibility of
  the element, not its CSS visibility or display properties
    == jQuery looks to see if the element's physical height and width on page are
        both greater than zero.
    == but for <tr> element, jQuery check the CSS display
    == elements not yet added to DOM will be considered hidden

regular expression
/// find all elements whose rel attribute ends with "endWithThis"
/// useful, but can be extremely slow in older browser
> $("a[rel$='endWithThis']")

$("*")                     Selects all elements
$(this)                    Selects the current HTML element
$("p.intro")               Selects all <p> elements with class="intro"
$("p:first")               Selects the first <p> element
$("ul                      li:first")    Selects the first <li> element of the first <ul>
$("ul                      li:first-child")  Selects the first <li> element of every <ul>
$("[href]")                Selects all elements with an href attribute
$("a[target='_blank']")    Selects all <a> elements with a target attribute value equal to "_blank"
$("a[target!='_blank']")   Selects all <a> elements with a target attribute value NOT equal to "_blank"
$(":button")               Selects all <button> elements and <input> elements of type="button"
$("tr:even")               Selects all even <tr> elements
$("tr:odd")                Selects all odd <tr> elements

[ ---  end  ---- ]

=== [ topic ][ selector ][ empty ] ===
[ --- start ---- ]
- $("div.foo") always return an object, and object is always evaluted to true
- so this statement will be always true
> if ( $("div.foo")) { 
>        /// always get executed
>  }
- check with its length to see if a selection contains element
> if ($("div.foo").length){
>     // length will tell how many elements has been selected. 0 if none.
> }
[ ---  end  ---- ]

=== [ topic ][ selection ][ refining ] ===
[ --- start ---- ]
// Refining selections.
$( "div.foo" ).has( "p" );         // div.foo elements that contain <p> tags
$( "h1" ).not( ".bar" );           // h1 elements that don't have a class of bar
$( "ul li" ).filter( ".current" ); // unordered list items with class of current
$( "ul li" ).first();              // just the first unordered list item
$( "ul li" ).eq( 5 );              // the sixth
[ ---  end  ---- ]

=== [ topic ][ selection ][ form ] ===
[ --- start ---- ]
/// select all <button> and elements with type="button"
$("form :button")
/// use :button for best performance than use .filter(":button")
/// read: http://api.jquery.com/button-selector/
$("form :checkbox")
$( "form :checked" );
$( "form :disabled" );
$( "form :enabled" );
/// <input type=file>
/// for better performance in modern browser, use [type="file"] instead of :file
$( "form :file" );
/// <input type=image>
// use [type="image"] instead of the :image
$( "form :image" );
/// select <input>, <textarea>, <select>, <button>
$( "form :input" );
// use [type="password"] instead of the :password pseudo-selector.
$( "form :password");
// use [type="radio"] instead of the :radio
$( "form :radio" );
// Selects all radio buttons with the name attribute of gender.
$( "form input[name='gender']:radio" );
// use [type="reset"] instead of the :reset
$( "form :reset" );
/// select <option> elements
$( "form :selected" );
/// select <button>, <input type=button>
// use [type="submit"] instead of the :submit pseudo-selector.
$( "form :submit" );
// select <input> elements with a type="text":
// :text selects <input> elements that have no specified type attribute. So,
// type="text" is implied
$( "form :text" );

[ ---  end  ---- ]

=== [ topic ][ submit ][ .submit ] ===
[ --- start ---- ]
- .submit() is shorthand for .on( "submit", handler )
- .submit() is shorthand for .trigger( "submit" )
- can only be attached to <form> elements.
[ ---  end  ---- ]

=== [ topic ][ selection ][ saving ] ===
[ --- start ---- ]
- jQuery doesn't cached element, but can be saved like this
- In the example below, the variable name begins with a dollar sign. Unlike in
  other languages, there's nothing special about the dollar sign in JavaScript –
  it's just another character. Here, it's used to indicate that the variable
  contains a jQuery object. This practice is merely convention, and is not
  mandatory.
var $divs = $("div")
[ ---  end  ---- ]

=== [ topic ][ selection ][ not ] ===
[ --- start ---- ]
Example : not class
$(this).parents(".catalog-header")
                //.find("img :not(.active)");
                .find(".catalog-photo")
                .not(".active")
                .addClass('not-active');

Example : not class
$("ul#list li").not(".active") // not method
$("ul#list li:not(.active)")   // not selector


Example : not attribute
/// better and faster
$('#para').filter(':not([attr_all])');
- get the id with para, then filter those without attr_all
- this is faster than below


/// select descendant of #para
$("#para :not([attr_all])")
/// #para without attr_all
$("#para:not([attr_all])")
- select those without attribute attr_all, then select those with id #para
- elements without attribute attr_all would be a large set for jquery to work
[ ---  end  ---- ]

=== [ topic ][ chaining ] ===
[ --- start ---- ]
$( "#content" )
    .find( "h3" )
    .eq( 2 )
    .html( "new text for the third h3!" );

- use end() to restore original selection
Example :
$( "#content" )
    .find( "h3" )
    /// get the third h3 inside #content
    .eq( 2 )
        .html( "new text for the third h3!" )
        .end() // Restores the selection to all h3s in #content
    /// get the first h3 inside #content
    .eq( 0 )
        .html( "new text for the first h3!" );

Example 2:
 $("button").click(function(){
    $("#p1").css("color","red").slideUp(2000).slideDown(2000);
  });
[ ---  end  ---- ]

=== [ topic ][ manipulate element ] ===
[ --- start ---- ]
.html() – Get or set the HTML contents.
.text() – Get or set the text contents; HTML will be stripped.
.attr() – Get or set the value of the provided attribute.
.width() – Get or set the width in pixels of the first element in the selection as an integer.
.height() – Get or set the height in pixels of the first element in the selection as an integer.
.position() – Get an object with position information for the first element in the selection, relative to its first positioned ancestor. This is a getter only.
.val() – Get or set the value of form elements
[ ---  end  ---- ]

=== [ topic ][ moving ][ copying ] ===
[ --- start ---- ]
- two approach to move thing around:
Place the selected element(s) relative to another element.
Place an element relative to the selected element(s).

.insertAfter(), .insertBefore(), .appendTo(), and .prependTo()

syntax:
$(content).insertAfter(selectedElement)
$(selectedElement).after(contentToBePlaced)

Example :
// Make the first list item the last list item:
var $li = $( "#myList li:first" ).appendTo( "#myList" );
// Another approach to the same problem:
$( "#myList" ).append( $( "#myList li:first" ) );

Example :cloning
// Copy the first list item to the end of the list:
$( "#myList li:first" ).clone().appendTo( "#myList" );
[ ---  end  ---- ]

=== [ topic ][ remove ] ===
[ --- start ---- ]
- .remove() and .detach(), empty()
- .remove():
    == permanently remove the selection from the page.
    == While .remove() does return the removed element(s), those elements will not
    have their associated data and events attached to them if you return them to
    the page.
- .detach()
    == Use .detach() if you need the data and events to persist. 
    == Like .remove(), it returns the selection, but it also maintains the data
    and events associated with the selection, so you can restore the selection
    to the page at a later time.
    == The .detach() method is extremely valuable if you are doing heavy
    manipulation on an element. In that case, it's beneficial to .detach() the
    element from the page, work on it in your code, then restore it to the page
    when you're done. This limits expensive "DOM touches" while maintaining the
    element's data and events.
- empty()
    ==  leave the element on the page but remove its contents, you can use
    .empty() to dispose of the element's inner HTML.
[ ---  end  ---- ]

=== [ topic ][ create new element ] ===
[ --- start ---- ]
- Note that the attributes object in the second argument above, the property
  name class is quoted, although the property names text and href are not.
  Property names generally do not need to be quoted unless they are reserved
  words (as class is in this case). (see example 2)

Example 1:

// Creating new elements from an HTML string.
$( "<p>This is a new paragraph</p>" );
$( "<li class=\"new\">new list item</li>" );

Example 2: new element with attribute
$( "<a/>", {
    html: "This is a <strong>new</strong> link",
    "class": "new",
    href: "foo.html"
});


- use a list to to combine all new content as a string for better performance
Example 3: 
var myItems = [];
var $myList = $( "#myList" );
for ( var i = 0; i < 100; i++ ) {
    myItems.push( "<li>item " + i + "</li>" );
}
$myList.append( myItems.join( "" ) );
[ ---  end  ---- ]

=== [ topic ][ appendChild ][ topic ] ===
[ --- start ---- ]

[ ---  end  ---- ]

=== [ topic ][ append ] ===
[ --- start ---- ]
Example 1:
$( ".inner" ).append( "<p>Test</p>" );

<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
become:
<div class="inner"> Hello <p>Test</p> </div>
<div class="inner"> Goodbye <p>Test</p>

Example 2:
$( ".container" ).append( $( "h2" ) );

<h2>Greetings</h2>
<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
become:
<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
<h2>Greetings</h2>
</div>
[ ---  end  ---- ]

=== [ topic ][ jquery vs javascript ] ===
[ --- start ---- ]
jQuery
$ (‘body’) .css (‘background’, ‘#ccc’);

JavaScript
Function changeBachground(color) {
        Document.body.style.background = color;
}
Onload=”changeBackground (‘red’);”
[ ---  end  ---- ]

=== [ topic ][ array ][ declare ] ===
[ --- start ---- ]
// A simple array with constructor.
var myArray1 = new Array( "hello", "world" );

// Literal declaration, the preferred way.
var myArray2 = [ "hello", "world" ];
[ ---  end  ---- ]

=== [ topic ][ array ][ general ][ empty ][ pop ][ push ]===
[ --- start ---- ]
Example 1:
var myArray = [];
// Adds "hello" on index 0
myArray.push( "hello" );
// Adds "world" on index 1
myArray.push( "world" );
// Adds "!" on index 2
myArray[ 2 ] = "!";

Example 2:
var myArray = [];
myArray[ 0 ] = "hello";
myArray[ 1 ] = "world";
myArray[ 3 ] = "!";
console.log( myArray ); // [ "hello", "world", undefined, "!" ];
console.log( myArray[ 2 ] ); // "!"
console.log( myArray.length ); // 3

Example 3:
var myArray = [];
myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
myArray.pop();     // [ 0 , 2 ]
[ ---  end  ---- ]

=== [ topic ][ looping ][ array ] ===
[ --- start ---- ]
Example 1:
var myArray = [ "hello", "world", "!" ];
for ( var i = 0; i < myArray.length; i = i + 1 ) {
    console.log( myArray[ i ] );
}

Example 2:
var myArray = [ "hello", "world", "!" ];
for ( var i in myArray ) {
    console.log( myArray[ i ] );
}

Example 3:
function printElement( elem ) {
    console.log( elem );
}
function printElementAndIndex( elem, index ) {
    console.log( "Index " + index + ": " + elem );
}
function negateElement( elem, index, array ) {
    array[ index ] = -elem;
}
myArray = [ 1, 2, 3, 4, 5 ];
// Prints all elements to the console
myArray.forEach( printElement );
// Prints "Index 0: 1", "Index 1: 2", "Index 2: 3", ...
myArray.forEach( printElementAndIndex );
// myArray is now [ -1, -2, -3, -4, -5 ]
myArray.forEach( negateElement );

[ ---  end  ---- ]

=== [ topic ][ loop ][ iterate ] ===
[ --- start ---- ]
- $.each is a drop-in replacement for for-in
Example :
for ( var i = 0, l = arr.length; i < l; i++ ) {
    sum += arr[ i ]; }
console.log( sum ); // 15

/// below are doing the same thing
/// Notice that we don't have to access arr[ index ] as the value is conveniently
///  passed to the callback in $.each().
$.each( arr, function( index, value ){
    sum += value;
});
console.log( sum ); // 15
[ ---  end  ---- ]

=== [ topic ][ array ][ concatenate ] ===
[ --- start ---- ]
var myArray = [ 2, 3, 4 ];
var myOtherArray = [ 5, 6, 7 ];
var wholeArray = myArray.concat( myOtherArray ); // [ 2, 3, 4, 5, 6, 7 ]
[ ---  end  ---- ]

=== [ topic ][ array ][ join ] ===
[ --- start ---- ]
- join array and create a string
var myArray = [ "hello", "world", "!" ];
// The default separator is a comma.
console.log( myArray.join() );     // "hello,world,!"
// Any string can be used as separator...
console.log( myArray.join( " " ) );  // "hello world !";
console.log( myArray.join( "!!" ) ); // "hello!!world!!!";
// ...including an empty one.
console.log( myArray.join( "" ) );   // "helloworld!"
[ ---  end  ---- ]

=== [ topic ][ array ][ misc ] ===
[ --- start ---- ]
Example: reverse
var myArray = [ "world" , "hello" ];
myArray.reverse(); // [ "hello", "world" ]

Example: shift (queue-like)
var myArray = [];
myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
myArray.shift();   // [ 2 , 7 ]

Example: unshift (insert value at first position)
var myArray = [];
myArray.unshift( 0 ); // [ 0 ]
myArray.unshift( 2 ); // [ 2 , 0 ]
myArray.unshift( 7 ); // [ 7 , 2 , 0 ]

Example: slicing
var myArray = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
var newArray = myArray.slice( 3 ); // start-index as parameter
console.log( myArray );  // [ 1, 2, 3, 4, 5, 6, 7, 8 ]
console.log( newArray ); // [ 4, 5, 6, 7, 8 ]

- myArray.splice( start-index, length, values, ... );
- Removes a certain amount of elements and adds new ones at the given index. It 
  takes at least three parameters:
Example: splice() -
var myArray = [ 0, 7, 8, 5 ];
myArray.splice( 1, 2, 1, 2, 3, 4 ); /// remove 7,8 and insert 1,2,3,4
console.log( myArray ); // [ 0, 1, 2, 3, 4, 5 ]

Example: sort
var myArray = [ 3, 4, 6, 1 ];
myArray.sort(); // 1, 3, 4, 6

- If the return value is less than zero, the index of a is before b, and if it 
  is greater than zero it's vice-versa. If the return value is zero, the 
  elements' index is equal.
Example 2: sort descending
function descending( a, b ) {
    return b - a;
}
var myArray = [ 3, 4, 6, 1 ];
myArray.sort( descending ); // [ 6, 4, 3, 1 ]


[ ---  end  ---- ]

=== [ topic ][ string ][ operation ] ===
[ --- start ---- ]
$.trim() - remove space
[ ---  end  ---- ]

=== [ topic ][ web font ][ topic ] ===
[ --- start ---- ]
- to prevent web font slow down rendering time, use following
- Omar Al Zabir: http://www.codeproject.com/Articles/462209/Using-custom-font-without-slowing-down-page-load
$(document).ready(function(){
  $.ajax({
    url: fontFile,
    beforeSend: function ( xhr ) {
      xhr.overrideMimeType("application/octet-stream");
    },
    success: function(data) {
      $("<link />", {
        'rel': 'stylesheet'
        'href': 'URL/TO/fonts.css'
      }).appendTo('head');
    }
  });
});
[ ---  end  ---- ]

=== [ topic ][ preventDefault ] ===
[ --- start ---- ]
- default action of event will not be triggered
- event.isDefaultPrevented() 
Example 1:
<a href="http://jquery.com">default click action is prevented</a>
<div id="log"></div>
<script>
$( "a" ).click(function( event ) {
        event.preventDefault();
        $( "<div>" )
        .append( "default " + event.type + " prevented" )
        .appendTo( "#log" );
        });
</script>
[ ---  end  ---- ]

=== [ topic ][ callback and function ] ===
[ --- start ---- ]
/// mycallback() will be invoke once $.get() finishes getting the mypage.html
$.get('mypage.html', mycallback);
/// call back with parameter
$.get('mypage.html', function(){
    mycallback(param);
});
/// wrong way to use callback, as the function got executed and its return value
/// is passed as an option to $.get()
$.get('mypage.html', mycallback(param));
[ ---  end  ---- ]

=== [ topic ][ data methods ] ===
[ --- start ---- ]
Example 1:
// Storing and retrieving data related to an element.
$( "#myDiv" ).data( "keyName", { foo: "bar" } );
$( "#myDiv" ).data( "keyName" ); // Returns { foo: "bar" }

Example 2:
// Storing a relationship between elements using .data()
$( "#myList li" ).each(function() {
    var $li = $( this );
    var $div = $li.find( "div.content" );
    $li.data( "contentDiv", $div );
});
 
// Later, we don't have to find the div again;
// we can just read it from the list item's data
var $firstLi = $( "#myList li:first" );
$firstLi.data( "contentDiv" ).html( "new content" );
[ ---  end  ---- ]

=== [ topic ][ utility methods ] ===
[ --- start ---- ]
- jQuery offers several utility methods in the $ namespace
    $.trim() - remove leading and trailing whitespace
    $.each() - Iterates over arrays and objects:
    $.inArray() - return the value's index in an array, or -1 if not found
    $.extend() - Changes the properties of the first object using the properties of subsequent objects:
    $.proxy() - Returns a function that will always run in the provided scope — that is, sets
the meaning of this inside the passed function to the second argument.
- $("selection").each(), not $.each(), should be used for iterating over elements
in a selection. These are not interchangeable.

Example :
$.trim( "    lots of extra whitespace    " );

Example :
$.each([ "foo", "bar", "baz" ], function( idx, val ) {
    console.log( "element " + idx + " is " + val );
});
 
$.each({ foo: "bar", baz: "bim" }, function( k, v ) {
    console.log( k + " : " + v );
});

Example :
var myArray = [ 1, 2, 3, 5 ];
if ( $.inArray( 4, myArray ) !== -1 ) {
    console.log( "found it!" );
}

Example :
var firstObject = { foo: "bar", a: "b" };
var secondObject = { foo: "baz" };
 
var newObject = $.extend( firstObject, secondObject );
 
console.log( firstObject.foo ); // "baz"
console.log( newObject.foo ); // "baz"

Example :
var firstObject = { foo: "bar", a: "b" };
var secondObject = { foo: "baz" };
var newObject = $.extend( firstObject, secondObject );
console.log( firstObject.foo ); // "baz"
console.log( newObject.foo ); // "baz"

Example : $.proxy
var myFunction = function() {
    console.log( this );
};
var myObject = {
    foo: "bar"
};
myFunction(); // window
var myProxyFunction = $.proxy( myFunction, myObject );
myProxyFunction(); // myObject

Example : $.proxy
var myObject = {
    myFn: function() {
        console.log( this );
    }
};
$( "#foo" ).click( myObject.myFn ); // HTMLElement #foo
$( "#foo" ).click( $.proxy( myObject, "myFn" ) ); // myObject

[ ---  end  ---- ]

=== [ topic ][ event ] ===
[ --- start ---- ]
================================================================================-
"Mouse Events" "Keyboard Events" "Form Events" "Document/Window Events"
================================================================================
click          keypress          submit        load
dblclick       keydown           change        resize
mouseenter     keyup             focus         scroll
mouseleave     blur              unload
--------------------------------------------------------------------------------
[ ---  end  ---- ]

=== [ topic ][ event ][ on ][ attach to new injected ][ ajax ] ===
[ --- start ---- ]
.on( events [, selector ] [, data ], handler(eventObject) )
- To remove events bound with .on(), see .off()
- Returning false from an event handler will automatically call
event.stopPropagation() and event.preventDefault(). 
Example :
$( "a.disabled" ).on( "click", false );

Title: Passing data to the handler
- if data argument is provided, and is not null or undefined, it is passed to
the handler in the event.data property
Example :
function greet( event ) {
  alert( "Hello " + event.data.name );
}
$( "button" ).on( "click", {
  name: "Karl"
}, greet );
$( "button" ).on( "click", {
  name: "Addy"
}, greet );


Example :
function notify() {
  alert( "clicked" );
}
$( "button" ).on( "click", notify );

Example :
- attach event to select "cl"
$(document).on({ 
  mouseenter: function(){
    $(this).addClass('active');
    $(this).parents(".catalog-header")
                    //.find("img :not(.active)");
                    .find(".cl")
                    .not(".active")
                    .addClass('not-active');
    }, 
  mouseleave: function(){
        //console.log(this);
        $(".cl").removeClass('active not-active');
    }
}, 
".cl"
);


@@@ ajax:
$.ajax({
  type: "POST",
  url: "/cl-wedding-gowns.php",
  data: "price="+ element.attr("value"),
  success: function(content){
    $("#cl-wedding-gowns").html(content);
    initMultiSelect();
  });

Example : custom event
$( "p" ).on( "myCustomEvent", function( event, myName ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function () {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});
[ ---  end  ---- ]

=== [ topic ][ animate ] ===
[ --- start ---- ]
$(selector).hide(speed,callback);
$(selector).show(speed,callback);
$(selector).toggle(speed,callback);
speed parameter: "slow", "fast", or milliseconds.
callback parameter is a function to be executed after toggle() completes.
- fadeOut (display become none in the end)
- slideUp (display become none in the end)
$(selector).animate({params},speed,callback);
    == params parameter defines the CSS properties to be animated.
$(selector).fadeTo(speed,opacity,callback);

Example 1:
$("p").hide(1000);
$("p").toggle();

Example 2:
$(".flip").click(function() {
    $(".panel").fadeToggle(1000);
});

Example 3: fadeIn, fadeOut, fadeToggle()
  $("button").click(function(){
    $("#div1").fadeIn();
    $("#div2").fadeIn("slow");
    $("#div3").fadeIn(3000);
  });

  $("button").click(function(){
    $("#div1").fadeTo("slow",0.15);
    $("#div2").fadeTo("slow",0.4);
    /// if it is 1.0 then it in its original color
    /// if become 0, it become transparent
    $("#div3").fadeTo("slow",0.7);
  });

  $("button").click(function(){
    $("#div1").fadeToggle();
    $("#div2").fadeToggle("slow");
    $("#div3").fadeToggle(3000);
  });

Example 4:
$("#panel").slideDown();
$("#panel").slideUp();
$("#panel").slideToggle();

Example 5:
$("button").click(function(){
  $("div").animate({left:'250px'});
}); 

$("button").click(function(){
  $("div").animate({
    left:'250px',
    opacity:'0.5',
    height:'150px',
    width:'150px'
  });
}); 

/// using relative value
/// will always increase based on previous value
/// e.g. 150 -> 300 -> 450 ...
$("button").click(function(){
  $("div").animate({
    left:'250px',
    height:'+=150px',
    width:'+=150px'
  });
}); 

/// toggle (from original property value to 0, set display to none, reset property to
//  original value)
/// By default, all HTML elements have a static position, and cannot be moved.
//To manipulate the position, remember to first set the CSS position property of
//the element to relative, fixed, or absolute!
  $("button").click(function(){
    $("div").animate({
      height:'toggle'
    });
  });
[ ---  end  ---- ]

=== [ topic ][ animate ][ hover then others fade ] ===
[ --- start ---- ]
<ul id="sites">
  <li style="opacity: 1;" class=""> site 1
   <ul><li>sub item 1</li><li>sub item 2</li><li>sub item 3</li></ul>
  </li><li style="opacity: 1;" class=""> site 2
   <ul><li>sub item 1</li><li>sub item 2</li><li>sub item 3</li></ul>  
  </li><li style="opacity: 1;" class=""> site 3  
   <ul><li>sub item 1</li><li>sub item 2</li><li>sub item 3</li></ul>
  </li><li style="opacity: 1;" class=""> site 4
   <ul><li>sub item 1</li><li>sub item 2</li><li>sub item 3</li></ul>  
  </li><li style="opacity: 1;" class=""> site 5
</li></ul>

$(function() {
    
    $("#sites").hover(
    function() {
    }, 
    function() {
        $('#sites>li').fadeTo("fast", 1.0);
    }
    );
    
    $("#sites>li").hoverIntent(
    function() {
        $(this).attr('class', 'current'); // Add class .current
        $(this).siblings().fadeTo("fast", 0.3); // Fade other items to 30%
        $(this).fadeTo("slow", 1.0); // Fade current to 100%
    
    }, 
    function() {
        $(this).removeClass("current"); // Remove class .current
        $(this).fadeTo("fast", 1.0); // This should set the other's opacity back to 100% on mouseout   
    });
});
[ ---  end  ---- ]

=== [ topic ][ animate ][ queue ] ===
[ --- start ---- ]
- for multiple animate(), jQuery create internal queues, then run one by one
- can make use of this behaviour to perform animation one after another

Example :
$("button").click(function(){
  var div=$("div");
  div.animate({height:'300px',opacity:'0.4'},"slow");
  div.animate({width:'300px',opacity:'0.8'},"slow");
  div.animate({height:'100px',opacity:'0.4'},"slow");
  div.animate({width:'100px',opacity:'0.8'},"slow");
}); 

[ ---  end  ---- ]

=== [ topic ][ animate ][ stop ] ===
[ --- start ---- ]
syntax:
$(selector).stop(stopAll,goToEnd);
    == stopAll parameter specifies whether also the animation queue should be
    cleared or not. Default is false, which means that only the active animation
    will be stopped, allowing any queued animations to be performed afterwards.
    == The optional goToEnd parameter specifies whether or not to complete the
    current animation immediately. Default is false.

Example :
$(document).ready(function(){
  $("#flip").click(function(){
    $("#panel").slideDown(5000);
  });
  $("#stop").click(function(){
    $("#panel").stop();
  });
});
[ ---  end  ---- ]

=== [ topic ][ navigate to ] ===
[ --- start ---- ]
Example :
<a href="ajax.htm?foo=32" onClick="navigate('ajax.html#foo=32'); return
false">foo 32</a>

Example :
function scrollToAnchor(aid){
    var aTag = $("a[name='"+ aid +"']");
    $('html,body').animate({scrollTop: aTag.offset().top},'slow');
}

$("#link").click(function() {
   scrollToAnchor('id3');
});
[ ---  end  ---- ]

=== [ topic ][ callback ] ===
[ --- start ---- ]
- no callback, the alert perform immediately before element completely hidden
Example :
$("button").click(function(){
  $("p").hide(1000);
  alert("The paragraph is now hidden");
});

- with callback, alert only trigger after the animation complete
Example :
$("button").click(function(){
  $("p").hide("slow",function(){
    alert("The paragraph is now hidden");
  });
});
[ ---  end  ---- ]

=== [ topic ][ sizzle ] ===
[ --- start ---- ]
Sizzle 
- more lightweight than jQuery. 
- jQuery is an entire DOM manipulation library and 
- sizzle is just a selector engine. 
- jQuery is 80kb gzipped and minified. Sizzle is 50kb uncompressed.
- is a component of jQuery. 
- jQuery uses sizzle when no native DOM selectors are available, or when you use
  selectors the DOM doesn't support.
- Sizzle is 34% faster in Chrome for these tests
[ ---  end  ---- ]

=== [ topic ][ event.preventDefault vs return false ] ===
[ --- start ---- ]
- returning false will only trigger stopPropagation() if you use jQuery: if you
  add the event handler manually, it won't stop the event from bubbling!
Example 1:
If the event handler is added using old model, for example
elem.onclick = function(){
    return false;
};
Then, return false prevents default action, like event.preventDefault().

If the event handler is added using addEventListener, for example
elem.addEventListener(
    'click',
    function(e){
        return false;
    },
    false
);
Then, return false doesn't prevent the default action.

[ ---  end  ---- ]

=== [ topic ][ disable ][ key ] ===
[ --- start ---- ]
function disableF5(e) {
    if ((e.which || e.keyCode) == 116) e.preventDefault();
};   

$(document).bind("keydown", disableF5);
[ ---  end  ---- ]

=== [ topic ][ problem ] ===
[ --- start ---- ]
Problem: Uncaught TypeError: Illegal constructor
Solution: change the $(Document) to $(document)
Reason: js is case sensitive
[ ---  end  ---- ]
