=== [ topic ][ intro ] ===
[ --- start ---- ]
jQuery is a JavaScript Library.
jQuery greatly simplifies JavaScript programming.
jQuery is easy to learn.
- Using JQuery would take care of that browser inconsistency.
[ ---  end  ---- ]

=== [ topic ][ script ][ source ] ===
[ --- start ---- ]
<script src="/home/knxy/confignewpc/jquery/jquery-1.10.1.min.js">
[ ---  end  ---- ]

=== [ topic ][ script ][ use CDN otherwise fallback local ] ===
[ --- start ---- ]
/// in html 5 type="text/javascript" is no longer required
/// https://developers.google.com/speed/libraries/devguide
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"> </script>
<script charset="utf-8">
if (typeof jQuery == "undefined") {
    document.write(unescape("%3Cscript src='path/to/local/jquery.js'
                %3E%3C/script%3E"));
}
</script>
[ ---  end  ---- ]

=== [ topic ][ the basic structure ] ===
[ --- start ---- ]
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Demo</title>
</head>
<body>
    <a href="http://jquery.com/">jQuery</a>
    <script src="jquery.js"></script>
    <script>
 
    // Your code goes here.
 
    </script>
</body>
</html>
[ ---  end  ---- ]

=== [ topic ][ ready ][ example ] ===
[ --- start ---- ]
- run as soon as the DOM objects has finished downloading without waiting for
  all images to finish
Example 1:
$(document).ready(function(){
	$(".btn_show").click(function(){
		var pos=$(this).attr("value")
		$(this).siblings("a").after("<img style='max-width: 300px' src='"+pos+"'>");
	});

	$(".btn_del").click(function(){
		$(this).siblings("img").remove();
	});

	$("#btn_remove").click(function(){
		$("img").remove();
	});
});

Example 2:
function myFunction(){
    ...
}
$(document).ready(myFunction);
Example 3: shorthand for $(document).ready(function(){...})
$(function(){
    ...
});
[ ---  end  ---- ]

=== [ topic ][ ready vs onload ] ===
[ --- start ---- ]
/// js onload function only executes after all images are finished downloading
/// until iframes or images is ready
/// take note it is window.onload not document.onload
window.onload = function() {  ...  }
$(window).load(function(){
    console.log("window(iframes and images) is ready")
});

/// jquery ready run once the dom is ready to be manipulated, w/o waiting for
/// images to finish download
$(document).ready( function(){
    console.log("DOM object is ready");
});
[ ---  end  ---- ]

=== [ topic ][ $ vs $() ] ===
[ --- start ---- ]
[ jQuery object method ]
- these methods are part of "$.fn namespace", or 'jQuery prototype'
- can be thought as "jQuery object methods". 
- automatically receive and return the selection as "this"
Example 1:
$( "h1" ).remove();

[ jQuery method ]
- several methods do not act on a selection
- these methods are said to be part of the "jQuery namespace"
- are best thought of as core "jQuery methods"
- method in the $ namespace are generally utility-type methods
- they are not automatically passed any arguments, and their return value vary

[ same names ]
- convention 
utility: $.each()
selection: .each()

from so:
jQuery.data(document.body, 'foo', 'bar') === $(document.body).data('foo', 'bar');
[ ---  end  ---- ]

=== [ topic ][ non-conflict mode ] ===
[ --- start ---- ]
- by default, jQuery use $ as a shortcut for jQuery.
- if using another javascript library that uses $ variable, will run into
  conflicts with jQuery

Example 1:
<!-- Putting jQuery into no-conflict mode. -->
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
 
var $j = jQuery.noConflict();
// $j is now an alias to the jQuery function; creating the new alias is optional.
 
$j(document).ready(function() {
    $j( "div" ).hide();
});
 
// The $ variable now has the prototype meaning, which is a shortcut for
// document.getElementById(). mainDiv below is a DOM element, not a jQuery object.
window.onload = function() {
    var mainDiv = $( "main" );
}
</script>

Example 2: use $ for jQuery instead, dont' care about using other library's $
<!-- Another way to put jQuery into no-conflict mode. -->
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
 
jQuery.noConflict();
 
jQuery( document ).ready(function( $ ) {
    // You can use the locally-scoped $ in here as an alias to jQuery.
    $( "div" ).hide();
});
 
// The $ variable in the global scope has the prototype.js meaning.
window.onload = function(){
    var mainDiv = $( "main" );
}
 
</script>

Example 3: 
- load jQuery before others, $ have meaning defined by other library
- no need to relingquish the $ alias by calling jQuery.noConflict()
<!-- Loading jQuery before other libraries. -->
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
// Use full jQuery function name to reference jQuery.
jQuery( document ).ready(function() {
    jQuery( "div" ).hide();
});
 
// Use the $ variable as defined in prototype.js
window.onload = function() {
    var mainDiv = $( "main" );
};
 
</script>

Example 4:
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
jQuery(document).ready(function( $ ) {
    // Your jQuery code here, using $ to refer to jQuery.
});
 
</script>

Example 5: concise form
<script src="jquery.js"></script>
<script src="prototype.js"></script>
<script>
 
jQuery(function($){
    // Your jQuery code here, using the $
});
 
</script>

Example 6: from source code
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;
[ ---  end  ---- ]

=== [ topic ][ insert html ][ innerHTML ] ===
[ --- start ---- ]
Example:
$('#yourDivName').html('yourtHTML');
// add as the last item of the selected div
$('#yourDivName').append('yourtHTML');
// add as the first item in the selected div
$('#yourDivName').prepend('yourtHTML');
[ ---  end  ---- ]

=== [ topic ][ changing ][ attribute ] ===
[ --- start ---- ]
Example 1:
$("#h01").attr("style","color:red").html("Hello jQuery")
$(document).ready(myFunction);
<h1 id="h01"></h1>
[ ---  end  ---- ]

=== [ topic ][ appendChild ][ topic ] ===
[ --- start ---- ]

[ ---  end  ---- ]

=== [ topic ][ append ] ===
[ --- start ---- ]
Example 1:
$( ".inner" ).append( "<p>Test</p>" );

<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
become:
<div class="inner"> Hello <p>Test</p> </div>
<div class="inner"> Goodbye <p>Test</p>

Example 2:
$( ".container" ).append( $( "h2" ) );

<h2>Greetings</h2>
<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
become:
<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
<h2>Greetings</h2>
</div>
[ ---  end  ---- ]

=== [ topic ][ jquery vs javascript ] ===
[ --- start ---- ]
jQuery
$ (‘body’) .css (‘background’, ‘#ccc’);

JavaScript
Function changeBachground(color) {
        Document.body.style.background = color;
}
Onload=”changeBackground (‘red’);”
[ ---  end  ---- ]

=== [ topic ][ array ][ declare ] ===
[ --- start ---- ]
// A simple array with constructor.
var myArray1 = new Array( "hello", "world" );

// Literal declaration, the preferred way.
var myArray2 = [ "hello", "world" ];
[ ---  end  ---- ]

=== [ topic ][ array ][ general ][ empty ][ pop ][ push ]===
[ --- start ---- ]
Example 1:
var myArray = [];
// Adds "hello" on index 0
myArray.push( "hello" );
// Adds "world" on index 1
myArray.push( "world" );
// Adds "!" on index 2
myArray[ 2 ] = "!";

Example 2:
var myArray = [];
myArray[ 0 ] = "hello";
myArray[ 1 ] = "world";
myArray[ 3 ] = "!";
console.log( myArray ); // [ "hello", "world", undefined, "!" ];
console.log( myArray[ 2 ] ); // "!"
console.log( myArray.length ); // 3

Example 3:
var myArray = [];
myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
myArray.pop();     // [ 0 , 2 ]
[ ---  end  ---- ]

=== [ topic ][ looping ][ array ] ===
[ --- start ---- ]
Example 1:
var myArray = [ "hello", "world", "!" ];
for ( var i = 0; i < myArray.length; i = i + 1 ) {
    console.log( myArray[ i ] );
}

Example 2:
var myArray = [ "hello", "world", "!" ];
for ( var i in myArray ) {
    console.log( myArray[ i ] );
}

Example 3:
function printElement( elem ) {
    console.log( elem );
}
function printElementAndIndex( elem, index ) {
    console.log( "Index " + index + ": " + elem );
}
function negateElement( elem, index, array ) {
    array[ index ] = -elem;
}
myArray = [ 1, 2, 3, 4, 5 ];
// Prints all elements to the console
myArray.forEach( printElement );
// Prints "Index 0: 1", "Index 1: 2", "Index 2: 3", ...
myArray.forEach( printElementAndIndex );
// myArray is now [ -1, -2, -3, -4, -5 ]
myArray.forEach( negateElement );

[ ---  end  ---- ]

=== [ topic ][ array ][ concatenate ] ===
[ --- start ---- ]
var myArray = [ 2, 3, 4 ];
var myOtherArray = [ 5, 6, 7 ];
var wholeArray = myArray.concat( myOtherArray ); // [ 2, 3, 4, 5, 6, 7 ]
[ ---  end  ---- ]

=== [ topic ][ array ][ join ] ===
[ --- start ---- ]
- join array and create a string
var myArray = [ "hello", "world", "!" ];
// The default separator is a comma.
console.log( myArray.join() );     // "hello,world,!"
// Any string can be used as separator...
console.log( myArray.join( " " ) );  // "hello world !";
console.log( myArray.join( "!!" ) ); // "hello!!world!!!";
// ...including an empty one.
console.log( myArray.join( "" ) );   // "helloworld!"
[ ---  end  ---- ]

=== [ topic ][ array ][ misc ] ===
[ --- start ---- ]
Example: reverse
var myArray = [ "world" , "hello" ];
myArray.reverse(); // [ "hello", "world" ]

Example: shift (queue-like)
var myArray = [];
myArray.push( 0 ); // [ 0 ]
myArray.push( 2 ); // [ 0 , 2 ]
myArray.push( 7 ); // [ 0 , 2 , 7 ]
myArray.shift();   // [ 2 , 7 ]

Example: unshift (insert value at first position)
var myArray = [];
myArray.unshift( 0 ); // [ 0 ]
myArray.unshift( 2 ); // [ 2 , 0 ]
myArray.unshift( 7 ); // [ 7 , 2 , 0 ]

Example: slicing
var myArray = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
var newArray = myArray.slice( 3 ); // start-index as parameter
console.log( myArray );  // [ 1, 2, 3, 4, 5, 6, 7, 8 ]
console.log( newArray ); // [ 4, 5, 6, 7, 8 ]

- myArray.splice( start-index, length, values, ... );
- Removes a certain amount of elements and adds new ones at the given index. It 
  takes at least three parameters:
Example: splice() -
var myArray = [ 0, 7, 8, 5 ];
myArray.splice( 1, 2, 1, 2, 3, 4 ); /// remove 7,8 and insert 1,2,3,4
console.log( myArray ); // [ 0, 1, 2, 3, 4, 5 ]

Example: sort
var myArray = [ 3, 4, 6, 1 ];
myArray.sort(); // 1, 3, 4, 6

- If the return value is less than zero, the index of a is before b, and if it 
  is greater than zero it's vice-versa. If the return value is zero, the 
  elements' index is equal.
Example 2: sort descending
function descending( a, b ) {
    return b - a;
}
var myArray = [ 3, 4, 6, 1 ];
myArray.sort( descending ); // [ 6, 4, 3, 1 ]


[ ---  end  ---- ]

=== [ topic ][ web font ][ topic ] ===
[ --- start ---- ]
- to prevent web font slow down rendering time, use following
- Omar Al Zabir: http://www.codeproject.com/Articles/462209/Using-custom-font-without-slowing-down-page-load
$(document).ready(function(){
  $.ajax({
    url: fontFile,
    beforeSend: function ( xhr ) {
      xhr.overrideMimeType("application/octet-stream");
    },
    success: function(data) {
      $("<link />", {
        'rel': 'stylesheet'
        'href': 'URL/TO/fonts.css'
      }).appendTo('head');
    }
  });
});
[ ---  end  ---- ]

=== [ topic ][ preventDefault ] ===
[ --- start ---- ]
- default action of event will not be triggered
- event.isDefaultPrevented() 
Example 1:
<a href="http://jquery.com">default click action is prevented</a>
<div id="log"></div>
<script>
$( "a" ).click(function( event ) {
        event.preventDefault();
        $( "<div>" )
        .append( "default " + event.type + " prevented" )
        .appendTo( "#log" );
        });
</script>
[ ---  end  ---- ]

=== [ topic ][ callback and function ] ===
[ --- start ---- ]
/// mycallback() will be invoke once $.get() finishes getting the mypage.html
$.get('mypage.html', mycallback);
/// call back with parameter
$.get('mypage.html', function(){
    mycallback(param);
});
/// wrong way to use callback, as the function got executed and its return value
/// is passed as an option to $.get()
$.get('mypage.html', mycallback(param));
[ ---  end  ---- ]

=== [ topic ][ sizzle ] ===
[ --- start ---- ]
Sizzle 
- more lightweight than jQuery. 
- jQuery is an entire DOM manipulation library and 
- sizzle is just a selector engine. 
- jQuery is 80kb gzipped and minified. Sizzle is 50kb uncompressed.
- is a component of jQuery. 
- jQuery uses sizzle when no native DOM selectors are available, or when you use
  selectors the DOM doesn't support.
- Sizzle is 34% faster in Chrome for these tests
[ ---  end  ---- ]

=== [ topic ][ event.preventDefault vs return false ] ===
[ --- start ---- ]
- returning false will only trigger stopPropagation() if you use jQuery: if you
  add the event handler manually, it won't stop the event from bubbling!
Example 1:
If the event handler is added using old model, for example
elem.onclick = function(){
    return false;
};
Then, return false prevents default action, like event.preventDefault().

If the event handler is added using addEventListener, for example
elem.addEventListener(
    'click',
    function(e){
        return false;
    },
    false
);
Then, return false doesn't prevent the default action.

[ ---  end  ---- ]

=== [ topic ][ problem ] ===
[ --- start ---- ]
Problem: Uncaught TypeError: Illegal constructor
Solution: change the $(Document) to $(document)
Reason: js is case sensitive
[ ---  end  ---- ]
