=== [ topic ][ safe practice ] ===
[ --- start ---- ]
- put a blank index.html file in folder which not supposed to be accessed
  so server will not list the directory content to all
[ ---  end  ---- ]

=== [ topic ][ setup ] ===
[ --- start ---- ]
sudo apt-get install tasksel
sudo tasksel install lamp-server
## note: only use tasksel to install, not to remove task (due to bugs)
[ ---  end  ---- ]

=== [ topic ][ apache2 ] ===
[ --- start ---- ]
- testing
http://localhost
- server file should be stored in /var/www
- run, stop, test, restart
$ sudo /usr/sbin/apache2ctl start
$ sudo /usr/sbin/apache2ctl stop
$ sudo /usr/sbin/apache2ctl configtest
$ sudo /usr/sbin/apache2ctl restart
or
$ sudo /etc/init.d/apache2 restart
or 
$ sudo service apache2 restart
or consider to gracefully reload the configuration instead of restart
sudo apache2ctl graceful
[ ---  end  ---- ]

=== [ topic ][ httpd.conf ] ===
[ --- start ---- ]
On Ubuntu, httpd.conf is located in the directory /etc/apache2/apache2.conf
[ ---  end  ---- ]

=== [ topic ][ apache ][ virtual host ] ===
[ --- start ---- ]
- Apache2 can have many sites, each with different configuration file
- the config file stored in /etc/apache2/sites-available/
- default config file is /etc/apche2/sites-available/default

to create new site
- $ echo '<b>Hello! It is working!</b>' > /home/user/public_html/index.html
- cp /etc/apche2/sites-available/default /etc/apche2/sites-available/mysite.conf
- Change the DocumentRoot to point to the new location. For example, /home/user/public_html/
- Change the Directory directive, replace <Directory /var/www/> to <Directory /home/user/public_html/>
- You can also set separate logs for each site. To do this, change the ErrorLog and CustomLog directives
- deactivate the old site, and activate our new one
( a2ensite (apache2enable site) and a2dissite (apache2disable site). )
$ sudo a2dissite default && sudo a2ensite mysite
$ sudo /etc/init.d/apache2 restart
[ ---  end  ---- ]

=== [ topic ][ apache ][ virtual host ][ multi domain ] ===
[ --- start ---- ]
NameVirtualHost *:80

<VirtualHost *:80>
    DocumentRoot /home/roy/sobuhu
    ServerName aaa.com
</VirtualHost>

<VirtualHost *:80>
    DocumentRoot /disk1/allen/www
    ServerName bbb.com
    ServerAlias *.bbb.com
</VirtualHost>
[ ---  end  ---- ]

=== [ topic ][ apache ][ virtual host ][ diff site on diff port ] ===
[ --- start ---- ]
http://httpd.apache.org/docs/2.2/vhosts/examples.html
Running different sites on different ports.

You have multiple domains going to the same IP and also want to serve multiple
ports. By defining the ports in the "NameVirtualHost" tag, you can allow this to
work. If you try using <VirtualHost name:port> without the NameVirtualHost
name:port or you try to use the Listen directive, your configuration will not
work.

Server configuration

Listen 80
Listen 8080

NameVirtualHost 172.20.30.40:80
NameVirtualHost 172.20.30.40:8080

<VirtualHost 172.20.30.40:80>
ServerName www.example.com
DocumentRoot /www/domain-80
</VirtualHost>

<VirtualHost 172.20.30.40:8080>
ServerName www.example.com
DocumentRoot /www/domain-8080
</VirtualHost>

<VirtualHost 172.20.30.40:80>
ServerName www.example.org
DocumentRoot /www/otherdomain-80
</VirtualHost>

<VirtualHost 172.20.30.40:8080>
ServerName www.example.org
DocumentRoot /www/otherdomain-8080
</VirtualHost>
[ ---  end  ---- ]

=== [ topic ][ apache ][ problem ] ===
[ --- start ---- ]
{ problem: }
Could not determine the server's fully qualified domain name
{ solution: }
sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.bak
sudo vim /etc/apache2/apache2.conf
add a new line
ServerName localhost
[ ---  end  ---- ]

=== [ topic ][ apache ][ permission ] ===
[ --- start ---- ]
Error Log: /var/log/apache2/ErrorLog
Permission denied: /media/knxy/.htaccess pcfg_openfile: unable to check htaccess
file, ensure it is readable

Nautilus mounts NTFS partitions with odd permissions so that no user but
yourself (and root, of course) can read or write from/to it.
To solve that, close all Nautilus windows, stop apache2, open a terminal and do
the following:
$ sudo umount /dev/sda3
$ mkdir /media/DriveD
$ sudo ntfs-3g /dev/sda3 /media/DriveD

[ ---  end  ---- ]

=== [ topic ][ apache ][ .htaccess ] ===
[ --- start ---- ]
- provide additional level of security to the folder it is in
- the directives in an .htaccess file also apply to any subfolder below the
  folder they are places in

advantage:
- adding authorization/authentication
    == can use .htaccess file to password-protect files and folders, often in
    conjunction with another file call .htpasswd, which store the valid login
    details
    == blocking users via IP addr or domain name
    == control directory listing
        *** default user browsers display a list of files within that folder
    == rewriting URLs. 
        *** .htaccess file can make new index that enables users to use a
        shortened versino of the file path that the server can understand 
        *** useful in redirect incoming links to old filenames to the new
        filenames

disadvantage:
- .htaccess file are read with every http request and, with each request, the
  server must look in every folder above the current folder in the f=directory
  tree for .htaccess files, which may have commands that override the .htaccess
  file in the current folder. 
- resulted in mmore file reads and disk searches for every web page that is
  viewed, slowing down the whole system
- if has access to httpd server config file, maybe faster
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ disable access ] ===
[ --- start ---- ]
- visitor will be displayed '403 Forbidden'
- make entire directory unavailable for access

# Disable indexing:
Options All -Indexes

#Ignore every file:
IndexIgnore *

# Prevent access to any file:
<Filematch "^.*$">
Order Allow, Deny
Deny from all
</FilesMatch>

Title: Deny by IP
order allow,deny
deny from 255.0.0.0
// ### any IP matching the first 3 sets of digits will be blocked
deny from 123.45.6.
allow from all

Title: deny all but from
order allow,deny
allow from 255.0.0.0
deny from all
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ deny by referer ] ===
[ --- start ---- ]
- deny access based on where they come from
- increate in traffic, yet not increases in actual file requests
  == probably someone pinching content (such as CSS files)
  == or someone attempting to hack web sites (try to find non public content)
- blocked user will be shown 403 Forbidden error
- use [NC, OR] multiple domain blocked 
- uncomment Options +FollowSymlinks if server return '500 Internal Server'
  == it is due to server isn't configured with FollowSymLinks in apache.conf

Example : 
// block traffic from the URL 'otherdomain.com', 'otherdomain.com',
'OTHERDOMAIN.COM'
RewriteEngine on
# Options +FollowSymlinks
RewriteCond %{HTTP_REFERER} otherdomain\.com [NC]
RewriteRule .* - [F]

Example : block traffic from otherdomain.com, anotherdomain.com [NC, OR]
RewriteEngine on
# Options +FollowSymlinks
RewriteCond %{HTTP_REFERER} otherdomain\.com [NC,OR]
RewriteCond %{HTTP_REFERER} anotherdomain\.com
RewriteRule .* - [F]
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ hot link prevention ] ===
[ --- start ---- ]
- hot link prevention = 
    stop web site not your own from displaying your content 
- most commonly used to prevent other web sites from displaying your images
  == can be used to prevent people from using javascript and css files
- hot linking uses your bandwidth
- can prevent other web site from sourcing your content
- and even display different content

Example : hot link prevention for '.gif', '.jpg', '.css'
RewriteEngine on
RewriteCond %{HTTP_REFERER} !^$
RewriteCond %{HTTP_REFERER} !^http://(www\.)?yourdomain.com/.*$ [NC]
RewriteRule \.(gif|jpg|css)$ - [F]

Example : hot link prevention for gif, jpg and display alternate content
RewriteEngine on
RewriteCond %{HTTP_REFERER} !^$
RewriteCond %{HTTP_REFERER} !^http://(www\.)?yourdomain.com/.*$ [NC]
RewriteRule \.(gif|jpg)$ http://www.yourdomain.com/angryman.jpg [R,L]
[ ---  end  ---- ]

=== [ topic ][ apache ][ block bad bots and offline browser ] ===
[ --- start ---- ]
RewriteEngine On 
RewriteCond %{HTTP_USER_AGENT} ^BlackWidow [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Bot\ mailto:craftbot@yahoo.com [OR] 
RewriteCond %{HTTP_USER_AGENT} ^ChinaClaw [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Custo [OR] 
RewriteCond %{HTTP_USER_AGENT} ^DISCo [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Download\ Demon [OR] 
RewriteCond %{HTTP_USER_AGENT} ^eCatch [OR] 
RewriteCond %{HTTP_USER_AGENT} ^EirGrabber [OR] 
RewriteCond %{HTTP_USER_AGENT} ^EmailSiphon [OR] 
RewriteCond %{HTTP_USER_AGENT} ^EmailWolf [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Express\ WebPictures [OR] 
RewriteCond %{HTTP_USER_AGENT} ^ExtractorPro [OR] 
RewriteCond %{HTTP_USER_AGENT} ^EyeNetIE [OR] 
RewriteCond %{HTTP_USER_AGENT} ^FlashGet [OR] 
RewriteCond %{HTTP_USER_AGENT} ^GetRight [OR] 
RewriteCond %{HTTP_USER_AGENT} ^GetWeb! [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Go!Zilla [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Go-Ahead-Got-It [OR] 
RewriteCond %{HTTP_USER_AGENT} ^GrabNet [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Grafula [OR] 
RewriteCond %{HTTP_USER_AGENT} ^HMView [OR] 
RewriteCond %{HTTP_USER_AGENT} HTTrack [NC,OR] 
RewriteCond %{HTTP_USER_AGENT} ^Image\ Stripper [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Image\ Sucker [OR] 
RewriteCond %{HTTP_USER_AGENT} Indy\ Library [NC,OR] 
RewriteCond %{HTTP_USER_AGENT} ^InterGET [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Internet\ Ninja [OR] 
RewriteCond %{HTTP_USER_AGENT} ^JetCar [OR] 
RewriteCond %{HTTP_USER_AGENT} ^JOC\ Web\ Spider [OR] 
RewriteCond %{HTTP_USER_AGENT} ^larbin [OR] 
RewriteCond %{HTTP_USER_AGENT} ^LeechFTP [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Mass\ Downloader [OR] 
RewriteCond %{HTTP_USER_AGENT} ^MIDown\ tool [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Mister\ PiX [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Navroad [OR] 
RewriteCond %{HTTP_USER_AGENT} ^NearSite [OR] 
RewriteCond %{HTTP_USER_AGENT} ^NetAnts [OR] 
RewriteCond %{HTTP_USER_AGENT} ^NetSpider [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Net\ Vampire [OR] 
RewriteCond %{HTTP_USER_AGENT} ^NetZIP [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Octopus [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Offline\ Explorer [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Offline\ Navigator [OR] 
RewriteCond %{HTTP_USER_AGENT} ^PageGrabber [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Papa\ Foto [OR] 
RewriteCond %{HTTP_USER_AGENT} ^pavuk [OR] 
RewriteCond %{HTTP_USER_AGENT} ^pcBrowser [OR] 
RewriteCond %{HTTP_USER_AGENT} ^RealDownload [OR] 
RewriteCond %{HTTP_USER_AGENT} ^ReGet [OR] 
RewriteCond %{HTTP_USER_AGENT} ^SiteSnagger [OR] 
RewriteCond %{HTTP_USER_AGENT} ^SmartDownload [OR] 
RewriteCond %{HTTP_USER_AGENT} ^SuperBot [OR] 
RewriteCond %{HTTP_USER_AGENT} ^SuperHTTP [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Surfbot [OR] 
RewriteCond %{HTTP_USER_AGENT} ^tAkeOut [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Teleport\ Pro [OR] 
RewriteCond %{HTTP_USER_AGENT} ^VoidEYE [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Web\ Image\ Collector [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Web\ Sucker [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebAuto [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebCopier [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebFetch [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebGo\ IS [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebLeacher [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebReaper [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebSauger [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Website\ eXtractor [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Website\ Quester [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebStripper [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebWhacker [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WebZIP [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Wget [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Widow [OR] 
RewriteCond %{HTTP_USER_AGENT} ^WWWOFFLE [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Xaldon\ WebSpider [OR] 
RewriteCond %{HTTP_USER_AGENT} ^Zeus 
RewriteRule ^.* - [F,L]
[ ---  end  ---- ]

=== [ topic ][ htaccess ][ RewriteCond ] ===
[ --- start ---- ]
- dir/file.php?name=something/3 would be dir/file.php?name=something&page=3

[R]	Redirect you can add an =301 or =302 to change the type.
[F]	Forces the url to be forbidden. 403 header
[G]	Forces the url to be gone 401 header
[L]	Last rule. (You should use this on all your rules that don't link together)
[N]	Next round. Rerun the rules again from the start
[C]	Chains a rewrite rule together with the next rule.
[T]	use T=MIME-type to force the file to be a mime type
[NS]	Use if no sub request is requested
[NC]	Makes the rule case INsensitive
[QSA]	Query String Append use to add to an existing query string
[NE]	Turns of normal escapes that are default in the rewriterule
[PT]	Pass through to the handler (together with mod alias)
[S]	Skip the next rule S=3 skips the next 3 rules
[E]	E=var sets an enviromental variable that can be called by other rules


Example :
RewriteCond %{QUERY_STRING} (.*)/([0-9]+)$
RewriteRule ^(.+)$ /$1?%1&page=%2 [L]

Example :
/// check if HTTPS is not in used
RewriteCond %{HTTPS} off 
/// what need to check if HTTPS is off
RewriteRule ^(checkout\.php|billing\.php|final\.php|admin/(.*))$
                  https://%{HTTP_HOST}/$1 [R=301,L]
- %{ENVIRONMENT_VARIABLE}
- if rule is match, then URL is rewritten to https://hostname/$1
- R=301,L indicate this should be a permanent redirection type, associated with
server code 301, and that this should be the last rule evaluated
  == this ensure server won't allow the browser to load any of those pages over
  a nonsecure connection. 
[ ---  end  ---- ]

=== [ topic ][ htaccess ][ query string ] ===
[ --- start ---- ]
- keep existing query string, and append new query string to the end

Example : ^/page?query=val1 --> ^/page?query=val1&var=var
RewriteRule ^/page /page?var=val [QSA]

Example :
- Rewrite URLs like http://example.com/page1?var=val to 
  http://example.com/page2?var=val 
- but don't rewrite if val isn't present.
RewriteCond %{QUERY_STRING} val
RewriteRule ^/page1 /page2

Example : /path/testval22=98 --> /path/testother_val22=98
RewriteCond %{QUERY_STRING} ^(.*)val(.*)$
RewriteRule /path /path?%1other_val%2

Example : strict
RewriteCond %{QUERY_STRING} (.*(?:^|&))key=val((?:&|$).*)
RewriteRule /path /path?%1other_val%2

Example : http://example.com/path?var=val --> http://example.com/path/var/val
- will work only for a single var=val pair containing only letters, numbers,
and the underscore character.
RewriteCond %{QUERY_STRING} ^(\w+)=(\w+)$
RewriteRule ^/path /path/%1/%2?

Example : discard original query
- If you want to discard the original query string you must append an empty
question mark at the end of the rule. Let's call it the query string not
append or query string discard flag
RewriteCond %{QUERY_STRING} ^id=([0-9]*)$
RewriteRule ^page\.php$ http://mydomain.site/page/%1.php? [R=302,L]

Example : summary
Keep original query (default behavior)
RewriteRule ^page\.php$ /target.php [L]
# from http://example.com/page.php?foo=bar
# to   http://example.com/target.php?foo=bar

Discard original query
RewriteRule ^page\.php$ /target.php? [L]
# from http://example.com/page.php?foo=bar
# to   http://example.com/target.php

Replace original query
RewriteRule ^page\.php$ /target.php?bar=baz [L]
# from http://example.com/page.php?foo=bar
# to   http://example.com/target.php?bar=baz

Append new query to original query
RewriteRule ^page\.php$ /target.php?bar=baz [QSA,L]
# from http://example.com/page.php?foo=bar
# to   http://example.com/target.php?foo=bar&bar=baz
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ password ] ===
[ --- start ---- ]
- some server require .htpasswd to be stored in the same directory
- specify user
  == require user adminuser
    *** only user adminuser can log in
  == require valid-user

- change to root user
$ mkdir /var/www/html/testfolder
$ cd /var/www/html/testfolder
$ vim .htaccess
AuthUserFile /var/www/html/testfolder/.htpasswd
AuthGroupFile /www.null
AuthName "Authorization Required"
AuthType Basic
require valid-user

## change the USER_NAME
require user USER_NAME
$ htpasswd -c /var/www/html/testfolder/.htpasswd USER_NAME
New password:
 Re-type new password:
Adding password for user USER_NAME
$ vi /etc/apache2/apache2.conf
#FOR MY TEST FOLDER
 <Directory "/var/www/html/testfolder">
 AllowOverride AuthConfig
 </Directory>
$ service httpd restart


[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ] ===
[ --- start ---- ]
- upload in ASCII mode
- make htaccess executable (0755)
- use CGI script instead of static 404.html to record error
  ==  CGI Resource Index and HotScripts.com
Example :
AuthName "Member's Area Name"
AuthUserFile /path/to/password/file/.htpasswd
AuthType Basic
require valid-user
ErrorDocument 401 /error_pages/401.html
AddHandler server-parsed .html
Redirect /old_dir/ http://www.yourdomain.com/new_dir/index.html
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ default homepage ] ===
[ --- start ---- ]
DirectoryIndex home.php
[ ---  end  ---- ]

=== [ topic ][ htaccess ][ redirect ] ===
[ --- start ---- ]
- 301 - redirect
- R default is 302 (temporary redirect)
- 302 means a temporary redirect. It implies that the page we are redirecting
  to is temporarly suppose to take the place of the file that you are
  redirected from.

Example :
RewriteRule ^blue-widgets\.html$ awesome-blue-widgets.html [R=301,L]

Example : new domain
RewriteBase /
RewriteRule ^(.*)$ http://www.newdomain.com/$1 [R=301,L]

Example :
RewriteRule ^employment\.html$ no-vacancies.html [R,L]

Explain:
Google will use the cache of no-vacancies.html in employment.html if you check
it. It will also enherit any rankings, backlinks, titles etc that
no-vacancies.html has. Be very careful with this. The last thing you want is
to set up a 302 redirect to your index page and hijack the rankings of that
page!
[ ---  end  ---- ]

=== [ topic ][ apache ][ ErrorDocument ] ===
[ --- start ---- ]
http://httpd.apache.org/docs/2.0/mod/core.html#errordocument
URLs can begin with a slash (/) for local web-paths (relative to the
DocumentRoot), or be a full URL which the client can resolve. Alternatively, a
message can be provided to be displayed by the browser.

ErrorDocument 401 /subscription_info.html
ErrorDocument 403 "Sorry can't allow you access today"
[ ---  end  ---- ]

=== [ topic ][ apache ][ mounting ] ===
[ --- start ---- ]
sudo mount -t ntfs -o rw,auto,user,fmask=0022,dmask=0000 /dev/whatever
/mnt/whatever

- or - 

udisks --mount /dev/sda3 --mount-options umask=022

- or -

sudo blkid
sudo vim /etc/fstab
# change the "UUID" to your partition UUID
UUID=12102C02102CEB83 /media/windows ntfs-3g auto,users,permissions 0 0

- or - 
/dev/disk/by-uuid/4ED2A451B2A23F59 /media/windows ntfs-3g
defaults,permissions,users,uid=1000,utf8  0 0

- mine - 
# mount to musics
UUID="EAC601B4C60181D5" /media/musics                     ntfs-3g defaults,permissions,users,uid=1000,utf8  0 0
[ ---  end  ---- ]

=== [ topic ][ apache ][ problem ] ===
[ --- start ---- ]
Error Log:
configuration error:  couldn't perform authentication. AuthType not set!
Solution:
sudo vim /etc/apache2/sites-available/u-angelic
change:
<Directory />
		Require all granted
	</Directory>
To:
<Directory />
		Options FollowSymLinks
		AllowOverride None
</Directory>
[ ---  end  ---- ]

=== [ topic ][ apahce ][ log ] ===
[ --- start ---- ]
check the location of log @ /etc/apache2/apache2.conf
e.g. 
ErrorLog ${APACHE_LOG_DIR}/error.log
to know the definition for APACHE_LOG_DIR, 
check envvars
default is location @ /var/log/apache2/
[ ---  end  ---- ]

=== [ topic ][ apache ][ virtual host ] ===
[ --- start ---- ]
- Apache2 has the concept of sites, which are separate configuration files that
  Apache2 will read
-  /etc/apache2/sites-available
- By default, there is one site available called 000-default
- This is what you will see when you browse to http://localhost or
  http://127.0.0.1

Example : we want the default site to be /home/user/public_html/
1. copy default website as starting point. 
$ sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/mysite.conf
2. edit the config file
sudo vim /etc/apache2/site-available/mysite.conf
    == change the DocumentRoot to point to new location
        e.g. /home/user/public_html/
    == add a line before the DocumentRoot for ServerName
        e.g.: ServerName u-angelic.localhost
    == change the directory directive replace <Directory /var/wwww> to
    <Directory /home/user/public_html/>
    == can set separate logs for each site, set the CustomLog directives
3. enable the new site
    == sudo a2ensite mysite 
    == if need to disable default site
        $ a2dissite default
    == sudo /etc/init.d/apache2 restart
4. edit the /etc/hosts to include the u-angelic.localhost
        127.0.0.1	u-angelic.localhost
[ ---  end  ---- ]

=== [ topic ][ apache2 ][ local access only ] ===
[ --- start ---- ]
- change the ports.conf @ /etc/apache2/ports.conf
from 
NameVirtualHost *:80
Listen 80

to 
NameVirtualHost *:80
Listen 127.0.0.1:80
- restart apache
/etc/apache2/ports.conf
[ ---  end  ---- ]

=== [ topic ][ apache ][ ntfs ] ===
[ --- start ---- ]
- check the ntfs partition id
$ sudo blkid

default permission:
/dev/sda6 on /media/knxy/musics type fuseblk (rw,nosuid,nodev,allow_other,default_permissions,blksize=4096)
[ ---  end  ---- ]

=== [ topic ][ apache ][ mod_rewrite ][ check ] ===
[ --- start ---- ]
check with phpinfo()
  == see loaded modules inside apache2handler, if mod_rewrite is loaded
  == if not there, enable it with a2enmod
$ sudo a2enmod rewrite
$ vim /etc/apache2/sites-available/<mysite>
  == change AllowOverride None to AllowOverride All
$ sudo service apache2 restart

Example : testing
1. create .htaccess file at the webroot directory
add the following:
<IfModule mod_rewrite.c>
RewriteEngine on

RewriteBase /
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]

RewriteRule ^/?test.html$ /test.php [L]

</IfModule>
2. http://localhost/test
should refer to localhost/test.php
[ ---  end  ---- ]

=== [ topic ][ apache ][ mode_rewrite ][ subdirectory ] ===
[ --- start ---- ]
folder in subdirectory of web root
e.g. /public_html/ex2/html

@@@ public_html/ex2/html/.htaccess:
RewriteBase /ex2/html/

# For the primary categories:
RewriteRule ^shop/(coffee|goodies)/?$ /ex2/html/shop.php?type=$1

[ ---  end  ---- ]

=== [ topic ][ htaccess ][ RewriteBase ] ===
[ --- start ---- ]
RewriteBase /dir/
RewriteRule ^somefile-([0-9]+)\.htm$ index.php?id=$1 [L]
-- same as --
RewriteRule ^somefile-([0-9]+)\.htm$ /dir/index.php?id=$1 [L]
[ ---  end  ---- ]

=== [ topic ][ htaccess ][ regular expression ] ===
[ --- start ---- ]
Char.	Definition
\	Use before any of the following characters to escape or null the meaning or it. \* \. \$ \+ \[ \]
^	Start matching at this point
$	End point of the match
.	Any character
[]	Starts a class
|	Starts alternative match this|that would mean match this or that
()	starts a back reference point
?	match 0 or 1 time Quantifier
+	match atleast 1 or more times Quantifier
*	match 0 to infinite times Quantifier
{}	match minimum to maximum Quantifier {0,3} match up to 3 times
[ ---  end  ---- ]

=== [ topic ][ apache ][ mod_rewrite ][ example ] ===
[ --- start ---- ]
mod_rewrite Examples

# [L] == last flag
RewriteRule ^/?test2.html$ index.html [L]

#Specify a default home page (index page)
DirectoryIndex home.html

#Allow only specified IPs to access your site
deny from all
allow from 64.95.219.140
allow from 210.23.45.67

# Redirect all pages from olddomain.com newdomain.com
Options +FollowSymLinks
RewriteEngine on
RewriteCond %{HTTP_HOST} ^www.olddomain.com$ [OR]
RewriteCond %{HTTP_HOST} ^olddomain.com$
RewriteRule ^(.*)$ http://www.newdomain.com/$1 [R=301,L]

#Prevent subfolder loading. This goes
# in htaccess for the primary domain
RewriteCond %{HTTP_HOST} ^primary\.com$ [OR]
RewriteCond %{HTTP_HOST} ^www\.primary\.com$
RewriteRule ^addon\.com\/?(.*)$ "http\:\/\/www\.addon\.com\/$1" [R=301,L]

#Prevent subdomain name loading.
#This goes in htaccess for the primary domain
RewriteCond %{HTTP_HOST} ^subname\.primary\.com$ [OR]
RewriteCond %{HTTP_HOST} ^www\.subname\.primary\.com$
RewriteRule ^(.*)$ "http\:\/\/www\.addon\.com\/$1" [R=301,L]

# Never use www in the domain

# Replace 'example.com' with your domain name
RewriteEngine on
RewriteCond %{HTTP_HOST} ^www\.(([a-z0-9_]+\.)?example\.com)$ [NC]
RewriteRule .? http://%1%{REQUEST_URI} [R=301,L]

# Always use www in the domain
# Replace 'example.com' with your domain name
RewriteEngine on
RewriteCond %{HTTP_HOST} ^([a-z.]+)?example\.com$ [NC]
RewriteCond %{HTTP_HOST} !^www\. [NC]
RewriteRule .? http://www.%1example.com%{REQUEST_URI} [R=301,L]

# Set a default home directory, (this subfolder always loads)
# Replace 'folder' with your subfolder name
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule ^$ /folder/ [R=301,L]
</IfModule>

# Rename a directory and force visitors to the new name
# Replace 'old' with your old folder name
# Replace 'new' with your new folder name
RewriteEngine on
RewriteRule ^/?old([a-z/.]*)$ /new$1 [R=301,L]

# Always use https for secure connections
# Replace 'www.example.com' with your domain name
# (as it appears on your SSL certificate)
RewriteEngine On
RewriteCond %{SERVER_PORT} 80
RewriteRule ^(.*)$ https://www.example.com/$1 [R=301,L]

# Block traffic from multiple referrers
RewriteEngine on
Options +FollowSymlinks
RewriteCond %{HTTP_REFERER} badsite\.com [NC,OR]
RewriteCond %{HTTP_REFERER} badforum\.com [NC,OR]
RewriteCond %{HTTP_REFERER} badsearchengine\.com [NC]
RewriteRule .* - [F]

#Do not allow these file types to be called
RewriteEngine on
RewriteRule .*\.(jpg|jpeg|gif|png|bmp|exe|swf)$ - [F,NC]
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ rewrite ][ prevent access php inc ] ===
[ --- start ---- ]
- to prevent direct access to php includes folder

Example :
## Enable Mod Rewrite, this is only required once in each .htaccess file
RewriteEngine On 
RewriteBase / 
## Test for access to includes directory
RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /includes/ .*$ [NC] 
## Test that file requested has php extension 
RewriteCond %{REQUEST_FILENAME} ^.+\.php$ 
## Forbid Access 
RewriteRule .* - [F,NS,L]

Example : deny access to php.ini or php.cgi file
<FilesMatch "^php5?\.(ini|cgi)$">
Order Deny,Allow 
Deny from All 
Allow from env=REDIRECT_STATUS 
</FilesMatch>
[ ---  end  ---- ]

=== [ topic ][ apache ][ DirectoryIndex ] ===
[ --- start ---- ]
- display the desired file when a visitor requests a directory on web site
- display order is in the sequence it specified
 
Example : display index.html if directory is requested, else index.cgi..
DirectoryIndex index.html index.cgi index.php
[ ---  end  ---- ]

=== [ topic ][ apache ][ disable Directory Listing ] ===
[ --- start ---- ]
- to prevent directory listings, create a .htaccess with
IndexIgnore *
  == above will not show directory listing within directory containing
  .htaccess
- to prevent only certain file type from listed
IndexIgnore *.zip *.jpg *.gif
- to override IndexIgnore, put minus sign before Indexes
Options +Indexes
[ ---  end  ---- ]

=== [ topic ][ apache ][ MIME type ] ===
[ --- start ---- ]
- common issue with MP3 or SWF files not playing can be resolved with :
AddType application/x-shockwave-flash swf

Example :
AddType text/html .html .htm 
AddType text/plain .txt 
AddType text/richtext .rtx 
AddType text/tab-separated-values .tsv 
AddType text/x-setext .etx 
AddType text/x-server-parsed-html .shtml .sht 
AddType application/macbinhex-40 .hqx 
AddType application/netalivelink .nel 
AddType application/netalive .net 
AddType application/news-message-id 
AddType application/news-transmission 
AddType application/octet-stream .bin .exe 
AddType application/oda .oda 
AddType application/pdf .pdf 
AddType application/postscript .ai .eps .ps 
AddType application/remote-printing 
AddType application/rtf .rtf 
AddType application/slate 
AddType application/zip .zip 
AddType application/x-mif .mif 
AddType application/wita 
AddType application/wordperfect5.1 
AddType application/x-csh .csh 
AddType application/x-dvi .dvi 
AddType application/x-hdf .hdf 
AddType application/x-latex .latex 
AddType application/x-netcdf .nc .cdf 
AddType application/x-sh .sh 
AddType application/x-tcl .tcl 
AddType application/x-tex .tex 
AddType application/x-texinfo .texinfo .texi 
AddType application/x-troff .t .tr .roff 
AddType application/x-troff-man .man 
AddType application/x-troff-me .me 
AddType application/x-troff-ms .ms 
AddType application/x-wais-source .src 
AddType application/x-bcpio .bcpio 
AddType application/x-cpio .cpio 
AddType application/x-gtar .gtar 
AddType application/x-shar .shar 
AddType application/x-sv4cpio .sv4cpio 
AddType application/x-sv4crc .sv4crc 
AddType application/x-tar .tar 
AddType application/x-ustar .ustar 
AddType application/x-director .dcr 
AddType application/x-director .dir 
AddType application/x-director .dxr 
AddType application/x-onlive .sds 
AddType application/x-httpd-cgi .cgi 
AddType image/gif .gif .GIF 
AddType image/ief .ief 
AddType image/jpeg .jpeg .jpg .jpe .JPG 
AddType image/tiff .tiff .tif 
AddType image/x-cmu-raster .ras 
AddType image/x-portable-anymap .pnm 
AddType image/x-portable-bitmap .pbm 
AddType image/x-portable-graymap .pgm 
AddType image/x-portable-pixmap .ppm 
AddType image/x-rgb .rgb 
AddType image/x-xbitmap .xbm 
AddType image/x-xpixmap .xpm 
AddType image/x-xwindowdump .xwd 
AddType audio/basic .au .snd 
AddType audio/x-aiff .aif .aiff .aifc 
AddType audio/x-wav .wav 
AddType audio/x-pn-realaudio .ram 
AddType audio/x-midi .mid 
AddType video/mpeg .mpeg .mpg .mpe 
AddType video/quicktime .qt .mov 
AddType video/x-msvideo .avi 
AddType video/x-sgi-movie .movie 
AddType message/external-body 
AddType message/news 
AddType message/partial 
AddType message/rfc822 
AddType multipart/alternative 
AddType multipart/appledouble 
AddType multipart/digest 
AddType multipart/mixed 
AddType multipart/parallel 
AddType x-world/x-vrml .wrl
[ ---  end  ---- ]

=== [ topic ][ apache ][ SSI ] ===
[ --- start ---- ]
- SSI = Server Side Includes
- use relative path
- server load the specified when encountered the following tag
/// place the cgi-bin/script.cgi
<!--#exec cgi="/cgi-bin/script.cgi"-->
<!--#include virtual="/files/document.html"-->

Example :
AddHandler server-parsed .html
AddHandler server-parsed .shtml
AddHandler server-parsed .htm
[ ---  end  ---- ]

=== [ topic ][ apache ][ download instead of played ] ===
[ --- start ---- ]
- ensure any media file are treated as download
AddType application/octet-stream .zip .mp3 .mp4
[ ---  end  ---- ]

=== [ topic ][ apache ][ set up assoc for encoded files ] ===
[ --- start ---- ]
-  tells the Apache Web Server to treat .gz and .tgz files as encoded by
x-gzip, and .Z files as encoded by x-compress.
AddEncoding x-gzip .gz .tgz 
AddEncoding x-compress .Z
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess vs apache2.conf ] ===
[ --- start ---- ]
@@@@.htaccess file in /www/htdocs/example:
AddType text/example .exm

@@@ apache2.conf:
<Directory /www/htdocs/example>
AddType text/example .exm
</Directory>
[ ---  end  ---- ]

=== [ topic ][ apache ][ options ] ===
[ --- start ---- ]
+ add to options
- remove the options

- Multiviews sometimes conflict with Rewrite Rules
  == MultiViews try to map the request to a siminar existing file before
  passing the request to mod_rewrite
  == disable Multiviews:
      Options -MultiViews
[ ---  end  ---- ]

=== [ topic ][ apache ][ htaccess ][ recommended ] ===
[ --- start ---- ]
http://httpd.apache.org/docs/1.3/mod/core.html#options
Options -MultiViews -Indexes
- disable multiviews and directory index listing
[ ---  end  ---- ]

=== [ topic ][ apache ][ RewriteCond ] ===
[ --- start ---- ]
http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html#rewritecond

RewriteCond TestString CondPattern [flags]

%{ENV:variable} - getenv() from the Apache server process
%{SSL:variable}
%{HTTP:header}

Title: CondPattern
'<CondPattern' (lexicographically precedes)
'>CondPattern' (lexicographically follows)
'=CondPattern' (lexicographically equal)
'-d' (is directory)
'-f' (is regular file)
'-s' (is regular file, with size)
'-l' (is symbolic link)
'-x' (has executable permissions)
'-F' (is existing file, via subrequest)
'-U' (is existing URL, via subrequest)  

Title: Flags
'nocase|NC' (no case) -  test case-insensitive
'ornext|OR' (or next condition)
'novary|NV' (no vary)

Example :
RewriteCond %{REMOTE_HOST}  =host1  [OR]
RewriteCond %{REMOTE_HOST}  =host2  [OR]
RewriteCond %{REMOTE_HOST}  =host3
RewriteRule ...some special stuff for any of these hosts...
[ ---  end  ---- ]

=== [ topic ][ apache ][ caching ] ===
[ --- start ---- ]
##################
## Optional caching improvements
## Requires mod_header and mod_deflate to be enabled within Apache
##################
<IfModule mod_headers.c>
  Header unset Pragma
  FileETag None
  Header unset ETag
  <FilesMatch ".*\.(ico|jpe?g|JPE?G|gif|GIF|webp|png|swf|flv)$">
    Header set Cache-control "max-age=864000, public, must-revalidate"
    Header unset Last-Modified
  </FilesMatch>
  <FilesMatch ".*\.(html|htm|xml|txt|xsl)$">
    Header set Cache-control "max-age=7200, must-revalidate"
  </FilesMatch>
</IfModule>
<IfModule mod_deflate.c>
  <FilesMatch "\.(js|css)$">
    SetOutputFilter DEFLATE
  </FilesMatch>
</IfModule>

##################
## Optional improvements
## Requires mod_expires to be enabled within Apache
## enabled by sudo a2enmod expires
##################
<ifmodule mod_expires.c>
  ExpiresActive On
  ExpiresDefault A300
  ExpiresByType application/x-javascript A3600
  ExpiresByType text/css A3600
  ExpiresByType image/gif A604800
  ExpiresByType video/x-flv A604800
  ExpiresByType application/pdf A604800
  ExpiresByType text/html A300
  ExpiresByType image/x-icon A86400
  ExpiresByType image/jpeg A2592000 
  ExpiresByType image/png A2592000 
</ifmodule>
[ ---  end  ---- ]

=== [ topic ][ page ][ fault ] ===
[ --- start ---- ]
 '401 Unauthorised', 
 '403 Forbidden', and 
 '500 Internal Server' 
[ ---  end  ---- ]

=== [ topic ][ permission ][ uid and gid ] ===
[ --- start ---- ]
- to decide the apache user
ps -aux | grep apache
output: apache belong to www-data user
- find out www-data groupname
sudo groups www-data
output: www-data : www-data
- set the right permission to the apache folder
sudo chown -R www-data:www-data /var/www/
- set the right privileges for apache root dir
sudo chmod -R 775 /var/www/
- add yourself to apache group, so have access to it
sudo usermod -a -G www-data {YOUR_USER_NAME}
- set the umask command for apache environment
sudo echo umask 002 >> /etc/apache2/envvars
- restart apache2
$ sudo apache2ctl restart
[ ---  end  ---- ]

=== [ topic ][ php ] ===
[ --- start ---- ]
- php configuration file
/usr/share/php5/php.ini-development
/usr/share/php5/php.ini-production
- to change configuration file to development
/// backup
sudo mv /etc/php5/apache2/php.ini /etc/php5/apache2/php.ini.bak
/// create soft link
sudo cp -s /usr/share/php5/php.ini-development /etc/php5/apache2/php.ini
[ ---  end  ---- ]

=== [ topic ][ php ][ status ] ===
[ --- start ---- ]
sudo sh -c 'echo "<?php phpinfo(); ?>" >> /var/www/testphp.php'
http://localhost/testphp.php
[ ---  end  ---- ]

=== [ topic ][ php ][ admin ] ===
[ --- start ---- ]
- set current user to be the PHP pages administrator
sudo vim /etc/apache2/envvars"
Search both the strings starting by "APACHE_RUN_USER" and 
"APACHE_RUN_GROUP", and change the names to the current username and 
groupname you are using. Then you'll need to restart Apache. (look at the 
next chapter concerning apache commands)

Configuration options relating specifically to user websites (accessed 
through localhost/~username) are in 
/etc/apache2/mods-enabled/userdir.conf.
[ ---  end  ---- ]

=== [ topic ][ php ][ suPHP ] ===
[ --- start ---- ]
sudo apt-get install libapache2-mod-suphp
sudo a2enmod suphp
sudo nano /etc/apache2/mods-available/php5.conf
make a new empty line at the top of the content, then add
<Directory /usr/share>
make a new empty line at the bottom of the content, then add
</Directory>
- set what documents to be allowed
sudo nano /etc/suphp/suphp.conf
- change docroot
docroot=/var/www/:${HOME}/public_html
sudo /etc/init.d/apache2 restart
echo "<?php echo 'whoim = '.exec('/usr/bin/whoami');?>" | tee /home/user/public_html/whomi.php
sudo find /home/user/public_html/ -type f -exec chmod 644 {} \;
sudo find /home/user/public_html/ -type d -exec chmod 755 {} \;
sudo chown user:group -R /home/user/public_html/
[ ---  end  ---- ]

=== [ topic ][ mysql ] ===
[ --- start ---- ]
- before can access database from other computer in the network, 
  MySQL bind address need to be changed. possible security thread
- skip this step if only access from same machine
sudo vim /etc/mysql/my.cnf
change bind-address = localhost to the server ip
if server ip is dynamic, comment out this line
/// if already set password for mysql root
$ mysql -u root -p
/// else create a new password
$ mysql -u root
/// remember to end statement with colon
mysql > SET PASSWORD FOR 'root'@'localhost' = PASSWORD('yourpassword');

Note: If you have already set a password for the mysql root, you will need to use:
[ ---  end  ---- ]

=== [ topic ][ mysql ][ diagnose ] ===
[ --- start ---- ]
mysql -u root -p
mysql> show databases;
[ ---  end  ---- ]

=== [ topic ][ mysql ][ create ] ===
[ --- start ---- ]
CREATE DATABASE database1;
/// For creating a new user with all privileges (use only for troubleshooting), at mysql prompt type:
$ mysql> GRANT ALL PRIVILEGES ON *.* TO 'yourusername'@'localhost' IDENTIFIED BY 'yourpassword' WITH GRANT OPTION;
/// creating a new user with fewer privileges
$ mysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON database1.* TO 'yourusername'@'localhost' IDENTIFIED BY 'yourpassword';
/// localhost is the location which gets access to your database. You can 
// change it to '%' (or to hostnames or ip addresses) to allow connections 
// from every location (or only from specific locations) to the database.
/// Note, that this can be a security problem and should only be used for testing purposes!
[ ---  end  ---- ]

=== [ topic ][ mysql ][ config ] ===
[ --- start ---- ]
Default options are read from the following files in the given order:
/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf

log files
/var/log/mysql

config setting about log
log_error = /var/log/mysql/error.log

library
/var/lib/mysql
- one directory for each database

backup database
- don't copy while the database is alive, as someone may writing to it
- ideal solution is to lock the database, then copy, then unlock
mysql -u root -p -e "FLUSH TABLES WITH READ LOCK;"
mysql -u root -p -e "UNLOCK TABLES;"
if running in a script:
mysql -u root -p"password" -e "FLUSH TABLES WITH READ LOCK;"
mysql -u root -p"password" -e "UNLOCK TABLES;"
[ ---  end  ---- ]

=== [ topic ][ phpMyAdmin ] ===
[ --- start ---- ]
- web interface to manage MySQL

to install:
	sudo apt-get install phpmyadmin

to setup under apache:
	sudo vim /etc/apache2/apache2.conf
	sudo /etc/init.d/apache2 restart

http://localhost/phpmyadmin/:
[ ---  end  ---- ]

=== [ topic ][ removal ] ===
[ --- start ---- ]
- simulate before actual removal
- use -purge to remove debconf data as well
apache2 apache2-mpm-prefork apache2-utils apache2.2-common libapache2-mod-php5 libapr1 libaprutil1 libdbd-mysql-perl libdbi-perl libnet-daemon-perl libplrpc-perl libpq5 mysql-client-5.5 mysql-common mysql-server mysql-server-5.5 php5-common php5-mysql

mysql-client-core-5.5 mysql-server-core-5.5
[ ---  end  ---- ]

=== [ topic ][ Prof Chua ][ notes - LAMP ] ===
[ --- start ---- ]
Reference: 
http://www3.ntu.edu.sg/home/ehchua/programming/howto/Ubuntu_HowTo.html

First, install the "tasksel" utility
$ sudo apt-get install tasksel

You can view the manual page of tasksel via "man tasksel".
Then, run the "lamp-server" installation task:
$ sudo tasksel install lamp-server

To check the packages installed, issue:
$ tasksel --task-packages lamp-server
output:
apache2
......
mysql-common
mysql-server
mysql-server-5.5
mysql-server-core-5.5
mysql-client-5.5
mysql-client-core-5.5
......
php5-common
php5-mysql
php5-cli

MySQL 5
To configure MySQL 5, read "How to install MySQL".
The MySQL's configuration files are located at "/etc/mysql", such as the main 
configuration file "my.cnf".
MySQL is installed as a service called "mysql" (at "/etc/init.d/mysql"), which 
is started automatically after boot. To start/stop/restart mysql, you could:
$ sudo service mysql start
$ sudo service mysql stop
$ sudo service mysql restart

[ ---  end  ---- ]

=== [ topic ][ Apache2 ] ===
[ --- start ---- ]
To configure Apache 2, read "How to install Apache 2".
The apache's configuration files are located at "/etc/apache2", such as the main 
configuration file "apache2.conf" "prots.conf" and "envvars".
Apache is installed as a service called "apache2" (at "/etc/init.d/apache2"), 
which is started automatically after boot. To start/stop/restart apache, you 
could:
$ sudo service apache2 start
$ sudo service apache2 stop
$ sudo service apache2 restart
[ ---  end  ---- ]

=== [ topic ][ php ] ===
[ --- start ---- ]
PHP 5
PHP is installed in /usr/bin/php. You could try out the Command-Line (CLI) PHP 
via:
// Say hello
$ php -r 'echo "Hello, world!\n";'
Hello, world!
 
// Run phpinfo()
$ php -r 'phpinfo();'
......
The PHP configuration files are kept in "/etc/php5", with "apache2" for PHP 
running under apache; and "cli" for Command-Line (standalone) PHP.
Installing PhpMyAdmin
Run apt-get to install phpmyadmin:
sudo apt-get install phpmyadmin
You can access PhpMyAdmin via http://localhost/phpmyadmin.
The PHP's configuration file for Apache is 
"/etc/apache2/conf.d/phpmyadmin.conf".
Installing xdebug for PHP

Download and install xdebug
$ sudo apt-get install php5-xdebug
Check the location of xdebug.so module, which is kept under 
/usr/lib/php5/20100525, where the number depends on the PHP version.
The installation creates a configuration file /etc/php5/conf.d/20-xdebug.ini 
with the following line:
zend_extension = "/usr/lib/php5/20100525/xdebug.so"
Include the following lines into "20-xdebug.ini" to enable remote debugging:
xdebug.remote_enable = 1
xdebug.remote_port = 9000
xdebug.remote_host = 127.0.0.1
Check PHP configuration file /etc/php5/apache2/php.ini for the settings of the 
followings:
; Turn on the error display for development system, ; but not for production 
system.
display_errors = On

; Format error in HTML
html_errors = On
Restart the Apache2:
$ sudo service apache2 restart
Check the phpinfo() output to verify xdebug has been started.
Create a PHP script called test.php with the following lines, and save under the 
Apache's base directory "/var/www":
<?php
phpinfo();
?>
Issue http://localhost/test.php, and search for xdebug.
Installing Firebug plugin for Firefox for debugging HTML/CSS/JavaScript
Start Firefox, select menu "Tools" ⇒ Add-ons ⇒ search for Firebug.
Install Eclipse and Configure Eclipse to work with xdebug for PHP Debugging
Read "Eclipse How-To" section "Eclipse PDT (PHP Developer Tool)".
Installing Zend Debugger for PHP
Note: I have problems setting up Zend Debugger. I suggest you use xDebug.
Download the Zend PHP debugger from 
http://www.zend.com/en/products/studio/downloads.
Extract the tar-ball.
Check your PHP version via "php --version".
Copy the "ZendDebugger.so" module from the corresponding PHP version folder into 
/usr/lib/php5. At the time of writing, PHP 5.4 is not supported!!!
Edit the php configuration file /etc/php5/apache2/php.ini to append the below:
; The section name is optional, but it's always a good idea to add it,
; especially if you are not using a separate file
[Zend]

; This directive needs the full path to the Zend Debugger binary
zend_extension =/usr/lib/php5/ZendDebugger.so

; This directive allows Zend Debugger to start a debug session with:
zend_debugger.allow_hosts=127.0.0.1/32

; This directive allows Zend Debugger to expose itself
; upon request (this is used in some service functionality).
; The possible options are:
; never – do not expose (default)
; always – expose to whoever wants to know
; allowed_hosts – expose only if the request comes from an IP listed above
zend_debugger.expose_remotely=always
Restart the Apache2 via
$ sudo service apache2 restart
Check the Apache's error log via
$ tail /var/log/apache2/error.log
If error "Failed loading /usr/lib/php5/ZendDebugger.so: libssl.so.0.9.8: cannot 
open shared object file: No such file or directory" occurs, you need to install 
libssl.
$ sudo apt-cache search libssl0.9.8
libssl0.9.8 - SSL shared libraries
libssl0.9.8-dbg - Symbol tables for libssl and libcrypto

$ sudo apt-get install libssl0.9.8
Restart apache2 and check the Apache's error log.
Check the phpinfo() output to verify Zend Debugger has been started.

[ ---  end  ---- ]

=== [ topic ][ setup SSL ][ HTTPS ] ===
[ --- start ---- ]
Step 1: Enable the SSL module:
$ sudo a2enmod ssl
Step 2: Create a self-signed Certificate for the apache server. Read 
"/usr/share/doc/apache2.2-common/README.Debian.gz".
$ sudo make-ssl-cert /usr/share/ssl-cert/ssleay.cnf 
/etc/ssl/private/apache-ssl.crt
// In the common name, enter the server's DNS name or IP address.
// Common Name (e.g. server FQDN or YOUR name) []:127.0.0.1
which generates a certificate 'apache-ssl.crt' and stores in '/etc/ssl/private'. 
The key is contained in the certificate.
Alternatively, you can generate a certificate via:
$ sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout 
/etc/ssl/private/apache.key -out /etc/ssl/private/apache.crt
The self-signed certificate 'apache.crt' and key file 'apache.key' will be 
created in '/etc/ssl/private'.
The SSL key file should only be readable by root, the certificate file may be 
globally readable. These files are read by the Apache parent process which runs 
as root. Therefore it is not necessary to make the files readable by the 
www-data user.
Step 3: Create HTTPS config file:
$ cd /etc/apache2/sites-available
// Duplicate from default-ssl 
$ cp default-ssl my-ssl

// Edit configuration
$ gksudo gkedit my-ssl
// Set your DocumentRoot
....
// Set the certificate (no keyfile needed)
SSLCertificateFile    /etc/ssl/private/apache-ssl.crt
# SSLCertificateKeyFile /etc/ssl/private/apache.key
Step 4: Activate the HTTPS site.
$ sudo a2ensite
// choose 'my-ssl'
$ sudo service apache2 reload
// or
$ sudo service apache2 restart
Step 5: You can access the site via https://localhost.
Notes:
To resolve the warning: "[warn] RSA server certificate CommonName (CN) `...' 
does NOT match server name!?" Add a ServerName right below the Server Admin 
email under <virtual host>, in the config file:
ServerName example.com:443
Switching between HTTPS and HTTP is not really needed, as HTTPS's overhead is 
not very high (other than the initial hand-shake). Otherwise, you need to pass 
session from HTTPS (login) to HTTP.

9.  How to Install MySQL 5 on Ubuntu
Step 1: Install MySQL
Open a new Terminal and issue this command:
$ sudo apt-get install mysql-server
The installer will prompt for the password for the MySQL root user. Set a 
password for root, and remember this password.
The MySQL server program "mysqld" is installed in /usr/sbin (as reflected by 
"which mysqld"), and the MySQL client program "mysql" and the utilities (such as 
mysqladmin, mysqldump) in /usr/bin ("which mysql").
Step 2: Configure MySQL Server
The MySQL configuration file is located at /etc/mysql/my.cnf. Additional 
configuration files (.cnf) can be placed under /etc/mysql/conf.d directory. The 
configuration files are combined in this order: "/etc/my.cnf", 
"/etc/mysql/my.cnf" ("SYSCONFDIR/mf.cnf"), "$MYSQL_HOME/my.cnf", 
"[DataDir]/my.cnf", "~/.my.cnf".
The MySQL server "mysqld" runs on the default port number of 3306.
A special user called "mysql" is created to run the MySQL server.
The data directory (datadir) is located at /var/lib/mysql (owned by user mysql).
The error log is located at /var/log/mysql/error.log.
Remove the anonymous users:
// Login to MySQL Server using root user
$ mysql -u root -p
Enter Password:
 
mysql> select user, host, password from mysql.user;
// Look for users without password

mysql> drop user ''@'localhost';
mysql> drop user ''@'ubuntu';
mysql> select user, host, password from mysql.user;
Step 3: Start/Shutdown MySQL Server
MySQL server will be started automatically after the installation. You CANNOT 
start another instance! You can issue "ps aux | grep mysqld" to display the 
mysqld process.
You can restart/stop/start MySQL via:
$ sudo service mysql restart
$ sudo service mysql stop
$ sudo service mysql start
// OR
$ sudo /etc/init.d/mysql restart
$ sudo /etc/init.d/mysql stop
$ sudo /etc/init.d/mysql start
Step 4: Start/Stop MySQL Client
To start a MySQL client
$ mysql -u root -p
   // Enter the password for the root user you have set in Step 1
To quit the MySQL client, type "exit" or "quit" on the "mysql>" prompt.
Step 5: (For Java Programmers) Install MySQL JDBC Driver
Download the latest JDBC driver from http://www.mysql.com/downloads ⇒ MySQL 
Connectors ⇒ Connector/J ⇒ Compressed TAR archive (e.g., 
mysql-connector-java-{5.x.xx}.tar.gz, where {5.x.xx} is the latest release 
number).
Double-click on the downloaded TAR file to expand into folder 
"mysql-connector-java-{5.x.xx}".
Open the expanded folder. Copy the JAR file 
"mysql-connector-java-{5.x.xx}-bin.jar" to JDK's extension directory at 
"/usr/local/java/jdk1.7.0_{xx}/jre/lib/ext". You may need superuser right:
$ cd /usr/local/java/jdk1.7.0_{xx}/jre/lib/ext
$ sudo cp 
~/Downloads/mysql-connector-java-{5.x.xx}/mysql-connector-java-{5.x.xx}-bin.jar 
.
Additional Notes:
You can issue these commands to check the MySQL installation:
// Check the location of MySQL server program "mysqld" and client program 
// "mysql"
$ which mysqld
/usr/sbin/mysqld
$ which mysql
/usr/bin/mysql
 
// Check the MySQL related files
$ whereis mysqld
mysqld: /usr/sbin/mysqld /usr/share/man/man8/mysqld.8.gz
$ whereis mysql
mysql: /usr/bin/mysql /etc/mysql /usr/lib/mysql /usr/bin/X11/mysql 
/usr/share/mysql /usr/share/man/man1/mysql.1.gz

// Check the mysqld server process
$ ps aux | grep mysqld
mysql    17851  0.1  1.1 552100 44552 ?        Ssl  09:51   0:02 
/usr/sbin/mysqld
   // mysqld is run by a special user "mysql"
 
// Show locations of mysql package
$ dpkg -L mysql-server
The MySQL server program "mysqld" is kept in /usr/sbin (system software 
binaries), while the client program "mysql" is kept in /usr/bin. The 
databases/tables are kept in /var/lib/mysql. The startup script is kept in 
/etc/init.d/mysql.

10.  How to Install Apache 2 on Ubuntu
Step 1: Install Apache
Open a new Terminal and issue this command:
$ sudo apt-get install apache2
The Apache server program "apache2" ("httpd"??) is installed in /usr/sbin (as 
reflected by "which apache2").
Step 2: Configure Apache
The Apache's main configuration file is located at /etc/apache2/apache2.conf. 
Additional configuration files can be placed inside /etc/apache2/conf.d 
directory.
The configuration file /etc/apache2/envvars defines the environment variables 
used by Apache, such as the APACHE_RUN_USER (www-data), APACHE_RUN_GROUP 
(www-data), APACHE_RUN_DIR (/var/run/apache2), and etc.
The configuration file /etc/apache2/ports.conf defines the listening ports. You 
can add new virtual hosts configuration in /etc/apache2/sites-available; and 
then run the utility a2ensite to enable the new site (which moves the 
configuration file to /etc/apache2/sites-enabled).
The default /etc/apache2/sites-enabled/000-default defines the default host (at 
port number of 80) and its DocumentRoot (at /var/www).
A special user www-data (of group www-data) is used to run the apache server 
(defined in /etc/apache2/envvars). User www-data should have "r" permission to 
all the files in the public www directory and "rx" permission to all the 
directories leading to the public www directory and the sub-directories.
For test system, you may include your login ID in the www-data group; and grant 
"rw" permissions to all files and "rwx" permissions to all directories for 
www-data group.
Step 3: Start/Shutdown Apache Server
The Apache server will be started automatically after the installation. You 
CANNOT start another instance! You can issue "ps aux | grep apache" to display 
the apache process.
You can restart/stop/start Apache via:
$ sudo service apache2 restart
$ sudo service apache2 stop
$ sudo service apache2 start
$ sudo service apache2 reload  // Reload the configuration file
// OR
$ sudo /etc/init.d/apache2 restart
$ sudo /etc/init.d/apache2 stop
$ sudo /etc/init.d/apache2 start
Note: The "service xxx reload" reloads the configuration file, without shutting 
down the service. On the other hand, "service xxx restart" shutdown and restart 
the service. No all services support reload.
Step 4: Accessing the Apache 2 Server
Start a web browser (such as firefox) and issue URL http://localhost.

11.  How to Install Tomcat 7 on Ubuntu
Step 1: Download and Install Tomcat
Goto http://tomcat.apache.org ⇒ Download ⇒ Tomcat 7.0 ⇒ 7.0.{xx} (where {xx} 
denotes the latest release) ⇒ Binary distribution ⇒ Core ⇒ Download the "tar.gz" 
package (e.g., "apache-tomcat-7.0.{xx}.tar.gz").
To install Tomcat:
Goto "~/Downloads", double-click the downloaded TAR file (e.g., 
"apache-tomcat-7.0.{xx}.tar.gz") to expand it into a folder (e.g., 
"apache-tomcat-7.0.{xx}").
Alternatively, you can use the tar command to expand the tarball as follow:
$ cd ~/Downloads
$ tar xzvf apache-tomcat-7.0.{xx}.tar.gz
Create a directory, says "myproject" under your HOME directory (i.e., 
~/myproject). Move the extracted folder (e.g., "apache-tomcat-7.0.{xx}") to 
"~/myproject".
Rename the folder "tomcat", for ease of use.
Notes: It is probably better to keep the tomcat in /usr/local or /opt, but you 
may need the superuser right to access these folders.
Step 2: Setup Environment Variable JAVA_HOME
Check if the environment variable JAVA_HOME, containing the JDK installed 
directory, has been set. To verify:
$ echo $JAVA_HOME
[JDK installed directory]
If JAVA_HOME is not set, you can edit "/etc/profile":
$ gksudo gedit /etc/profile   // OR "sudo nano /etc/profile" to use the 
console-based nano editor
Include the following line at the end of the file. I shall assume that JDK is 
installed in /usr/local/java/jdk1.7.0_{xx}. But you need to verify the location 
of your JDK installed directory!!!
export JAVA_HOME=/usr/local/java/jdk1.7.0_{xx}
Rerun the script:
$ source /etc/profile
 
// To verify:
$ echo $JAVA_HOME
[/usr/local/java/jdk1.7.0_{xx}]
Step 3: Configure Tomcat Server
Read "Configure Tomcat Server".
Step 4: Start the Tomcat Server
To start the Tomcat server, open a new "Terminal" and issue:
$ cd ~/myproject/tomcat/bin
$ ./catalina.sh run
If you will get an error "permission denied" on running the script, you need to 
set the script to be executable, via command "chmod uga+x *.sh".
Check for the Tomcat server's TCP port number from the console messages. The 
default is 8080.
To verify if the Tomcat server is started, start a browser and issue URL 
http://localhost:8080, suppose that Tomcat is running on the default TCP port 
number of 8080.
Also try URL http://localhost:8080/examples which shows the Servlet/JSP 
examples.
Step 5: Shutdown the Tomcat Server
To shutdown the Tomcat server, you can simply press control-c on the tomcat 
console, or issue command:
$ cd ~/myproject/tomcat/bin
$ ./shutdown.sh
Step 6: Servlet API
To write Java servlets, you need to COPY the Servlet API JAR file 
("servlet-api.jar") from "~/myproject/tomcat/lib" to the JDK's extension 
directory at "/usr/local/java/jdk1.7.0_{xx}/jre/lib/ext". You may need the 
superuser right.
Advanced Notes
For security reasons, you should NOT run tomcat as root user. It is recommended 
to create a low privilege user called tomcat in group nobody, with login shell 
set to /sbin/nologin and password locked.
// Create a user called "tomcat"
$ sudo groupadd nobody
$ sudo useradd -g nobody -s /sbin/nologin -d /opt/tomcat/temp tomcat
   // -g <group-name>: specify the user's group as "nobody"
   // -s <login-shell>: specify the login shell
   // -d <home-dir>

// Expand the downloaded tarball
$ tar xzvf apache-tomcat-7.0.{xx}.tar.gz

// Change Ownership to user "tomcat"
$ sudo chmod -R tomcat apache-tomcat-7.0.{xx}
   // -R: recursively for the sub-directories
 
// Run tomcat using nobody [TODO]

12.  How to Install Postfix Mail Server
Reference: Postfix @ https://help.ubuntu.com/community/Postfix.
To install postfix mail server:
$ sudo apt-get install postfix
To configure postfix, run:
$ sudo dpkg-reconfigure postfix
Read "postfix" @ https://help.ubuntu.com/community/Postfix for the configuration 
options.
The utility "sendmail" is installed in /usr/sbin/sendmail.
To send an email:
$ sendmail -v user@example.com
Subject: test
This is a test message
Ctrl-D
The -v option requests for a mail delivery report, which is optional.
You should also install the "mailutils", for the "mail" utility.
$ sudo apt-get install mailutils
Try sending an email to a user at the localhost, via "sendmail local-username", 
you can then read the email by logging-in as the local-username, and run:
$ mail
.......
The postfix configuration is kept in /etc/postfix/main.cf. Run 
"/etc/init.d/postfix reload" to reload the configuration.
Disable Incoming Mail
You can use the inet_interfaces directive in /etc/postfix/main.cf to control 
what address Postfix listens on for incoming connections. If you set it to the 
following it will only listen on the loopback interface, which means that 
connections can only originate from that machine.
inet_interfaces = loopback-only

[ ---  end  ---- ]

=== [ topic ][ web tutorial ] ===
[ --- start ---- ]
webhostingtutorial.com
w3cshools.com/hosting
[ ---  end  ---- ]

=== [ topic ][ apache2 ][ htaccess ][ problem ] ===
[ --- start ---- ]
- ErrorDocument redirection in .htaccess never works
Solution: remove AllowOverride None from /etc/apache2/apache2.conf
$ sudo service apache2 reload
[ ---  end  ---- ]
