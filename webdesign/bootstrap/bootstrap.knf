=== [ topic ][ basic template ] ===
[ --- start ---- ]
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap 101 Template</title>

    <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media 
            queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js">
            </script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js">
            </script>
    <![endif]-->
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="js/bootstrap.min.js"></script>
  </body>
</html>
[ ---  end  ---- ]

=== [ topic ][ accessibility ][ role ] ===
[ --- start ---- ]
- add a role="navigation" to every navbar to help with accessibility.

role="navigation"
role="search"
role="button"
role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" 
role="presentation"
role="menu"
role="menuitem"

Example 1:
<div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">
    <span class="sr-only">60% Complete</span>

Remove the .sr-only class from within the progress bar to show a visible 
percentage. For low percentages, consider adding a min-width to ensure the 
label's text is fully visible.
[ ---  end  ---- ]

=== [ topic ][ accessibility ][ aria ] ===
[ --- start ---- ]
aria-labelledby="dropdownMenu1"
[ ---  end  ---- ]

=== [ topic ][ color ] ===
[ --- start ---- ]
-success 
    green, #5cb85c
-info:
    blue, #5bc0de
-warning { /// orange?
    background-color: #fcf8e3;
-danger { /// red
    background-color: #d9534f
-muted
-primary
-default
[ ---  end  ---- ]

=== [ topic ][ navbar ][ icon-bar ] ===
[ --- start ---- ]
- the 3 <span class="icon-bar"> create a button with 3 lines
- it is a block structure, so all lined up in 3 lines inside a button
<nav class="nav navbar navbar-inverse navbar-fixed-top"> 
        <div class="container-fluid">
           <div class="navbar-header">
               <button type="button" class="navbar-toggle" data-toggle="collapsed"
                   data-target="#navbar-collapsable-1">
                   <span class="sr-only">Toggle navigation</span>
                   <span class="icon-bar"></span>
                   <span class="icon-bar"></span>
                   <span class="icon-bar"></span>
                   </button>
               <a class="navbar-brand" href="#">{ U-AngelicWed }</a>
           </div> 
[ ---  end  ---- ]

=== [ topic ][ navbar ][ .nav ] ===
[ --- start ---- ]
.nav {
margin-bottom: 0;
padding-left: 0;
list-style: none;
}
[ ---  end  ---- ]

=== [ topic ][ dropdown ][ hover color ] ===
[ --- start ---- ]
- override to give color
.dropdown-menu li > a:hover, 
.dropdown-menu li > a:focus,
.dropdown-submenu:hover > a {
  background-image: none;
  background-color: blue;
}
[ ---  end  ---- ]

=== [ topic ][ navbar ][ problem ][ search on next line ] ===
[ --- start ---- ]
Problem: input-group-btn always go into next line of navbar-header
Reason: input-group-btn has table display, thus always takes 100% of width
        need to contain its size with another div which has class of col-xxx
Solution: add col-
<div class="col-sm-3 navbar-right">
    <form class="nav navbar-form" role="search" method="get" action="todo.php">
        <div class="input-group">
            <input class="form-control" type="text" name="search" id="" placeholder="Search">
            <span class="input-group-btn">
                <button class="btn btn-default" type="submit">
                    <i class="glyphicon glyphicon-search"></i>
                </button>
            </span>
        </div>
    </form>
</div>
[ ---  end  ---- ]

=== [ topic ][ navbar ][ problem ][ collapse but still visible ] ===
[ --- start ---- ]
Problem: the menu on navbar during collapse still visible
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse"
                data-target="#navbar-collapsed-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">{ U-AngelicWed }</a>
        </div> 

        <!-- collapsable group: toggle by screen width -->

        <div class="navbar-collapse collapse in" id="navbar-collapsed-1">
            <ul class="nav navbar-nav navbar-right">
                   <li class="dropdown">
Solution: remove the "in" from div class
<div class="navbar-collapse collapse" id="navbar-collapsed-1">

[ ---  end  ---- ]

=== [ topic ][ example ][ grid ] ===
[ --- start ---- ]
- Bootstrap 3 is Mobile First CSS
- all of the base columns are assumed to be 100% width, stacked vertically
- e.g. when view size become small, col-md will goes back to 100% width stack
  so col-md-6 will now have the 100% of mobile view size instead of 50%
col-xs-*
col-sm-*
col-md-*
col-lg-*

Example :  Bootstrap 2 always give 50%, 50% width
<div class="span6">I’m on the left</div>
<div class="span6">I’m on the right</div>

Example : 
- if viewport is larger than medium-size, then split 50%
- if viewport is smaller than medium-size, use up 100% instead of 50%
<div class="col-md-6">I'm on the left</div>
<div class="col-md-6">I'm on the right</div>

Example : to stay as 50%-50% regardless of viewport size
<div class="col-xs-6">I’m on the left</div>
<div class="col-xs-6">I’m on the right</div>

Example : medium-size split 50%-50%, large-size split 40%-60%
<div class="col-md-6 col-lg-4">I’m on the left</div>
<div class="col-md-6 col-lg-8">I’m on the right</div>

Example :
<div class="col-sm-3 col-md-6 col-lg-4">I’m on the left</div>
<div class="col-sm-9 col-md-6 col-lg-8">I’m on the right</div>

Example : mixin in less
<div class="left-and-right">
  <div class="left">I'm on the left</div>
  <div class="right">I'm on the right</div>
</div>

@@@ LESS:
.left-and-right {
  .make-row();
  .left {
    .make-sm-column(1);
    .make-md-column(7);
    .make-lg-column(4);
  }
  .right {
    .make-sm-column(11);
    .make-md-column(5);
    .make-lg-column(8);
  }
}

[ ---  end  ---- ]

=== [ topic ][ full width fluid content ] ===
[ --- start ---- ]
.my-fluid-container {
  padding-left: 15px;
  padding-right: 15px;
  margin-left: auto;
  margin-right: auto;
}
[ ---  end  ---- ]

=== [ topic ][ example ][ pagination ] ===
[ --- start ---- ]
<div class="text-center">
    <ul class="pagination">
        <li><a href="?p=0" data-original-title="" title="">1</a></li> 
        <li><a href="?p=1" data-original-title="" title="">2</a></li> 
    </ul>
</div>
[ ---  end  ---- ]

=== [ topic ][ overriding [ specific css ]] ===
[ --- start ---- ]
- put own style after bootstrap.css
<link rel="stylesheet" href="css/bootstrap.css" />
<link rel="stylesheet" href="css/site-specific.css" />
which define the same style as in the bootstrap
.sidebar { float: right; }
[ ---  end  ---- ]

=== [ topic ][ overriding ][ sass ] ===
[ --- start ---- ]
- check the variable of bootstrap
http://twitter.github.com/bootstrap/customize.html#variables

Change any of them, such as:
$bodyBackground: red;
@import "bootstrap";

Alternatively if there isn't a variable available for what you want to change,
you can override the styles or add your own.

Sass:
@import "bootstrap";
/* override anything manually, like rounded buttons */
.btn {
  border-radius: 0;
}
Also see this: Proper SCSS Asset Structure in Rails
[ ---  end  ---- ]

=== [ topic ][ CDN ] ===
[ --- start ---- ]
Bootstrap CDN
The folks over at MaxCDN graciously provide CDN support for Bootstrap's CSS and JavaScript. Just use these Bootstrap CDN links.

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">

<!-- Latest compiled and minified JavaScript -->
<script
src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
[ ---  end  ---- ]

=== [ topic ][ customize ][ grid ][ 24 ] ===
[ --- start ---- ]
Simple enough to alter in less - 
http://twitter.github.com/bootstrap/scaffolding.html#gridCustomization

e.g.
@gridColumns: 24
@gridColumnWidth: 30px
@gridGutterWidth: 10px
If using a fluid-grid, you'll want to change these variables proportionally too,
otherwise span12 will still take up 100% of the width and span24 will take up
200%

@fluidGridColumnWidth
@fluidGridGutterWidth
As stated:

How to customize
Modifying the grid means changing the three @grid* variables and recompiling
Bootstrap. Change the grid variables in variables.less and use one of the four
ways documented to recompile. If you're adding more columns, be sure to add the
CSS for those in grid.less.

You can change the variables and download the new css right here:
http://twitter.github.com/bootstrap/download.html#variables

Example : calculation
960px
45px *16 =720 Column
15px *16 =240 Gutter
1200px
53px *16 =848 Column
22px *16 =352 Gutter
768px
33px *16 =528 Column
15px *16 =240 Gutter


Example 1:
24 Grid system with Gutter
@gridColumns: 24
@gridColumnWidth: 30px
@gridGutterWidth: 1px
@gridColumnWidth1200: 35px
@gridGutterWidth1200: 15px
@gridColumnWidth768: 21px
@gridGutterWidth768: 10px

24 Grid system without Gutter
@gridColumns: 16
@gridColumnWidth: 40px
@gridGutterWidth: 0px
@gridColumnWidth1200: 50px
@gridGutterWidth1200: 0px
@gridColumnWidth768: 31px
@gridGutterWidth768: 0px
[ ---  end  ---- ]

=== [ topic ][ avoid ][ select ] ===
[ --- start ---- ]
- Avoid using <select> elements as they cannot be fully styled in WebKit browsers.
[ ---  end  ---- ]

=== [ topic ][ install ] ===
[ --- start ---- ]
Title: Install Jekyll
- install Jekyll (requires v1.x) from http://jekyllrb.com/docs/installation/
    == gem install jekyll
- From the root /bootstrap directory, run jekyll serve in the command line.
- Open http://localhost:9001

Step:
/// download the rubydevkit and extract into path (path cannot have space, e.g. "program files")
cd rubydevkit
ruby dk.rb init
ruby dk.rb install
gem install jekyll --version "=1.4.2"

Title: Compiling CSS and JavaScript
npm install -g grunt-cli
Navigate to the root /bootstrap directory, then run: npm install
Run grunt to run tests locally and compile the CSS and JavaScript into /dist
[ ---  end  ---- ]

=== [ topic ][ install ][ problem ] ===
[ --- start ---- ]
/home/knxy/kn-programming-study-not-in-used/webdesign/web_reference/bootstrap/node_modules/grunt/lib/grunt/file.js:374
  return fs.existsSync(filepath);

need correct version of nodejs (version 0.6.19 is not usable!)
- uninstall the ubuntu deb from default repo
sudo apt-get remove nodejs

add the path to the latest node binary
[ ---  end  ---- ]

=== [ topic ][ vertical spacer ] ===
[ --- start ---- ]
.spacer5 { height: 5px; width: 100%; font-size: 0; margin: 0; padding: 0; border: 0; display: block; }
.spacer10 { height: 10px; width: 100%; font-size: 0; margin: 0; padding: 0; border: 0; display: block; }
[ ---  end  ---- ]
