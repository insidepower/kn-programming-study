=== [ topic ][ login ] ===
[ --- start ---- ]
mysql -h host -u user -p
/// from same machine then can omit host
mysql -u root -p
quit
[ ---  end  ---- ]

=== [ topic ][ database ][ design ][ normalizing ] ===
[ --- start ---- ]
- use the smallest possible column types
- avoid storing null values as much as possible
- use numeric coluns as much as possible
- use fixed-length columns when you can
- provide default values for columns, if applicable
[ ---  end  ---- ]

=== [ topic ][ database ][ performance ][ indexing ] ===
[ --- start ---- ]
- index columns that will be involved in where and order by clauses
- avoid indexing columns that allow null values
- apply length restriction to indexes on variable-length columns, such as
  indexing only the first 10 characterrs of a person's last name
- use EXPLAIN queries to confirm that indexes are being used
- revisit your indexes after some period of site activity to ensure they're
  still appropriate
[ ---  end  ---- ]

=== [ topic ][ performance ][ admin ] ===
[ --- start ---- ]
- back_log
- key_buffer_size
- max_connections
- thread_cache_size
[ ---  end  ---- ]

=== [ topic ][ storage engine ] ===
[ --- start ---- ]
InnoDB and MyISAM
- InnoDB is perferred and default for MySQL, excellent fail-safe in sensitive
situations
[ ---  end  ---- ]

=== [ topic ][ databases ][ switching table ] ===
[ --- start ---- ]
mysql
show databases;
show tables;
USE test;
use wordpress;
[ ---  end  ---- ]

=== [ topic ][ naming ][ back-quoted ] ===
[ --- start ---- ]
Back-Quoted Identifiers (`name`)
[ ---  end  ---- ]

=== [ topic ][ comment ] ===
[ --- start ---- ]
MySQL multi-line comments are enclosed within /* and */; 
end-of-line comments begins with -- (followed by a space) or #.
[ ---  end  ---- ]

=== [ topic ][ version ] ===
[ --- start ---- ]
SELECT version()
[ ---  end  ---- ]

=== [ topic ][ database ][ use ] ===
[ --- start ---- ]
- set which database to use
> use mysql;

- to check currently used database
> select database();

- whoami in mysql
> select current_user();
> select USER();
mysql> \s

- to use table not currently in used, then need to use fully qualified name of
the table, e.g. database3.table2
[ ---  end  ---- ]

=== [ topic ][ database ][ create ][ drop ] ===
[ --- start ---- ]
CREATE DATABASE IF NOT EXISTS southwind;
DROP DATABASE IF EXISTS southwind;

Title: Show Create
-  to display the full command and check these default values
> SHOW CREATE DATABASE southwind \G
*************************** 1. row ***************************
       Database: southwind
Create Database: CREATE DATABASE `southwind` /*!40100 DEFAULT CHARACTER SET
latin1 */
[ ---  end  ---- ]

=== [ topic ][ database ][ backup ] ===
[ --- start ---- ]
backup: # mysqldump -u root -p[root_password] [database_name] > dumpfilename.sql
restore:# mysql -u root -p[root_password] [database_name] < dumpfilename.sql

Title: Backup multiple databases
# mysqldump -u root -ptmppassword --databases database1 database2 > backup.sql
# grep -i "Current database:" backup.sql
-- Current Database: `database1`
-- Current Database: `database2`

Title: Backup all databases
# mysqldump -u root -ptmppassword --all-databases > /tmp/all-database.sql

Title: Backup particular table from a database
# mysqldump -u root -ptmppassword database1 table1 > backup-table1.sql

Title: Restore
# mysqldump -u root -ptmppassword database1 table1 < backup-table1.sql

Title: Backup and Restore remotely
# mysqldump -u root -ptmppassword sugarcrm | mysql \
                 -u root -ptmppassword --host=remote-server -C sugarcrm1
[ ---  end  ---- ]

=== [ topic ][ permission ] ===
[ --- start ---- ]
mysql> GRANT ALL ON menagerie.* TO 'your_mysql_name'@'your_client_host';
[ ---  end  ---- ]

=== [ topic ][ basic ] ===
[ --- start ---- ]
- letter insensitive
select user();
[ ---  end  ---- ]

=== [ topic ][ math ] ===
[ --- start ---- ]
SELECT SIN(PI()/4), (4+1)*5;
[ ---  end  ---- ]

=== [ topic ][ example ] ===
[ --- start ---- ]
SELECT * FROM my_table WHERE name = 'Smith AND age < 30;
[ ---  end  ---- ]

=== [ topic ][ version ] ===
[ --- start ---- ]
SELECT VERSION(), CURRENT_DATE;
[ ---  end  ---- ]

=== [ topic ][ table ][ create ] ===
[ --- start ---- ]
create table customrs(FirstName Char(30), lastname char(30), age int);
CREATE TABLE example( 
  id INT NOT NULL AUTO_INCREMENT, 
  name VARCHAR(30), 
  age INT,
  PRIMARY KEY(id)
  );
[ ---  end  ---- ]

=== [ topic ][ table ][ create ][ enum ] ===
[ --- start ---- ]
- restrict the value of a column
- can't have any operation inside, only literal string is allowed

Example :
CREATE TABLE sizes ( name ENUM('small', 'medium', 'large'));
/// error on below
CREATE TABLE sizes ( c1 ENUM('small', CONCAT('med','ium'), 'large'));
/// error on below
SET @mysize = 'medium';
CREATE TABLE sizes ( name ENUM('small', @mysize, 'large'));

in mysqlite:
create table MyTable
( name string check(name = "car" or name = "bike" or name = "van"));
[ ---  end  ---- ]

=== [ topic ][ table ][ rename ] ===
[ --- start ---- ]
RENAME TABLE  `database-name`.`table-name` TO  `database-name`.`new-table-name`;
[ ---  end  ---- ]

=== [ topic ][ insert ] ===
[ --- start ---- ]
insert into customrs values ("Ken", "Ng", 30);

- multiple insert
insert into `table_name` (`column1`, `column2`) values
(val1, val2), (pair2-val1, pair2-val2), (pair3-val1, pair3-val2)
[ ---  end  ---- ]

=== [ topic ][ insert ][ date ] ===
[ --- start ---- ]
insert_time=now()
INSERT INTO debugger (time_now, query_comment) VALUES (now(), @query);
[ ---  end  ---- ]

=== [ topic ][ select ] === 
[ --- start ---- ]
select * from customrs;
SELECT column_name,column_name FROM table_name;

- only return distinct (unique )
select distinct COLUMN_NAME,COLUMN_NAME from TABLE_NAME;
[ ---  end  ---- ]

=== [ topic ][ select ][ vertical ] ===
[ --- start ---- ]
- beautifier the select, show result vertically
select * from user where user="xinying"\G;

mysql> pager less -SFX
mysql> SELECT * FROM sometable;

Title: saving output
echo 'desc table_name' | mysql -uroot database -t
mysql -uroot table_name --table < /tmp/somequery.sql
[ ---  end  ---- ]

=== [ topic ][ select ][ where ] ===
[ --- start ---- ]
select column_name,column_name from table_name where column_name operator value;
Example 1:
SELECT * FROM Customers WHERE Country='Mexico';
SELECT * FROM Customers WHERE CustomerID=1;

- where operator
=	Equal
<>	Not equal. Note: In some versions of SQL this operator may be written as !=
>	Greater than
<	Less than
>=	Greater than or equal
<=	Less than or equal
BETWEEN	Between an inclusive range
LIKE	Search for a pattern
IN	To specify multiple possible values for a column

[ ---  end  ---- ]

=== [ topic ][ select ][ two table ] ===
[ --- start ---- ]
SELECT a.playerid,a.pla_lname,pla_fname,b.teamname FROM players a,teams b WHERE
a.teamid=b.teamid;

SELECT a.playerid,a.pla_lname,pla_fname,b.teamname FROM players a INNER JOIN
teams b ON a.teamid=b.teamid;
[ ---  end  ---- ]

=== [ topic ][ select ][ union ] ===
[ --- start ---- ]
- mysql don't have full join, can be simulate with union

Example :
SELECT CONCAT("G", ncp.id) AS sku, sa.price AS sale_price, ncc.category,
       ncp.image, ncp.name, ncp.price AS price, ncp.stock, ncp.description
FROM sales AS sa
  INNER JOIN non_coffee_products AS ncp ON sa.product_id=ncp.id
  INNER JOIN non_coffee_categories AS ncc ON ncc.id=ncp.non_coffee_category_id
    WHERE sa.product_type="goodies" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))

UNION
SELECT CONCAT("C", sc.id), sa.price, gc.category, gc.image, CONCAT_WS("-",
       s.size, sc.caf_decaf, sc.ground_whole), sc.price, sc.stock, 
       gc.description 
FROM sales AS sa
  INNER JOIN specific_coffees AS sc ON sa.product_id=sc.id
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE sa.product_type="coffee" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL));
 

Example : simulate full outer join with union
DROP TABLE IF EXISTS `example`.`table1`;
CREATE TABLE  `example`.`table1` (
  `id` int(10) unsigned NOT NULL default '0',
  `value` varchar(45) NOT NULL default ''
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO table1 VALUES (1, 'a'), (2, 'c'), (3, 'e');

DROP TABLE IF EXISTS `example`.`table2`;
CREATE TABLE  `example`.`table2` (
  `id` int(10) unsigned NOT NULL default '0',
  `value2` varchar(45) NOT NULL default ''
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO table2 VALUES (1, 'b'), (3, 'd'), (4, 'f');

SELECT t1.id,
           t1.value,
           t2.value2 
      FROM table1 t1
 LEFT JOIN table2 t2 ON t2.id = t1.id
UNION
    SELECT t2.id,
           t1.value,
           t2.value2
      FROM TABLE1 t1
RIGHT JOIN TABLE2 t2 ON t2.id = t1.id;
[ ---  end  ---- ]

=== [ topic ][ select ][ limit ] ===
[ --- start ---- ]
Example :
SELECT CONCAT("G", ncp.id) AS sku, sa.price AS sale_price, ncc.category,
       ncp.image, ncp.name, ncp.price AS price, ncp.stock, ncp.description
FROM sales AS sa
  INNER JOIN non_coffee_products AS ncp ON sa.product_id=ncp.id
  INNER JOIN non_coffee_categories AS ncc ON ncc.id=ncp.non_coffee_category_id
    WHERE sa.product_type="goodies" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))
  ORDER BY RAND() LIMIT 2

UNION
SELECT CONCAT("C", sc.id), sa.price, gc.category, gc.image, CONCAT_WS("-",
       s.size, sc.caf_decaf, sc.ground_whole), sc.price, sc.stock, 
       gc.description 
FROM sales AS sa
  INNER JOIN specific_coffees AS sc ON sa.product_id=sc.id
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE sa.product_type="coffee" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))
  ORDER BY RAND() LIMIT 2;
[ ---  end  ---- ]

=== [ topic ][ select ][ distinct ][ unique ] ===
[ --- start ---- ]
SELECT DISTINCT(Date) AS Date FROM buy ORDER BY Date DESC;
[ ---  end  ---- ]

=== [ topic ][ update ] ===
[ --- start ---- ]
-- Increase the price by 10% for all products
mysql> UPDATE products SET price = price * 1.1;

-- You can modify more than one values
UPDATE products 
  SET quantity = quantity + 50, price = 1.23 WHERE name = 'Pen Red';

Example : value from another table
update cl_wedding_gown t1 
    ->   inner join sizes t2
    -> set t1.size=t2.id
    -> where t1.size_old=t2.size;

Example :
UPDATE tableB t1 
        INNER JOIN tableA t2 
             ON t1.name = t2.name
SET t1.value = IF(t2.value > 0, t2.value, t1.value)
WHERE t2.name = 'Joe'
[ ---  end  ---- ]

=== [ topic ][ delete ] ===
[ --- start ---- ]
DELETE FROM products WHERE name LIKE 'Pencil%';

-- Use this with extreme care, as the deleted records are irrecoverable!
mysql> DELETE FROM products;
delete from debugger where 1=1;
[ ---  end  ---- ]

=== [ topic ][ sql ][ join ] ===
[ --- start ---- ]
- join has higher precedence than comma (,)
  == e.g. t1, t2 join t3 ==> (t1, (t2 join t3))
  thus this statement will throw error on unknown column of t1.i1
  select * from t1, t2 join t3 on (t1.i1 = t3.i3);
- correct join usage
  select * from (t1, t2) join t3 on (t1.i1 = t3.i3);
  - or -
  select * from t1 oin t2 join t3 on (t1.i1 = t3.i3);

Example :
select gc.description, gc.image, CONCAT("C", sc.id) AS sku,
  CONCAT_WS(" - ", s.size, sc.caf_decaf, sc.ground_whole, 
  CONCAT("$", FORMAT(sc.price/100, 2))) AS name, sc.stock
    FROM
  specific_coffees AS sc 
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE
  general_coffee_id=3 AND stock > 0
    ORDER by name ASC;
Example : to check for sales price as well
select gc.description, gc.image, CONCAT("C", sc.id) AS sku,
  CONCAT_WS(" - ", s.size, sc.caf_decaf, sc.ground_whole, 
  CONCAT("$", FORMAT(sc.price/100, 2))) AS name, sc.stock
  sc.price, sales.price AS sale_price
FROM specific_coffees AS sc 
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
  /// if there is not sales price, the sales.price will be null
  LEFT OUTER JOIN sales ON 
    (sales.product_id=sc.id AND sales.product_type='coffee' AND 
      ((NOW() BETWEEN sales.start_date AND sales.end_date) OR
        (NOW() > sales.start_date AND sales.end_date IS NULL)
      )
    )
    WHERE general_coffee_id=3 AND stock > 0
    ORDER by name ASC;

Example :
CREATE TABLE t1 (i1 INT, j1 INT);
CREATE TABLE t2 (i2 INT, j2 INT);
CREATE TABLE t3 (i3 INT, j3 INT);
INSERT INTO t1 VALUES(1,1);
INSERT INTO t2 VALUES(1,1);
INSERT INTO t3 VALUES(1,1);
SELECT * FROM t1, t2 JOIN t3 ON (t1.i1 = t3.i3);

Previously, the SELECT was legal due to the implicit grouping of t1,t2 as
(t1,t2). Now the JOIN takes precedence, so the operands for the ON clause are t2
and t3. Because t1.i1 is not a column in either of the operands, the result is
an Unknown column 't1.i1' in 'on clause' error. To allow the join to be
processed, group the first two tables explicitly with parentheses so that the
operands for the ON clause are (t1,t2) and t3:

Example :
create table a (id int);
create table b (type int);
insert into a (id) values (1), (2), (3), (4);
insert into b (type) values (3), (4), (5), (6);

// inner join = intersect of a and b
select * from a inner join b on a.id=b.type;
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
+------+------+

/// everything of left and intersect of a and b
select * from a left outer join b on (a.id=b.type);
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
|    1 | NULL |
|    2 | NULL |
+------+------+

select * from a right outer join b on (a.id=b.type);
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
| NULL |    5 |
| NULL |    6 |
+------+------+

select * from a join b;
+------+------+
| id   | type |
+------+------+
|    1 |    3 |
|    2 |    3 |
|    3 |    3 |
|    4 |    3 |
|    1 |    4 |
|    2 |    4 |
|    3 |    4 |
|    4 |    4 |
|    1 |    5 |
|    2 |    5 |
|    3 |    5 |
|    4 |    5 |
|    1 |    6 |
|    2 |    6 |
|    3 |    6 |
|    4 |    6 |
+------+------+
[ ---  end  ---- ]

=== [ topic ][ SQL ][ concat ] ===
[ --- start ---- ]
- CONCAT(str1,str2,...)
  == concatenate all string together
     e.g. SELECT CONCAT('My', 'S', 'QL');   -> 'MySQL'
select CONCAT("C", sc.id) AS sku 
  FROM table_name AS sc;

- CONCAT_WS(separator,str1,str2,...)
  == concatenate all str1, str2... with separator
     e.g. SELECT CONCAT_WS(',','First name','Second name','Last Name');
      -> 'First name,Second name,Last Name'
     e.g. SELECT CONCAT_WS(',','First name',NULL,'Last Name');
        -> 'First name,Last Name'
  == CONCAT_WS() does not skip empty strings. However, it does skip any NULL
  values after the separator argument.
  
[ ---  end  ---- ]

=== [ topic ][ SQL ][ FORMAT ] ===
[ --- start ---- ]
mysql> SELECT FORMAT(12332.123456, 4);
        -> '12,332.1235'
mysql> SELECT FORMAT(12332.1,4);
        -> '12,332.1000'
mysql> SELECT FORMAT(12332.2,0);
        -> '12,332'
[ ---  end  ---- ]

=== [ topic ][ order by ] ===
[ --- start ---- ]
SELECT ... FROM tableName
WHERE criteria
ORDER BY columnA ASC|DESC, columnB ASC|DESC, ...

Example :
ORDER by name ASC;
ORDER by date_created DESC;

Example :
SELECT * FROM products ORDER BY RAND();
[ ---  end  ---- ]

=== [ topic ][ limit ] ===
[ --- start ---- ]
ORDER BY RAND() LIMIT 2;

Example :
-- Display the first two rows
mysql> SELECT * FROM products ORDER BY price LIMIT 2;

-- Skip the first two rows and display the next 1 row
mysql> SELECT * FROM products ORDER BY price LIMIT 2, 1;
[ ---  end  ---- ]

=== [ topic ][ clause ][ AS ] ===
[ --- start ---- ]
AS - Alias
- The alias will be used in displaying the name. 
- It can also be used as reference

Example :
SELECT productID AS ID, productCode AS Code, name AS Description, 
  price AS `Unit Price` FROM products ORDER BY ID;
[ ---  end  ---- ]

=== [ topic ][ clause ][ DISTINCT ] ===
[ --- start ---- ]
- A column may have duplicate values, DISTINCT select only distinct values

Example :
mysql> SELECT DISTINCT price AS `Distinct Price` FROM products;
+----------------+
| Distinct Price |
+----------------+
|           1.23 |
|           1.25 |
|           0.48 |
|           0.49 |
+----------------+

Example :
-- DISTINCT combination of price and name
mysql> SELECT DISTINCT price, name FROM products;
+-------+-----------+
| price | name      |
+-------+-----------+
|  1.23 | Pen Red   |
|  1.25 | Pen Blue  |
|  1.25 | Pen Black |
|  0.48 | Pencil 2B |
|  0.49 | Pencil 2H |
+-------+-----------+
[ ---  end  ---- ]

=== [ topic ][ clause ][ group by ] ===
[ --- start ---- ]
GROUP BY Clause
- allows you to collapse multiple records with a common value into groups
- GROUP BY by itself is not meaningful. It is used together with GROUP BY
aggregate functions (such as COUNT(), AVG(), SUM()) to produce group summary.

Example :
mysql> SELECT * FROM products ORDER BY productCode, productID;
+-----------+-------------+-----------+----------+-------+
| productID | productCode | name      | quantity | price |
+-----------+-------------+-----------+----------+-------+
|      1004 | PEC         | Pencil 2B |    10000 |  0.48 |
|      1005 | PEC         | Pencil 2H |     8000 |  0.49 |
|      1001 | PEN         | Pen Red   |     5000 |  1.23 |
|      1002 | PEN         | Pen Blue  |     8000 |  1.25 |
|      1003 | PEN         | Pen Black |     2000 |  1.25 |
+-----------+-------------+-----------+----------+-------+
 
mysql> SELECT * FROM products GROUP BY productCode;
       -- Only first record in each group is shown
+-----------+-------------+-----------+----------+-------+
| productID | productCode | name      | quantity | price |
+-----------+-------------+-----------+----------+-------+
|      1004 | PEC         | Pencil 2B |    10000 |  0.48 |
|      1001 | PEN         | Pen Red   |     5000 |  1.23 |
+-----------+-------------+-----------+----------+-------+
[ ---  end  ---- ]

=== [ topic ][ clause ][ group by ][ aggregate function ] ===
[ --- start ---- ]
GROUP BY Aggregate Functions: COUNT, MAX, MIN, AVG, SUM, STD, GROUP_CONCAT
- The function COUNT(*) returns the rows selected; 
- COUNT(columnName) counts only the non-NULL values of the given colum

Example :
-- Function COUNT(*) returns the number of rows selected
mysql> SELECT COUNT(*) AS `Count` FROM products;
       -- All rows without GROUP BY clause
+-------+
| Count |
+-------+
|     5 |
+-------+
   
mysql> SELECT productCode, COUNT(*) FROM products GROUP BY productCode;
+-------------+----------+
| productCode | COUNT(*) |
+-------------+----------+
| PEC         |        2 |
| PEN         |        3 |
+-------------+----------+

Example :
mysql> SELECT MAX(price), MIN(price), AVG(price), STD(price), SUM(quantity)
       FROM products;
       -- Without GROUP BY - All rows
+------------+------------+------------+------------+---------------+
| MAX(price) | MIN(price) | AVG(price) | STD(price) | SUM(quantity) |
+------------+------------+------------+------------+---------------+
|       1.25 |       0.48 |   0.940000 |   0.371591 |         33000 |
+------------+------------+------------+------------+---------------+
 
mysql> SELECT productCode, MAX(price) AS `Highest Price`, MIN(price) AS `Lowest Price`
       FROM products
       GROUP BY productCode;
+-------------+---------------+--------------+
| productCode | Highest Price | Lowest Price |
+-------------+---------------+--------------+
| PEC         |          0.49 |         0.48 |
| PEN         |          1.25 |         1.23 |
+-------------+---------------+--------------+
 
mysql> SELECT productCode, MAX(price), MIN(price),
              CAST(AVG(price) AS DECIMAL(7,2)) AS `Average`,
              CAST(STD(price) AS DECIMAL(7,2)) AS `Std Dev`,
              SUM(quantity)
       FROM products
       GROUP BY productCode;
       -- Use CAST(... AS ...) function to format floating-point numbers
+-------------+------------+------------+---------+---------+---------------+
| productCode | MAX(price) | MIN(price) | Average | Std Dev | SUM(quantity) |
+-------------+------------+------------+---------+---------+---------------+
| PEC         |       0.49 |       0.48 |    0.49 |    0.01 |         18000 |
| PEN         |       1.25 |       1.23 |    1.24 |    0.01 |         15000 |
+-------------+------------+------------+---------+---------+---------------+
[ ---  end  ---- ]

=== [ topic ][ clause ][ HAVING ] ===
[ --- start ---- ]
- HAVING is similar to WHERE, 
- but HAVING can operate on the GROUP BY aggregate functions; 
- whereas WHERE operates only on columns.

Example :
mysql> SELECT
          productCode AS `Product Code`,
          COUNT(*) AS `Count`,
          CAST(AVG(price) AS DECIMAL(7,2)) AS `Average`
       FROM products 
       GROUP BY productCode
       HAVING Count >=3;
          -- CANNOT use WHERE count >= 3
+--------------+-------+---------+
| Product Code | Count | Average |
+--------------+-------+---------+
| PEN          |     3 |    1.24 |
+--------------+-------+---------+
[ ---  end  ---- ]

=== [ topic ][ clause [ WITH ROLLUP ] ===
[ --- start ---- ]
The WITH ROLLUP clause shows the summary of group summary, e.g.,

Example :
mysql> SELECT 
          productCode, 
          MAX(price), 
          MIN(price), 
          CAST(AVG(price) AS DECIMAL(7,2)) AS `Average`,
          SUM(quantity)
       FROM products
       GROUP BY productCode
       WITH ROLLUP;        -- Apply aggregate functions to all groups
+-------------+------------+------------+---------+---------------+
| productCode | MAX(price) | MIN(price) | Average | SUM(quantity) |
+-------------+------------+------------+---------+---------------+
| PEC         |       0.49 |       0.48 |    0.49 |         18000 |
| PEN         |       1.25 |       1.23 |    1.24 |         15000 |
| NULL        |       1.25 |       0.48 |    0.94 |         33000 |
+-------------+------------+------------+---------+---------------+
[ ---  end  ---- ]

=== [ topic ][ delete ] ===
[ --- start ---- ]
- delete from table where xxx=yyy;

delete from user where user="testing";
[ ---  end  ---- ]

=== [ topic ][ GUI ] ===
[ --- start ---- ]
MySQL Workbench
phpMyAdmin which I found a bit slow
Navicat which is a windows port and runs under wine
linux native version of navicat.
MySQL Workbench Install mysql-workbench is probably the most complete tool, but a bit sluggish according to me.
I prefer "MySQL Query browser" and "MySQL Administrator". 
I like Emma. Emma is an open source project that isn't developed by Oracle
SQLYog to this list anyway since it is such a powerful tool... There is no 
official build available for Linux but it works quite well on Wine.
[ ---  end  ---- ]

=== [ topic ][ reset password ] ===
[ --- start ---- ]
$ su
$ service mysql stop
$ mysqld_safe --skip-grant-tables &
$ mysql -u root

MariaDB [(none)]> use mysql;
MariaDB [(none)]> update user set password=PASSWORD("NEWPASSWORD") where
User='root';
MariaDB > flush privileges;
Query OK, 0 rows affected (0.00 sec) 
MariaDB [(none)]> exit; 

$ service mysql restart
$ mysql -u root -p
[ ---  end  ---- ]

=== [ topic ][ create user ] ===
[ --- start ---- ]
- Each time you update or change a permission be sure to use the Flush
  Privileges command. 

Title: Syntax
GRANT [type of permission] ON [database name].[table name] TO ‘[username]’
@'localhost’;
    == Type of permission:
      ALL PRIVILEGES
      CREATE- allows them to create new tables or databases
      DROP- allows them to them to delete tables or databases
      DELETE- allows them to delete rows from tables
      INSERT- allows them to insert rows into tables
      SELECT- allows them to use the Select command to read through databases
      UPDATE- allow them to update table rows
      GRANT OPTION- allows them to grant or remove other users' privileges

REVOKE [type of permission] ON [database name].[table name] FROM ‘[username]’
@‘localhost’;

DROP USER ‘demo’@‘localhost’;

Example :
create user username@"Ideapad-Lenovo" identified by 'password';
/// sometimes the hostname is not resolved by server, use ip instead
create user username@'192.168.1.1200' identified by 'password';
GRANT ALL ON databaseName.* TO 'your_mysql_name'@'your_client_host';
flush privileges;
[ ---  end  ---- ]

=== [ topic ][ grant ][ topic ] ===
[ --- start ---- ]
- existing privileges is not removed until a revoke is called
-  "USAGE" privilege means "no privileges," 
- GRANT USAGE ON *.* TO 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;

CREATE ROLE role_name
GRANT SELECT ON table_name TO role_name
SHOW GRANTS FOR my_user@"hostname";
GRANT EXECUTE ON PROCEDURE uangelic.catalogue_wedding_gowns TO web_user@'%';

Example : 
GRANT SELECT ON my_database.* TO my_user@"%" IDENTIFIED BY 'my_password';
REVOKE ALL PRIVILEGES ON my_database.* FROM my_user@"%";
GRANT SELECT, UPDATE ON my_database.* TO my_user@"%" IDENTIFIED BY
'my_password';
[ ---  end  ---- ]

=== [ topic ][ table ][ create ] ===
[ --- start ---- ]
CREATE TABLE aTable ( ...
) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8;

- or - is same

CREATE TABLE aTable ( ...
) ENGINE=InnoDB CHARACTER SET=utf8;

syntax:
table_option:
    ENGINE [=] engine_name
  ... other options ...
  | [DEFAULT] CHARACTER SET [=] charset_name
[ ---  end  ---- ]

=== [ topic ][ table ][ show all ] ===
[ --- start ---- ]
> show tables;
[ ---  end  ---- ]

=== [ topic ][ table ][ describe ] ===
[ --- start ---- ]
- show the table information, like type, null, primary key etc
- DESCRIBE <table>;  == SHOW COLUMNS FROM <table>;
- MUL key allows nonunique index (multiple occurrences)
- Key display order: PRI, UNI, MUL

> describe mytable;
> SHOW FULL COLUMS FROM tbl_name LIKE 'col_name';

PRI=> primary key
UNI=> unique key
MUL = index that is not primary or unique


[ ---  end  ---- ]

=== [ topic ][ table ][ show ] ===
[ --- start ---- ]
syntax:
SHOW [FULL] COLUMNS {FROM | IN} tbl_name [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr]

- "full" : include collation and comments, as well as the privileges 
- displays information about the columns in a given table
> show full columns from prdt_cl_wedding_gown;

Example : drop foreign key
> SHOW CREATE TABLE products \G

Create Table: CREATE TABLE `products` (
  `productID`   int(10) unsigned  NOT NULL AUTO_INCREMENT,
  `productCode` char(3)           NOT NULL DEFAULT '',
  `name`        varchar(30)       NOT NULL DEFAULT '',
  `quantity`    int(10) unsigned  NOT NULL DEFAULT '0',
  `price`       decimal(7,2)      NOT NULL DEFAULT '99999.99',
  `supplierID`  int(10) unsigned   NOT NULL DEFAULT '501',
  PRIMARY KEY (`productID`),
  KEY `supplierID` (`supplierID`),
  CONSTRAINT `products_ibfk_1` FOREIGN KEY (`supplierID`) 
     REFERENCES `suppliers` (`supplierID`)
) ENGINE=InnoDB AUTO_INCREMENT=1006 DEFAULT CHARSET=latin1

mysql> ALTER TABLE products DROP FOREIGN KEY products_ibfk_1;

Title: PhpMyAdmin
use export function to see the "SHOW CREATE TABLE xxx"
[ ---  end  ---- ]

=== [ topic ][ table ][ alter ][ add column ] ===
[ --- start ---- ]
- Original table:
assessmentid | q1 | q2 | q3 | q4 | q5 

ALTER TABLE yourtable ADD q6 VARCHAR( 255 ) after q5
- new table:
assessmentid | q1 | q2 | q3 | q4 | q5 | q6
[ ---  end  ---- ]

=== [ topic ][ table ][ alter ][ modify ] ===
[ --- start ---- ]
alter table product_catalogue modify category char(20) not null
[ ---  end  ---- ]

=== [ topic ][ explain vs describe ] ===
[ --- start ---- ]
- explain : give information about query, so it can be optimized
- describe : give info about a table
- when use explain on table, it behaves like describe
[ ---  end  ---- ]

=== [ topic ][ primary key ] ===
[ --- start ---- ]
MySQL unique keys can be NULL whereas primary keys cannot be
- A primary key is called a simple key if it is a single column
- it is called a composite key if it is made up of several columns
- Most RDBMSs build an index on the primary key to facilitate fast search. 
- The primary key is often used to relate to other tables.

[ ---  end  ---- ]

=== [ topic ][ foreign key ] ===
[ --- start ---- ]
- foreign key ("column name") references "referenced-table-name"
("column-name-in-reference table")
- on delete cascade, delete this column when referenced-table id got deleted?
- Foreign key constraint imposed to ensure sreferential integrity
- values in the child table must be valid values in the parent table.
- MySQL require indexes on foreign keys and referenced keys
  == so that foreign key can be checked fast and not require a 
     table scan

syntax:
ALTER TABLE tableName ADD FOREIGN KEY (columnNmae) 
    REFERENCES tableName (columnNmae);

-- Child table definition
CREATE TABLE tableName (
   ......
   ......
   CONSTRAINT constraintName FOREIGN KEY (columName) REFERENCES parentTableName (columnName)
     [ON DELETE RESTRICT | CASCADE | SET NULL | NO ACTION]   -- On DELETE reference action
     [ON UPDATE RESTRICT | CASCADE | SET NULL | NO ACTION]   -- On UPDATE reference action
)

RESTRICT (default):   
  == disallow DELETE or UPDATE of the parent's row
CASCADE: 
  == cascade the DELETE or UPDATE action to the matching rows in the child table.
SET NULL: 
  == set the foreign key value in the child table to NULL (if NULL is allowed).
NO ACTION: 
  == a SQL term which means no action on the parent's row. Same as RESTRICT in MySQL, which disallows DELETE or UPDATE (do nothing).

Example :
CREATE TABLE IF NOT EXISTS `feeds` (
  `Feed_ID` int(11) NOT NULL,
  `Feed_Name` varchar(32) NOT NULL,
  `Feed_Url` varchar(255) NOT NULL,
  PRIMARY KEY (`Feed_ID`)
)

CREATE TABLE IF NOT EXISTS `feeditems` (
  `FeedItem_ID` int(11) NOT NULL,
  `Feed_ID` int(11) NOT NULL,
  `FeedItem_Date` datetime NOT NULL,
  `FeedItem_Title` varchar(255) NOT NULL,
  `FeedItem_Url` varchar(255) NOT NULL,
  `FeedItem_Name` varchar(255) NOT NULL,
  PRIMARY KEY (`FeedItem_ID`),
  FOREIGN KEY (`Feed_ID`) REFERENCES `feeds`(`Feed_ID`)
                      ON DELETE CASCADE
)

Example 2:
- for foreign key, the datatype need to be exactly the same
 
CREATE TABLE prdt (
  prdt_category varchar(5) NOT NULL COMMENT "WG, WGC-",
  prdt_code smallint(4) ZEROFILL NOT NULL UNIQUE,

  PRIMARY KEY (prdt_category, prdt_code)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

Create Table: CREATE TABLE `prdt_admin` (
  `fk_prdt_category` varchar(5) NOT NULL DEFAULT '',
  `fk_prdt_code` smallint(4) unsigned zerofill NOT NULL,
  `url` text,
  PRIMARY KEY (`fk_prdt_category`,`fk_prdt_code`),
  UNIQUE KEY `fk_prdt_code` (`fk_prdt_code`),
  FOREIGN KEY (`fk_prdt_category`,
    `fk_prdt_code`) REFERENCES `prdt` (`prdt_category`, `prdt_code`)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8

[ ---  end  ---- ]

=== [ topic ][ optimization ][ index ] ===
[ --- start ---- ]
- Indexes (or Keys) can be created on selected column to facilitate fast search. 
- Without index, a "SELECT * FROM products WHERE productID=x" needs to match
with the productID column of all the records in the products table. If
productID column is indexed (e.g., using a binary tree), the matching can be
greatly improved (via the binary tree search).
- index columns which are frequently used in the WHERE clause; and as JOIN
columns.
- the drawback about indexing is cost and space
- Building and maintaining indexes require computations and memory spaces
- Indexes facilitate fast search but deplete the performance on modifying the
table (INSERT/UPDATE/DELETE)
- in MySQL, the keyword KEY is synonym to INDEX
- in MySQL, indexes can be built on:
  == a single column (column-index)
  == a set of columns (concatenated-index)
  == on unique-value column (UNIQUE INDEX or UNIQUE KEY)
  == on a prefix of column for strings (VARCHAR or CHAR)
    *** e.g. first 5 char.
- can be more than one indexes in a table.
- Index are automatically built on the primary-key column(s)

Title: 3 way to create index
1)
CREATE TABLE tableName (
   ......
   [UNIQUE] INDEX|KEY indexName (columnName, ...),
      -- The optional keyword UNIQUE ensures column are distinct
      -- KEY is synonym to INDEX
   ......
   PRIMAY KEY (columnName, ...) 
);

2) 
CREATE [UNIQUE] INDEX indexName ON tableName(columnName, ...);

3)
ALTER TABLE tableName ADD UNIQUE|INDEX|PRIMARY KEY indexName (columnName, ...)
 
> SHOW INDEX FROM tableName;

Example :
CREATE TABLE departments (
         dept_no    CHAR(4)      NOT NULL,
         dept_name  VARCHAR(40)  NOT NULL,
         PRIMARY KEY  (dept_no),   -- Index 
         UNIQUE INDEX (dept_name)  -- Build INDEX on this unique-value column
       );

[ ---  end  ---- ]

=== [ topic ][ optimization ][ index ][ multiple-column index ][ composite
indexes ] ===
[ --- start ---- ]
- composite indexes = indexes on multiple columns
- can be up to 16 columns
- the order of composite is import
  e.g. index (col1, col2, col3)
  then will have indexed search capabilities on 
  (col1), 
  (col1, col2), and
  (col1, col2, col3).
- MySQL cannot use the index to perform lookups if the columns do not form a
leftmost prefix of the index. 

Example :
CREATE TABLE test (
    id         INT NOT NULL,
    last_name  CHAR(30) NOT NULL,
    first_name CHAR(30) NOT NULL,
    PRIMARY KEY (id),
    INDEX name (last_name,first_name)
);

the index will apply to following queries:
... where last_name = "xxx";
... where last_name = "xxx" AND first_name ="yyy";
... where last_name = "xxx" AND (first_name="yyy" OR first_name="zzz");
... where last_name = "xxx" AND first_name >='M' AND first_name < 'N'

but not apply to following:
... where fist_name = "yyy";
... where last_name = "xxx" OR first_name="yyy";

Title: Alternative method, use "hashed column"
- If this column is short, reasonably unique, and indexed, it might be faster
than a “wide” index on many columns.

Example :
SELECT * FROM tbl_name
  WHERE hash_col=MD5(CONCAT(val1,val2))
  AND col1=val1 AND col2=val2;
[ ---  end  ---- ]

=== [ topic ][ table ][ unique ] ===
[ --- start ---- ]
- NULL is treated as a unique value — which is why you cannot use comparisons
such as value = NULL and need to use value IS NULL
- ensure no two records have the same country, area, number and extension

DROP TABLE IF EXISTS `phone`;
 
CREATE TABLE `phone` (
    `id` MEDIUMINT(8) UNSIGNED NOT NULL AUTO_INCREMENT,
    `country` DECIMAL(5,0) UNSIGNED NOT NULL,
    `area` DECIMAL(5,0) UNSIGNED NOT NULL,
    `number` DECIMAL(8,0) UNSIGNED NOT NULL,
    `extension` DECIMAL(5,0) UNSIGNED DEFAULT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `ix_phone` (`country`, `area`, `number`, `extension`),
) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;

try insert:
INSERT INTO `phone`
(`country`, `area`, `number`, `extension`)
(44, 9876, 54321, 42);

resulted error:
Error Code: 1062
Duplicate entry '44-9876-54321-42' for key 'ix_phone'

try insert: (no error, as default null is considered as unique)
INSERT INTO `phone`
(`country`, `area`, `number`)
(1, 234, 567890);
[ ---  end  ---- ]

=== [ topic ][ connect ][ remote ] ===
[ --- start ---- ]
sudo nano /etc/mysql/my.cnf
bind-address = 127.0.0.1
bind-address = 0.0.0.0
/etc/init.d/mysql restart
netstat -tnl | grep 3306
tcp        0      0 0.0.0.0:3306          0.0.0.0:*               LISTEN
[ ---  end  ---- ]

=== [ topic ][ tutorial ] ===
[ --- start ---- ]
Title: Create
CREATE TABLE `products` (
  `productID`    int(10) unsigned  NOT NULL AUTO_INCREMENT,
  `productCode`  char(3)           NOT NULL DEFAULT '',
  `name`         varchar(30)       NOT NULL DEFAULT '',
  `quantity`     int(10) unsigned  NOT NULL DEFAULT '0',
  `price`        decimal(7,2)      NOT NULL DEFAULT '99999.99',
  PRIMARY KEY (`productID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1

Title: Insert
// need to specify the first primary_key for the first time?
> INSERT INTO products VALUES (1001, 'PEN', 'Pen Red', 5000, 1.23);
// subsequent primary key can be use null, mysql will auto-increment
> INSERT INTO products VALUES
         (NULL, 'PEN', 'Pen Blue',  8000, 1.25),
         (NULL, 'PEN', 'Pen Black', 2000, 1.25);
> INSERT INTO products (productCode, name, quantity, price) VALUES
         ('PEC', 'Pencil 2B', 10000, 0.48),
         ('PEC', 'Pencil 2H', 8000, 0.49);
> INSERT INTO products (productCode, name) VALUES ('PEC', 'Pencil HB');

Title: Select
SELECT name, price FROM products;
SELECT * FROM products;

SELECT 1+1;
SELECT NOW();  // show time
SELECT 1+1, NOW();
[ ---  end  ---- ]

=== [ topic ][ php ][ connect ] ===
[ --- start ---- ]
<?php
    mysql_connect("your.database.host", "your-user-name", "your-password")
        or die ("<p> Error connecting to databases: ". mysql_error(). "</p>");

    echo "Connected to database!"
?>
[ ---  end  ---- ]

=== [ topic ][ php ][ select ] ===
[ --- start ---- ]
<? 
    mysql_select_db("your_database_name")
        or die(" Error in selecting database". mysql_error() );
    echo "selected database!";
?>
[ ---  end  ---- ]

=== [ topic ][ php ][ query ] ===
[ --- start ---- ]
    $result = mysql_query("SHOW TABLES;");

    // if ( false === $result) {  
    // - or -
    if (!$result){
        die ("Error in query ". mysql_error());
    }

    echo " table in database ";
    echo "<ul>";
    while ($row = mysql_fetch_row($result)){
        echo "<li>".$row[0]."</li>"
    }
    echo "</ul>"
[ ---  end  ---- ]

=== [ topic ][ abstracting info ] ===
[ --- start ---- ]
@@@ app_config.php:
<?php
    $database_hot = "your.database.host";
    $username = "your-username";
    $password = "password";
    $database_name = "your.database.name"; ?>

@@@ normal_usage.php:
<?php
    require '../app_config.php'; 
    ...
?>
[ ---  end  ---- ]

=== [ topic ][ constant ] ===
[ --- start ---- ]

@@@ app_config.php:
<?php
    define("DATABASE_HOST", "your.database.host");
    define("DATABASE_USERNAME", "your-username");
    define("DATABASE_PASSWORD","password");
    define("DATABASE_NAME", "your.database.name"; ?>

@@@ normal_usage.php:
<?php
    require '../app_config.php'; 
    
    echo "connect to mysql, using database = ". DATABASE_NAME
?>
[ ---  end  ---- ]

=== [ topic ][ datatype ][ text type ][ length ] ===
[ --- start ---- ]
 Type | Maximum length
-----------+-------------------------------------
  TINYTEXT |           255 (2 8−1) bytes
      TEXT |        65,535 (216−1) bytes = 64 KiB
MEDIUMTEXT |    16,777,215 (224−1) bytes = 16 MiB
  LONGTEXT | 4,294,967,295 (232−1) bytes =  4 GiB
[ ---  end  ---- ]

=== [ topic ][ datatype ][ length ] ===
[ --- start ---- ]
- INT(x), x is the "display width" 
    ==  display width does not constrain [or expand] the range of 
        values that can be stored in the column.
[ ---  end  ---- ]

=== [ topic ][ datatype ][ zerofilled ] ===
[ --- start ---- ]
- ZEROFILL pads the displayed value of the field with zeros up to the display
  width specified in the column definition.
- Values longer than the display width are not truncated. not affect the size.
- ZEROFILL also implies UNSIGNED.

Example :
CREATE TABLE yourtable (x INT(8) ZEROFILL NOT NULL, y INT(8) NOT NULL);
INSERT INTO yourtable (x,y) VALUES
(1, 1),
(12, 12),
(123, 123),
(123456789, 123456789);

SELECT x, y FROM yourtable;
        x          y
 00000001          1
 00000012         12
 00000123        123
123456789  123456789
[ ---  end  ---- ]

=== [ topic ][ datatype ][ char ][ length ] ===
[ --- start ---- ]
- CHAR length: 0-255
  == trailing spaces are removed

- VARCHAR length: 0 - 65,535 (max up to). 
  == 65,535 is max row size and is shared by all columns
  == prefix with 1-2 bytes which indicates the length of string
    *** 1 byte if length is less than 255
    *** 2 bytes prefix is used when length is more than 255
  == trailing spaces are not removed
  == VARCHAR(255) takes around 700+ char leng in memory
  == thus it's recommended to declare what's needed, e.g. VARCHAR(10)

=============================================================================
Value      CHAR(4) "Storage Required" VARCHAR(4) "Storage Required"
=============================================================================
''         '    '  "4 bytes"          ''         "1 byte"
'ab'       'ab  '  "4 bytes"          'ab'       "3 bytes"
'abcd'     'abcd'  "4 bytes"          'abcd'     "5 bytes"
'abcdefgh' 'abcd'  "4 bytes"          'abcd'     "5 bytes"
-----------------------------------------------------------------------------

Example : trailing space demo of CHAR and VARCHAR
mysql> CREATE TABLE vc (v VARCHAR(4), c CHAR(4));
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO vc VALUES ('ab  ', 'ab  ');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT CONCAT('(', v, ')'), CONCAT('(', c, ')') FROM vc;
+---------------------+---------------------+
| CONCAT('(', v, ')') | CONCAT('(', c, ')') |
+---------------------+---------------------+
| (ab  )              | (ab)                |
+---------------------+---------------------+

Example : CHAR comparison
mysql> CREATE TABLE names (myname CHAR(10));
Query OK, 0 rows affected (0.03 sec)

mysql> INSERT INTO names VALUES ('Monty');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT myname = 'Monty', myname = 'Monty  ' FROM names;
+------------------+--------------------+
| myname = 'Monty' | myname = 'Monty  ' |
+------------------+--------------------+
|                1 |                  1 |
+------------------+--------------------+
1 row in set (0.00 sec)

/// for like, trailing space is significant
mysql> SELECT myname LIKE 'Monty', myname LIKE 'Monty  ' FROM names;
+---------------------+-----------------------+
| myname LIKE 'Monty' | myname LIKE 'Monty  ' |
+---------------------+-----------------------+
|                   1 |                     0 |
+---------------------+-----------------------+
[ ---  end  ---- ]

=== [ topic ][ datatype ][ varchar ] ===
[ --- start ---- ]
- VARCHAR(255) is smart enough to store only the length you need
- unlike CHAR(255) which would always store 255 characters.

- as rows are copied from the storage engine layer to the SQL layer, VARCHAR
fields are converted to CHAR to gain the advantage of working with fixed-width
rows. So the strings in memory become padded out to the maximum length of your
declared VARCHAR column.

- When your query implicitly generates a temporary table, for instance while
sorting or GROUP BY, this can use a lot of memory. If you use a lot of
VARCHAR(255) fields for data that doesn't need to be that long, this can make
the temporary table very large.

- "padding out" behavior means that a string declared with the utf8 character
  set pads out to three bytes per character even for strings you store with
  single-byte content (e.g. ascii or latin1 characters). And likewise utf8mb4
  character set causes the string to pad out to four bytes per character in
  memory.

- So a VARCHAR(255) in utf8 storing a short string like "No opinion" takes 11
bytes on disk (ten lower-charset characters, plus one byte for length) but it
takes 765 bytes in memory, and thus in temp tables or sorted results.

- It's hard to know what the longest postal address is, of course, which is why
many people choose a long VARCHAR that is certainly longer than any address. And
255 is customary because it is the maximum length of a VARCHAR for which the
length can be encoded with one byte. It was also the maximum VARCHAR length in
MySQL older than 5.0.
[ ---  end  ---- ]

=== [ topic ][ datatype ][ int ][ length ] ===
[ --- start ---- ]
tinyint: 1 byte, 
  == -128 to +127 / 0 to 255 (unsigned)
smallint: 2 bytes, 
  == -32,768 to +32,767 / 0 to 65,535 (unsigned)
mediumint: 3 bytes, 
  == -8,388,608 to 8,388,607 / 0 to 16,777,215 (unsigned)
int/integer: 4 bytes, 
  == -2,147,483,648 to +2,147,483,647 / 0 to 4,294,967,295 (unsigned)
bigint: 8 bytes, 
  == -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 / 
     0 to 18,446,744,073,709,551,615 (unsigned)
[ ---  end  ---- ]

=== [ topic ][ datatype ][ char vs text ] ===
[ --- start ---- ]
TEXT and BLOB is stored off the table with the table just having a pointer to
the location of the actual storage.

VARCHAR is stored inline with the table. VARCHAR is faster when the size is
reasonable, the tradeoff of which would be faster depends upon your data and
your hardware, you'd want to benchmark a realworld scenario with your data.

However, for a large volume of data that is not normally retrieved (that is, not
referenced by any query), then it may be better to not have the data stored
inline. There is an upper limit on the row size, for data stored inline
[ ---  end  ---- ]

=== [ topic ][ datatype ][ bool ] ===
[ --- start ---- ]
BOOL, BOOLEAN
- These types are synonyms for TINYINT(1). 
- A value of zero is considered false.
- Nonzero values are considered true:
- the values TRUE and FALSE are merely aliases for 1 and 0
[ ---  end  ---- ]

=== [ topic ][ control flow function ] ===
[ --- start ---- ]
Title: If
IF(expr1,expr2,expr3)
- if expr1 true then return expr2 else return expr3

mysql> SELECT IF(0 = FALSE, 'true', 'false');
+--------------------------------+
| IF(0 = FALSE, 'true', 'false') |
+--------------------------------+
| true                           |
+--------------------------------+

Title: case
mysql> SELECT CASE 1 WHEN 1 THEN 'one'
    ->     WHEN 2 THEN 'two' ELSE 'more' END;
        -> 'one'
mysql> SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;
        -> 'true'
mysql> SELECT CASE BINARY 'B'
    ->     WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;
        -> NULL
[ ---  end  ---- ]

=== [ topic ][ prepared statement ][ prevent sql injection ] ===
[ --- start ---- ]
- performance benefit as database can cache the preparation of query, making
subsequent use of the same prepared statement faster
- able to prevent SQL injection as it is strongly typed data
- don't quote placeholders, even if their values will be strings

Example :
$q = 'SELECT id, username, type, pass, IF(date_expires >= NOW(), true, false))
    AS expired FROM users WHERE email=?';
$dbc = mysqli_connect (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
$stmt = mysqli_prepare($dbc, $q);
if (!$stmt) echo mysqli_stmt_error($stmt);
mysqli_stmt_bind_param($stmt, 's', $email);
$email = $_POST['email'];
mysqli_stmt_execute($stmt);
/// for UPDATE and INSERT, can confirm a record was affected using
if (mysqli_stmt_affected_rows($stmt) === 1)
/// for SELECT queries, to count the number of returned rows, do this
mysqli_stmt_store_result($stmt);
if(mysqli_stmt_num_rows($stmt) >= 1)
/// release resource
mysqli_stmt_close($stmt);

/// can assign value to variables
mysqli_stmt_store_result($stmt);
if(mysqli_stmt_num_rows($stmt) === 1 ) {
  mysqli_stmt_bind_result($stmt, $id, $username, $type, $pass, $expired);
  mysqli_stmt_fetch($stmt);
}

Example :
$query= "SELECT user_id FROM users WHERE username=? and password=?";	//query definition
	$preparedStatement=$database_connection()->prepare($query);				//prepare the statement
	mysqli_stmt_bind_param($preparedStatement, 'ss', $field1, $field2);		//prepare to bind two Strings (the ss)
	$field1 = $_POST['user'];			//you may want to do more input checking here!
	$field2 = $_POST['pass'];			//you may want to do more input c
[ ---  end  ---- ]

=== [ topic ][ prepare statement ][ topic ] ===
[ --- start ---- ]
Example :
CREATE PROCEDURE test(IN offset INT, IN limit INT)
SET @query = "SELECT * FROM cl_wedding_gowns WHERE publish=1 LIMIT ?, ? ";
SET @a = offset;
SET @b = limit;

PREPARE stmt FROM @query;
EXECUTE stmt USING @a, @b;
DEALLOCATE PREPARE stmt;

Example :
mysql> SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';
mysql> PREPARE stmt2 FROM @s;
mysql> SET @a = 6;
mysql> SET @b = 8;
mysql> EXECUTE stmt2 USING @a, @b;
[ ---  end  ---- ]

=== [ topic ][ stored procedures ] ===
[ --- start ---- ]
Title: Benefits
- improved security
- better performance
    == require less data to be sent to database, just value
    == stored procedures can be cached and managed
- cleaner model-controller separation
    == interface won't need to know what tables and columns exist
    == more logic go into database, removing sql from php code
- increased application portability

- MySQL user need to have permission to CREATE routine, ALTER, and EXECUTE 
  permissions
- no need to tell not null, unsigned etc
- MySQL, by default, uses semicolon to terminate SQL commands
- any use of a semicolon within the procedure's definition will terminate the
  definition itself, the workaround is to change the delimiter prior definition
- to execute, use CALL procedure_name(arguments)

Example :
  $r = mysqli_query("CALL get_product($id)");
  then use mysqli_fetch_array() to get the result


Example :
DELIMITER $$
CREATE PROCEDURE name(arguments datatype, ... )
BEGIN
  CODE
END $$
DELIMITER ;
[ ---  end  ---- ]

=== [ topic ][ stored procedures ][ comment header ] ===
[ --- start ---- ]
Example :
-- =============================================
-- Author:  	Name
-- Create date: 
-- Description: 
-- =============================================

Example 2:
/*<br>
##########################################################################<br>
-- Name : Template.sql<br>
-- Date             : (sysdate) <br>
-- Author           :   
-- Company          :   
-- Purpose          :   <br>
-- Usage        <br>
-- Impact   :<br>
-- Required grants  :   sel on A, upd on B, drop on C<br>
-- Called by        :   some other process<br
##########################################################################<br>
-- ver  user    date        change  <br>
-- 1.0  DDZ 20110622    initial<br>
##########################################################################<br>
*/<br>
[ ---  end  ---- ]

=== [ topic ][ stored procedures ][ comment inner ] ===
[ --- start ---- ]
CREATE TABLE IF NOT EXISTS `pre_authassignment` (
  `itemname` varchar(64) NOT NULL COMMENT '项名称',
  `userid` varchar(64) NOT NULL COMMENT '用户id',
  `bizrule` text COMMENT '业务规则',
  `data` text COMMENT '数据',
  PRIMARY KEY (`itemname`,`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='授权表';
[ ---  end  ---- ]

=== [ topic ][ procedure ][ import ] ===
[ --- start ---- ]
syntax: mysql -u <user> -p<password> databasename < sql-procedure.sql
$ mysql -u tester2 -p"temp123" test_ecommerce2 < ~/sql.sql
MySQL> call stored_procedure_name();

Example :
mysql> source d:/myproject/load_products.sql

DROP PROCEDURE IF EXISTS procedureName;
[ ---  end  ---- ]

=== [ topic ][ procedure ] ===
[ --- start ---- ]
DELIMITER $$
CREATE PROCEDURE select_categories (type VARCHAR(7))
BEGIN
  IF type = 'coffee' THEN
    SELECT * FROM general_coffees ORDER by category;
  ELSEIF type = 'goodies' THEN
    SELECT * FROM non_coffee_categories ORDER by category;
  END IF;
END $$
DELIMITER ;

testing:
CALL select_categories('coffee');
CALL select_categories('goodies');
[ ---  end  ---- ]

=== [ topic ][ procedure ][ use parameter ] ===
[ --- start ---- ]
- An SP cannot be optimized with a dynamic table name, so many DBs, MySQL
included, don't allow table names to be specified dynamically.
- use EXECUTE IMMEDIATE
- or use EXECUTE

Example :
CREATE PROCEDURE test_proc(IN serviceName VARCHAR(10), IN newsInfoTable VARCHAR(100))
BEGIN                  
    EXECUTE IMMEDIATE CONCAT('SELECT COUNT(*) FROM ',newsInfoTable,' WHERE newsServiceName=''', serviceName, ''''); 
END

Example :
CREATE DEFINER=`root`@`localhost` PROCEDURE `test_proc`(IN serviceName VARCHAR(10),IN newsInfoTable VARCHAR(100))
BEGIN                  
    SET @sql = CONCAT('SELECT COUNT(*) FROM ',newsInfoTable,' WHERE newsServiceName=?;'); 
    PREPARE s1 from @sql;
    SET @paramA = serviceName;
    EXECUTE s1 USING @paramA;
    DEALLOCATE PREPARE sl;
END$$
[ ---  end  ---- ]

=== [ topic ][ procedure ][ show ] ===
[ --- start ---- ]
HOW PROCEDURE STATUS;
SHOW FUNCTION STATUS;

show create procedure MY_PROC;
help SHOW;

select name from mysql.proc;

SHOW PROCEDURE STATUS 
WHERE Db = DATABASE() AND Type = 'PROCEDURE'

SELECT * FROM INFORMATION_SCHEMA.ROUTINES
[ ---  end  ---- ]

=== [ topic ][ case ][ topic ] ===
[ --- start ---- ]
Syntax:
13.6.5.1 CASE Syntax
CASE case_value
    WHEN when_value THEN statement_list
    [WHEN when_value THEN statement_list] ...
    [ELSE statement_list]
END CASE
Or:

CASE
    WHEN search_condition THEN statement_list
    [WHEN search_condition THEN statement_list] ...
    [ELSE statement_list]
END CASE

Example :
begin
    select *,
        case _id
        when 0 then 0
        else 1
        end as id
    from table
end
- or - 
begin
    select *, _id != 0 as id
    from table
end

Example :
CREATE PROCEDURE p()
  BEGIN
    DECLARE v INT DEFAULT 1;

    CASE v
      WHEN 2 THEN SELECT v;
      WHEN 3 THEN SELECT 0;
      ELSE
        BEGIN
        END;
    END CASE;
  END;

Example :
set time = time(request_time);    

case  
when time < '09:15:00' && time > '08:15:00' then      
set user_session_id = 1; 

when time < '10:15:00' && time > '11:15:00' then
set user_session_id = 2;  

else set user_session_id =3;

end case; 
[ ---  end  ---- ]

=== [ topic ][ mysqli_fetch ][ MYSQLI_ASSOC ] ===
[ --- start ---- ]
- MYSQLI_ASSOC constant this function will behave identically to the
mysqli_fetch_assoc()

- MYSQLI_ASSOC
   == give relational array
    e.g. :  name => Synook,
	          group => Members
- MYSQL_NUM
   == give numbered array
    e.g. :  1 => Synook,
	          2 => Members

Example : object oriented style
$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = $mysqli->query($query);

/* numeric array */
$row = $result->fetch_array(MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);

/* associative array */
$row = $result->fetch_array(MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);

/* associative and numeric array */
$row = $result->fetch_array(MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);

/* free result set */
$result->free();

/* close connection */
$mysqli->close();

Example : procedural style
$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = mysqli_query($link, $query);

/* numeric array */
$row = mysqli_fetch_array($result, MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);

/* associative array */
$row = mysqli_fetch_array($result, MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);

/* associative and numeric array */
$row = mysqli_fetch_array($result, MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);

/* free result set */
mysqli_free_result($result);

/* close connection */
mysqli_close($link);


[ ---  end  ---- ]

=== [ topic ][ operator ] ===
[ --- start ---- ]
Title: Compare Number
'=' (equal to), 
'<>' or '!=' (not equal to), 
'>' (greater than), 
'<' (less than), 
'>=' (greater than or equal to), 
'<=' (less than or equal to), to compare
CAUTION: Do not compare FLOATs (real numbers) , as they are not precise

Title: String (RegEx)
'abc%'  matches strings beginning with 'abc';
'%xyz'  matches strings ending with 'xyz';
'%aaa%' matches strings containing 'aaa';
'___'   matches strings containing exactly three characters; and
'a_b%'  matches strings beginning with 'a', followed by any single character,
          followed by 'b', followed by zero or more characters.

Title: Arithmetic
+	Addition
-	Subtraction
*	Multiplication
/	Division
DIV	Integer Division
%	Modulus (Remainder)

Title: Logical Operators
AND, OR, NOT, XOR
IN, NOT IN (clearer than AND-OR)
BETWEEN, NOT BETWEEN
IS NULL, IS NOT NULL

- EDIT: IN and NOT IN operators are known to be much faster than the JOIN
operators, as well as much easier to construct, and repeat.
Example :
SELECT * FROM products WHERE name IN ('Pen Red', 'Pen Black');
SELECT * FROM products 
      WHERE (price BETWEEN 1.0 AND 2.0) AND (quantity BETWEEN 1000 AND 2000);
SELECT column FROM table WHERE column NOT IN 
      (SELECT intended_foreign_key FROM another_table);
[ ---  end  ---- ]

=== [ topic ][ language ] ===
[ --- start ---- ]
- use utf8
SET NAMES 'utf8mb4';
INSERT INTO new_table VALUES (1, _utf8mb4'𩾦');

mysql> charset utf8
Charset changed
[ ---  end  ---- ]

=== [ topic ][ raw data ][ load ] ===
[ --- start ---- ]
- The default line delimiteris '\n' (Unix-style). 
  file is prepared in Windows: '\r\n'. 
  For Mac, use LINES TERMINATED BY '\r'.
- The default column delimiter is "tab" 
  (in a so-called TSV file - Tab-Separated Values). 
  If you use another delimiter, e.g. ',', include COLUMNS TERMINATED BY ','.
- You must use \N (back-slash + uppercase 'N') for NULL.

Example :
@@@ product_in.csv:
\N,PEC,Pencil 3B,500,0.52
\N,PEC,Pencil 4B,200,0.62
\N,PEC,Pencil 5B,100,0.73
\N,PEC,Pencil 6B,500,0.47

mysql> LOAD DATA LOCAL INFILE 'd:/path-to/products_in.csv' INTO TABLE products
         COLUMNS TERMINATED BY ','
         LINES TERMINATED BY '\r\n';

Example :
-- Syntax
> mysqlimport -u username -p --local databaseName tableName.tsv
   -- The raw data must be kept in a TSV file of filename the same as tablename
> mysqlimport --help
 
-- Example
> mysqlimport -u username -p --local southwind d:/myproject/products_in.tsv

[ ---  end  ---- ]

=== [ topic ][ raw data ][ export ] ===
[ --- start ---- ]
SELECT ... INTO OUTFILE fileName FROM tableName 
  - to export data from a table to a text file. 

Example :
mysql> SELECT * FROM products INTO OUTFILE 'd:/path-to/products_out.csv' 
         COLUMNS TERMINATED BY ','
         LINES TERMINATED BY '\r\n';
[ ---  end  ---- ]

=== [ topic ][ autocommit ][ transaction ] ===
[ --- start ---- ]
- autocommit variable is local to a single session

Example :
set autocommit=0;
update xxx;
commit;
set autocommit=1;

Example :
start transaction
update xx
commit; /// actual commit take places
[ ---  end  ---- ]

=== [ topic ][ to learn ] ===
[ --- start ---- ]
EXPLAIN PARTITIONS SELECT * FROM statistics WHERE user_id = 1\G
UPDATE column which is FOREIGN KEY
FOREIGN KEY vs KEY
[ ---  end  ---- ]

=== [ topic ][ datatype ] ===
[ --- start ---- ]
DATE  - displays DATE values in 'YYYY-MM-DD' format.
DATETIME - displays DATETIME values in 'YYYY-MM-DD HH:MM:SS' format
         - range: '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.
TIMESTAMP - range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.
          - converts values from the current time zone to UTC for storage 
          - converts back from UTC to the current time zone for retrieval
          - This does not occur for other types such as DATETIME.
[ ---  end  ---- ]

=== [ topic ][ help ][  ] ===
[ --- start ---- ]
> ?
> help
> help contents
> help Data Definition
[ ---  end  ---- ]

=== [ topic ][ phpmyadmin ] ===
[ --- start ---- ]
underline : index
dotted line: column with comment
[ ---  end  ---- ]

=== [ topic ][ debug ][ prepared statement ] ===
[ --- start ---- ]
SET @table_name = "mytable";
SET @query = CONCAT("SELECT * from ", @table_name);
SELECT @query;

[ ---  end  ---- ]

=== [ topic ][ debug ][ session variable debug ] ===
[ --- start ---- ]
SET @counter := 0;
SET @msg := '';

CREATE FUNCTION debugger() RETURNS INT
BEGIN
  SELECT @counter + 1 INTO @counter;
  SELECT CONCAT('[Debug #',@counter,']') INTO @msg;
  RETURN 1;
END;
$$

SELECT debugger();
SELECT @msg;
[ ---  end  ---- ]

=== [ topic ][ debug ][ temp table ] ===
[ --- start ---- ]
SET @counter := 0;
CREATE TABLE debugger ( 
  id INT NOT NULL AUTO_INCREMENT,
  time_now DATETIME,
  query_comment CHAR(200),
) 
ENGINE=MEMORY;

CREATE FUNCTION debugger() RETURNS INT
BEGIN
  SELECT @counter + 1 INTO @counter;
  INSERT INTO debugger VALUES (CONCAT('[Debug #',@counter,']'));
  RETURN 1;
END;
$$

SELECT debugger();
SELECT debugger();
SELECT debugger();
SELECT debug_comment FROM debugger;
[ ---  end  ---- ]

=== [ topic ][ debug ][ enable log!! ] ===
[ --- start ---- ]
sudo vim /etc/mysql/my.cnf
uncomment following line
general_log_file        = /var/log/mysql/mysql.log
general_log             = 1
sudo service mysql restart
[ ---  end  ---- ]

=== [ topic ][ problem ][ not able to add foreign key ] ===
[ --- start ---- ]
- check if any discrepancy
SELECT column FROM table WHERE column NOT IN 
(SELECT intended_foreign_key FROM another_table)
[ ---  end  ---- ]

=== [ topic ][ problem ][ update value based on another column ] ===
[ --- start ---- ]
http://dev.mysql.com/doc/en/data-type-defaults.html

CREATE TRIGGER foo AFTER INSERT ON TSM_TRANSACTION_TBL FOR EACH ROW
  IF NEW.REMAINING IS NULL THEN
    SET NEW.REMAINING := NEW.MAX_VALUE - NEW.BOOKED_UNITS;
  END IF;;
[ ---  end  ---- ]

=== [ topic ][ problem ][ Commands out of sync ] ===
[ --- start ---- ]
Desc: This error results when you terminate your query with a semicolon
delimiter inside the application. 
Solution: 

[ ---  end  ---- ]

=== [ topic ][ security ] ===
[ --- start ---- ]
Title: Privileges
non-login user: 
  == SELECT
login user:
  == carts, wish-list
    *** SELECT, INSERT, UPDATE, DELETE

- test with wrong user password, see if everything thrown up
[ ---  end  ---- ]
