=== [ topic ][ login ] ===
[ --- start ---- ]
mysql -h host -u user -p
/// from same machine then can omit host
mysql -u root -p
quit
[ ---  end  ---- ]

=== [ topic ][ database ][ design ][ normalizing ] ===
[ --- start ---- ]
- use the smallest possible column types
- avoid storing null values as much as possible
- use numeric coluns as much as possible
- use fixed-length columns when you can
- provide default values for columns, if applicable
[ ---  end  ---- ]

=== [ topic ][ database ][ performance ][ indexing ] ===
[ --- start ---- ]
- index columns that will be involved in where and order by clauses
- avoid indexing columns that allow null values
- apply length restriction to indexes on variable-length columns, such as
  indexing only the first 10 characterrs of a person's last name
- use EXPLAIN queries to confirm that indexes are being used
- revisit your indexes after some period of site activity to ensure they're
  still appropriate
[ ---  end  ---- ]

=== [ topic ][ performance ][ admin ] ===
[ --- start ---- ]
- back_log
- key_buffer_size
- max_connections
- thread_cache_size
[ ---  end  ---- ]

=== [ topic ][ storage engine ] ===
[ --- start ---- ]
InnoDB and MyISAM
- InnoDB is perferred and default for MySQL, excellent fail-safe in sensitive
situations
[ ---  end  ---- ]

=== [ topic ][ databases ][ switching table ] ===
[ --- start ---- ]
mysql
show databases;
show tables;
USE test;
use wordpress;
[ ---  end  ---- ]

=== [ topic ][ naming ][ back-quoted ] ===
[ --- start ---- ]
Back-Quoted Identifiers (`name`)
[ ---  end  ---- ]

=== [ topic ][ comment ] ===
[ --- start ---- ]
MySQL multi-line comments are enclosed within /* and */; 
end-of-line comments begins with -- (followed by a space) or #.
[ ---  end  ---- ]

=== [ topic ][ version ] ===
[ --- start ---- ]
SELECT version()
[ ---  end  ---- ]

=== [ topic ][ database ][ use ] ===
[ --- start ---- ]
- set which database to use
> use mysql;

- to check currently used database
> select database();

- to use table not currently in used, then need to use fully qualified name of
the table, e.g. database3.table2
[ ---  end  ---- ]

=== [ topic ][ database ][ create ][ drop ] ===
[ --- start ---- ]
CREATE DATABASE IF NOT EXISTS southwind;
DROP DATABASE IF EXISTS southwind;

Title: Show Create
-  to display the full command and check these default values
> SHOW CREATE DATABASE southwind \G
*************************** 1. row ***************************
       Database: southwind
Create Database: CREATE DATABASE `southwind` /*!40100 DEFAULT CHARACTER SET
latin1 */
[ ---  end  ---- ]

=== [ topic ][ database ][ backup ] ===
[ --- start ---- ]
backup: # mysqldump -u root -p[root_password] [database_name] > dumpfilename.sql
restore:# mysql -u root -p[root_password] [database_name] < dumpfilename.sql

Title: Backup multiple databases
# mysqldump -u root -ptmppassword --databases database1 database2 > backup.sql
# grep -i "Current database:" backup.sql
-- Current Database: `database1`
-- Current Database: `database2`

Title: Backup all databases
# mysqldump -u root -ptmppassword --all-databases > /tmp/all-database.sql

Title: Backup particular table from a database
# mysqldump -u root -ptmppassword database1 table1 > backup-table1.sql

Title: Restore
# mysqldump -u root -ptmppassword database1 table1 < backup-table1.sql

Title: Backup and Restore remotely
# mysqldump -u root -ptmppassword sugarcrm | mysql \
                 -u root -ptmppassword --host=remote-server -C sugarcrm1
[ ---  end  ---- ]

=== [ topic ][ permission ] ===
[ --- start ---- ]
mysql> GRANT ALL ON menagerie.* TO 'your_mysql_name'@'your_client_host';
[ ---  end  ---- ]

=== [ topic ][ basic ] ===
[ --- start ---- ]
- letter insensitive
select user();
[ ---  end  ---- ]

=== [ topic ][ math ] ===
[ --- start ---- ]
SELECT SIN(PI()/4), (4+1)*5;
[ ---  end  ---- ]

=== [ topic ][ example ] ===
[ --- start ---- ]
SELECT * FROM my_table WHERE name = 'Smith AND age < 30;
[ ---  end  ---- ]

=== [ topic ][ version ] ===
[ --- start ---- ]
SELECT VERSION(), CURRENT_DATE;
[ ---  end  ---- ]

=== [ topic ][ table ][ create ] ===
[ --- start ---- ]
create table customrs(FirstName Char(30), lastname char(30), age int);
CREATE TABLE example( 
  id INT NOT NULL AUTO_INCREMENT, 
  name VARCHAR(30), 
  age INT,
  PRIMARY KEY(id)
  );
[ ---  end  ---- ]

=== [ topic ][ table ][ create ][ enum ] ===
[ --- start ---- ]
- restrict the value of a column
- can't have any operation inside, only literal string is allowed

Example :
CREATE TABLE sizes ( name ENUM('small', 'medium', 'large'));
/// error on below
CREATE TABLE sizes ( c1 ENUM('small', CONCAT('med','ium'), 'large'));
/// error on below
SET @mysize = 'medium';
CREATE TABLE sizes ( name ENUM('small', @mysize, 'large'));

in mysqlite:
create table MyTable
( name string check(name = "car" or name = "bike" or name = "van"));
[ ---  end  ---- ]

=== [ topic ][ insert ] ===
[ --- start ---- ]
insert into customrs values ("Ken", "Ng", 30);

- multiple insert
insert into `table_name` (`column1`, `column2`) values
(val1, val2), (pair2-val1, pair2-val2), (pair3-val1, pair3-val2)
[ ---  end  ---- ]

=== [ topic ][ select ] === 
[ --- start ---- ]
select * from customrs;
SELECT column_name,column_name FROM table_name;

- only return distinct (unique )
select distinct COLUMN_NAME,COLUMN_NAME from TABLE_NAME;
[ ---  end  ---- ]

=== [ topic ][ select ][ vertical ] ===
[ --- start ---- ]
- beautifier the select, show result vertically
select * from user where user="xinying"\G;

mysql> pager less -SFX
mysql> SELECT * FROM sometable;

Title: saving output
echo 'desc table_name' | mysql -uroot database -t
mysql -uroot table_name --table < /tmp/somequery.sql
[ ---  end  ---- ]

=== [ topic ][ select ][ where ] ===
[ --- start ---- ]
select column_name,column_name from table_name where column_name operator value;
Example 1:
SELECT * FROM Customers WHERE Country='Mexico';
SELECT * FROM Customers WHERE CustomerID=1;

- where operator
=	Equal
<>	Not equal. Note: In some versions of SQL this operator may be written as !=
>	Greater than
<	Less than
>=	Greater than or equal
<=	Less than or equal
BETWEEN	Between an inclusive range
LIKE	Search for a pattern
IN	To specify multiple possible values for a column

[ ---  end  ---- ]

=== [ topic ][ select ][ two table ] ===
[ --- start ---- ]
SELECT a.playerid,a.pla_lname,pla_fname,b.teamname FROM players a,teams b WHERE
a.teamid=b.teamid;

SELECT a.playerid,a.pla_lname,pla_fname,b.teamname FROM players a INNER JOIN
teams b ON a.teamid=b.teamid;
[ ---  end  ---- ]

=== [ topic ][ select ][ union ] ===
[ --- start ---- ]
- mysql don't have full join, can be simulate with union

Example :
SELECT CONCAT("G", ncp.id) AS sku, sa.price AS sale_price, ncc.category,
       ncp.image, ncp.name, ncp.price AS price, ncp.stock, ncp.description
FROM sales AS sa
  INNER JOIN non_coffee_products AS ncp ON sa.product_id=ncp.id
  INNER JOIN non_coffee_categories AS ncc ON ncc.id=ncp.non_coffee_category_id
    WHERE sa.product_type="goodies" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))

UNION
SELECT CONCAT("C", sc.id), sa.price, gc.category, gc.image, CONCAT_WS("-",
       s.size, sc.caf_decaf, sc.ground_whole), sc.price, sc.stock, 
       gc.description 
FROM sales AS sa
  INNER JOIN specific_coffees AS sc ON sa.product_id=sc.id
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE sa.product_type="coffee" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL));
 

Example : simulate full outer join with union
DROP TABLE IF EXISTS `example`.`table1`;
CREATE TABLE  `example`.`table1` (
  `id` int(10) unsigned NOT NULL default '0',
  `value` varchar(45) NOT NULL default ''
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO table1 VALUES (1, 'a'), (2, 'c'), (3, 'e');

DROP TABLE IF EXISTS `example`.`table2`;
CREATE TABLE  `example`.`table2` (
  `id` int(10) unsigned NOT NULL default '0',
  `value2` varchar(45) NOT NULL default ''
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO table2 VALUES (1, 'b'), (3, 'd'), (4, 'f');

SELECT t1.id,
           t1.value,
           t2.value2 
      FROM table1 t1
 LEFT JOIN table2 t2 ON t2.id = t1.id
UNION
    SELECT t2.id,
           t1.value,
           t2.value2
      FROM TABLE1 t1
RIGHT JOIN TABLE2 t2 ON t2.id = t1.id;
[ ---  end  ---- ]

=== [ topic ][ select ][ limit ] ===
[ --- start ---- ]
Example :
SELECT CONCAT("G", ncp.id) AS sku, sa.price AS sale_price, ncc.category,
       ncp.image, ncp.name, ncp.price AS price, ncp.stock, ncp.description
FROM sales AS sa
  INNER JOIN non_coffee_products AS ncp ON sa.product_id=ncp.id
  INNER JOIN non_coffee_categories AS ncc ON ncc.id=ncp.non_coffee_category_id
    WHERE sa.product_type="goodies" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))
  ORDER BY RAND() LIMIT 2

UNION
SELECT CONCAT("C", sc.id), sa.price, gc.category, gc.image, CONCAT_WS("-",
       s.size, sc.caf_decaf, sc.ground_whole), sc.price, sc.stock, 
       gc.description 
FROM sales AS sa
  INNER JOIN specific_coffees AS sc ON sa.product_id=sc.id
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE sa.product_type="coffee" AND
    ((NOW() BETWEEN sa.start_date AND sa.end_date) OR
    (NOW() > sa.start_date AND sa.end_date IS NULL))
  ORDER BY RAND() LIMIT 2;
[ ---  end  ---- ]

=== [ topic ][ sql ][ join ] ===
[ --- start ---- ]
- join has higher precedence than comma (,)
  == e.g. t1, t2 join t3 ==> (t1, (t2 join t3))
  thus this statement will throw error on unknown column of t1.i1
  select * from t1, t2 join t3 on (t1.i1 = t3.i3);
- correct join usage
  select * from (t1, t2) join t3 on (t1.i1 = t3.i3);
  - or -
  select * from t1 oin t2 join t3 on (t1.i1 = t3.i3);

Example :
select gc.description, gc.image, CONCAT("C", sc.id) AS sku,
  CONCAT_WS(" - ", s.size, sc.caf_decaf, sc.ground_whole, 
  CONCAT("$", FORMAT(sc.price/100, 2))) AS name, sc.stock
    FROM
  specific_coffees AS sc 
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
    WHERE
  general_coffee_id=3 AND stock > 0
    ORDER by name ASC;
Example : to check for sales price as well
select gc.description, gc.image, CONCAT("C", sc.id) AS sku,
  CONCAT_WS(" - ", s.size, sc.caf_decaf, sc.ground_whole, 
  CONCAT("$", FORMAT(sc.price/100, 2))) AS name, sc.stock
  sc.price, sales.price AS sale_price
FROM specific_coffees AS sc 
  INNER JOIN sizes AS s ON s.id=sc.size_id
  INNER JOIN general_coffees AS gc ON gc.id=sc.general_coffee_id
  /// if there is not sales price, the sales.price will be null
  LEFT OUTER JOIN sales ON 
    (sales.product_id=sc.id AND sales.product_type='coffee' AND 
      ((NOW() BETWEEN sales.start_date AND sales.end_date) OR
        (NOW() > sales.start_date AND sales.end_date IS NULL)
      )
    )
    WHERE general_coffee_id=3 AND stock > 0
    ORDER by name ASC;

Example :
CREATE TABLE t1 (i1 INT, j1 INT);
CREATE TABLE t2 (i2 INT, j2 INT);
CREATE TABLE t3 (i3 INT, j3 INT);
INSERT INTO t1 VALUES(1,1);
INSERT INTO t2 VALUES(1,1);
INSERT INTO t3 VALUES(1,1);
SELECT * FROM t1, t2 JOIN t3 ON (t1.i1 = t3.i3);

Previously, the SELECT was legal due to the implicit grouping of t1,t2 as
(t1,t2). Now the JOIN takes precedence, so the operands for the ON clause are t2
and t3. Because t1.i1 is not a column in either of the operands, the result is
an Unknown column 't1.i1' in 'on clause' error. To allow the join to be
processed, group the first two tables explicitly with parentheses so that the
operands for the ON clause are (t1,t2) and t3:

Example :
create table a (id int);
create table b (type int);
insert into a (id) values (1), (2), (3), (4);
insert into b (type) values (3), (4), (5), (6);

// inner join = intersect of a and b
select * from a inner join b on a.id=b.type;
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
+------+------+

/// everything of left and intersect of a and b
select * from a left outer join b on (a.id=b.type);
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
|    1 | NULL |
|    2 | NULL |
+------+------+

select * from a right outer join b on (a.id=b.type);
+------+------+
| id   | type |
+------+------+
|    3 |    3 |
|    4 |    4 |
| NULL |    5 |
| NULL |    6 |
+------+------+

select * from a join b;
+------+------+
| id   | type |
+------+------+
|    1 |    3 |
|    2 |    3 |
|    3 |    3 |
|    4 |    3 |
|    1 |    4 |
|    2 |    4 |
|    3 |    4 |
|    4 |    4 |
|    1 |    5 |
|    2 |    5 |
|    3 |    5 |
|    4 |    5 |
|    1 |    6 |
|    2 |    6 |
|    3 |    6 |
|    4 |    6 |
+------+------+
[ ---  end  ---- ]

=== [ topic ][ SQL ][ concat ] ===
[ --- start ---- ]
- CONCAT(str1,str2,...)
  == concatenate all string together
     e.g. SELECT CONCAT('My', 'S', 'QL');   -> 'MySQL'
select CONCAT("C", sc.id) AS sku 
  FROM table_name AS sc;

- CONCAT_WS(separator,str1,str2,...)
  == concatenate all str1, str2... with separator
     e.g. SELECT CONCAT_WS(',','First name','Second name','Last Name');
      -> 'First name,Second name,Last Name'
     e.g. SELECT CONCAT_WS(',','First name',NULL,'Last Name');
        -> 'First name,Last Name'
  == CONCAT_WS() does not skip empty strings. However, it does skip any NULL
  values after the separator argument.
  
[ ---  end  ---- ]

=== [ topic ][ SQL ][ FORMAT ] ===
[ --- start ---- ]
mysql> SELECT FORMAT(12332.123456, 4);
        -> '12,332.1235'
mysql> SELECT FORMAT(12332.1,4);
        -> '12,332.1000'
mysql> SELECT FORMAT(12332.2,0);
        -> '12,332'
[ ---  end  ---- ]

=== [ topic ][ order by ] ===
[ --- start ---- ]
ORDER by name ASC;
ORDER by date_created DESC;
[ ---  end  ---- ]

=== [ topic ][ limit ] ===
[ --- start ---- ]
ORDER BY RAND() LIMIT 2;
[ ---  end  ---- ]

=== [ topic ][ delete ] ===
[ --- start ---- ]
- delete from table where xxx=yyy;

delete from user where user="testing";
[ ---  end  ---- ]

=== [ topic ][ GUI ] ===
[ --- start ---- ]
MySQL Workbench
phpMyAdmin which I found a bit slow
Navicat which is a windows port and runs under wine
linux native version of navicat.
MySQL Workbench Install mysql-workbench is probably the most complete tool, but a bit sluggish according to me.
I prefer "MySQL Query browser" and "MySQL Administrator". 
I like Emma. Emma is an open source project that isn't developed by Oracle
SQLYog to this list anyway since it is such a powerful tool... There is no 
official build available for Linux but it works quite well on Wine.
[ ---  end  ---- ]

=== [ topic ][ reset password ] ===
[ --- start ---- ]
$ su
$ service mysql stop
$ mysqld_safe --skip-grant-tables &
$ mysql -u root

MariaDB [(none)]> use mysql;
MariaDB [(none)]> update user set password=PASSWORD("NEWPASSWORD") where
User='root';
MariaDB > flush privileges;
Query OK, 0 rows affected (0.00 sec) 
MariaDB [(none)]> exit; 

$ service mysql restart
$ mysql -u root -p
[ ---  end  ---- ]

=== [ topic ][ create user ] ===
[ --- start ---- ]
- Each time you update or change a permission be sure to use the Flush
  Privileges command. 

Title: Syntax
GRANT [type of permission] ON [database name].[table name] TO ‘[username]’
@'localhost’;
    == Type of permission:
      ALL PRIVILEGES
      CREATE- allows them to create new tables or databases
      DROP- allows them to them to delete tables or databases
      DELETE- allows them to delete rows from tables
      INSERT- allows them to insert rows into tables
      SELECT- allows them to use the Select command to read through databases
      UPDATE- allow them to update table rows
      GRANT OPTION- allows them to grant or remove other users' privileges

REVOKE [type of permission] ON [database name].[table name] FROM ‘[username]’
@‘localhost’;

DROP USER ‘demo’@‘localhost’;

Example :
create user username@"Ideapad-Lenovo" identified by 'password';
/// sometimes the hostname is not resolved by server, use ip instead
create user username@'192.168.1.1200' identified by 'password';
GRANT ALL ON databaseName.* TO 'your_mysql_name'@'your_client_host';
flush privileges;
[ ---  end  ---- ]

=== [ topic ][ table ][ create ] ===
[ --- start ---- ]
CREATE TABLE aTable ( ...
) ENGINE=InnoDB DEFAULT CHARACTER SET=utf8;

- or - is same

CREATE TABLE aTable ( ...
) ENGINE=InnoDB CHARACTER SET=utf8;

syntax:
table_option:
    ENGINE [=] engine_name
  ... other options ...
  | [DEFAULT] CHARACTER SET [=] charset_name
[ ---  end  ---- ]

=== [ topic ][ table ][ show all ] ===
[ --- start ---- ]
> show tables;
[ ---  end  ---- ]

=== [ topic ][ table ][ describe ] ===
[ --- start ---- ]
- show the table information, like type, null, primary key etc

> describe mytable;
[ ---  end  ---- ]

=== [ topic ][ table ][ alter ][ add column ] ===
[ --- start ---- ]
- Original table:
assessmentid | q1 | q2 | q3 | q4 | q5 

ALTER TABLE yourtable ADD q6 VARCHAR( 255 ) after q5
- new table:
assessmentid | q1 | q2 | q3 | q4 | q5 | q6
[ ---  end  ---- ]

=== [ topic ][ table ][ alter ][ modify ] ===
[ --- start ---- ]
alter table product_catalogue modify category char(20) not null
[ ---  end  ---- ]

=== [ topic ][ primary key ] ===
[ --- start ---- ]
MySQL unique keys can be NULL whereas primary keys cannot be
[ ---  end  ---- ]

=== [ topic ][ foreign key ] ===
[ --- start ---- ]
- foreign key ("column name") references "referenced-table-name"
("column-name-in-reference table")
- on delete cascade, delete this column when referenced-table id got deleted?

CREATE TABLE IF NOT EXISTS `feeds` (
  `Feed_ID` int(11) NOT NULL,
  `Feed_Name` varchar(32) NOT NULL,
  `Feed_Url` varchar(255) NOT NULL,
  PRIMARY KEY (`Feed_ID`)
)

CREATE TABLE IF NOT EXISTS `feeditems` (
  `FeedItem_ID` int(11) NOT NULL,
  `Feed_ID` int(11) NOT NULL,
  `FeedItem_Date` datetime NOT NULL,
  `FeedItem_Title` varchar(255) NOT NULL,
  `FeedItem_Url` varchar(255) NOT NULL,
  `FeedItem_Name` varchar(255) NOT NULL,
  PRIMARY KEY (`FeedItem_ID`),
  FOREIGN KEY (`Feed_ID`) REFERENCES `feeds`(`Feed_ID`)
                      ON DELETE CASCADE
)
[ ---  end  ---- ]

=== [ topic ][ table ][ unique ] ===
[ --- start ---- ]
- NULL is treated as a unique value — which is why you cannot use comparisons
such as value = NULL and need to use value IS NULL
- ensure no two records have the same country, area, number and extension
DROP TABLE IF EXISTS `phone`;
 
CREATE TABLE `phone` (
    `id` MEDIUMINT(8) UNSIGNED NOT NULL AUTO_INCREMENT,
    `country` DECIMAL(5,0) UNSIGNED NOT NULL,
    `area` DECIMAL(5,0) UNSIGNED NOT NULL,
    `number` DECIMAL(8,0) UNSIGNED NOT NULL,
    `extension` DECIMAL(5,0) UNSIGNED DEFAULT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `ix_phone` (`country`, `area`, `number`, `extension`),
) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;

try insert:
INSERT INTO `phone`
(`country`, `area`, `number`, `extension`)
(44, 9876, 54321, 42);

resulted error:
Error Code: 1062
Duplicate entry '44-9876-54321-42' for key 'ix_phone'

try insert: (no error, as default null is considered as unique)
INSERT INTO `phone`
(`country`, `area`, `number`)
(1, 234, 567890);
[ ---  end  ---- ]

=== [ topic ][ connect ][ remote ] ===
[ --- start ---- ]
sudo nano /etc/mysql/my.cnf
bind-address = 127.0.0.1
bind-address = 0.0.0.0
/etc/init.d/mysql restart
netstat -tnl | grep 3306
tcp        0      0 0.0.0.0:3306          0.0.0.0:*               LISTEN
[ ---  end  ---- ]

=== [ topic ][ tutorial ] ===
[ --- start ---- ]
Title: Create
CREATE TABLE `products` (
  `productID`    int(10) unsigned  NOT NULL AUTO_INCREMENT,
  `productCode`  char(3)           NOT NULL DEFAULT '',
  `name`         varchar(30)       NOT NULL DEFAULT '',
  `quantity`     int(10) unsigned  NOT NULL DEFAULT '0',
  `price`        decimal(7,2)      NOT NULL DEFAULT '99999.99',
  PRIMARY KEY (`productID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1

Title: Insert
// need to specify the first primary_key for the first time?
> INSERT INTO products VALUES (1001, 'PEN', 'Pen Red', 5000, 1.23);
// subsequent primary key can be use null, mysql will auto-increment
> INSERT INTO products VALUES
         (NULL, 'PEN', 'Pen Blue',  8000, 1.25),
         (NULL, 'PEN', 'Pen Black', 2000, 1.25);
> INSERT INTO products (productCode, name, quantity, price) VALUES
         ('PEC', 'Pencil 2B', 10000, 0.48),
         ('PEC', 'Pencil 2H', 8000, 0.49);
> INSERT INTO products (productCode, name) VALUES ('PEC', 'Pencil HB');

Title: Select
SELECT name, price FROM products;
SELECT * FROM products;

SELECT 1+1;
SELECT NOW();  // show time
SELECT 1+1, NOW();
[ ---  end  ---- ]

=== [ topic ][ php ][ connect ] ===
[ --- start ---- ]
<?php
    mysql_connect("your.database.host", "your-user-name", "your-password")
        or die ("<p> Error connecting to databases: ". mysql_error(). "</p>");

    echo "Connected to database!"
?>
[ ---  end  ---- ]

=== [ topic ][ php ][ select ] ===
[ --- start ---- ]
<? 
    mysql_select_db("your_database_name")
        or die(" Error in selecting database". mysql_error() );
    echo "selected database!";
?>
[ ---  end  ---- ]

=== [ topic ][ php ][ query ] ===
[ --- start ---- ]
    $result = mysql_query("SHOW TABLES;");

    // if ( false === $result) {  
    // - or -
    if (!$result){
        die ("Error in query ". mysql_error());
    }

    echo " table in database ";
    echo "<ul>";
    while ($row = mysql_fetch_row($result)){
        echo "<li>".$row[0]."</li>"
    }
    echo "</ul>"
[ ---  end  ---- ]

=== [ topic ][ abstracting info ] ===
[ --- start ---- ]
@@@ app_config.php:
<?php
    $database_hot = "your.database.host";
    $username = "your-username";
    $password = "password";
    $database_name = "your.database.name"; ?>

@@@ normal_usage.php:
<?php
    require '../app_config.php'; 
    ...
?>
[ ---  end  ---- ]

=== [ topic ][ constant ] ===
[ --- start ---- ]

@@@ app_config.php:
<?php
    define("DATABASE_HOST", "your.database.host");
    define("DATABASE_USERNAME", "your-username");
    define("DATABASE_PASSWORD","password");
    define("DATABASE_NAME", "your.database.name"; ?>

@@@ normal_usage.php:
<?php
    require '../app_config.php'; 
    
    echo "connect to mysql, using database = ". DATABASE_NAME
?>
[ ---  end  ---- ]

=== [ topic ][ datatype ][ text type ][ length ] ===
[ --- start ---- ]
 Type | Maximum length
-----------+-------------------------------------
  TINYTEXT |           255 (2 8−1) bytes
      TEXT |        65,535 (216−1) bytes = 64 KiB
MEDIUMTEXT |    16,777,215 (224−1) bytes = 16 MiB
  LONGTEXT | 4,294,967,295 (232−1) bytes =  4 GiB
[ ---  end  ---- ]

=== [ topic ][ datatype ][ length ] ===
[ --- start ---- ]
- INT(x), x is the "display width" 
    ==  display width does not constrain [or expand] the range of 
        values that can be stored in the column.
[ ---  end  ---- ]

=== [ topic ][ datatype ][ zerofilled ] ===
[ --- start ---- ]
- ZEROFILL pads the displayed value of the field with zeros up to the display
  width specified in the column definition.
- Values longer than the display width are not truncated. not affect the size.
- ZEROFILL also implies UNSIGNED.

Example :
CREATE TABLE yourtable (x INT(8) ZEROFILL NOT NULL, y INT(8) NOT NULL);
INSERT INTO yourtable (x,y) VALUES
(1, 1),
(12, 12),
(123, 123),
(123456789, 123456789);

SELECT x, y FROM yourtable;
        x          y
 00000001          1
 00000012         12
 00000123        123
123456789  123456789
[ ---  end  ---- ]

=== [ topic ][ datatype ][ char ][ length ] ===
[ --- start ---- ]
- CHAR length: 0-255
  == trailing spaces are removed

- VARCHAR length: 0 - 65,535 (max up to). 
  == 65,535 is max row size and is shared by all columns
  == prefix with 1-2 bytes which indicates the length of string
    *** 1 byte if length is less than 255
    *** 2 bytes prefix is used when length is more than 255
  == trailing spaces are not removed

=============================================================================
Value      CHAR(4) "Storage Required" VARCHAR(4) "Storage Required"
=============================================================================
''         '    '  "4 bytes"          ''         "1 byte"
'ab'       'ab  '  "4 bytes"          'ab'       "3 bytes"
'abcd'     'abcd'  "4 bytes"          'abcd'     "5 bytes"
'abcdefgh' 'abcd'  "4 bytes"          'abcd'     "5 bytes"
-----------------------------------------------------------------------------

Example : trailing space demo of CHAR and VARCHAR
mysql> CREATE TABLE vc (v VARCHAR(4), c CHAR(4));
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO vc VALUES ('ab  ', 'ab  ');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT CONCAT('(', v, ')'), CONCAT('(', c, ')') FROM vc;
+---------------------+---------------------+
| CONCAT('(', v, ')') | CONCAT('(', c, ')') |
+---------------------+---------------------+
| (ab  )              | (ab)                |
+---------------------+---------------------+

Example : CHAR comparison
mysql> CREATE TABLE names (myname CHAR(10));
Query OK, 0 rows affected (0.03 sec)

mysql> INSERT INTO names VALUES ('Monty');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT myname = 'Monty', myname = 'Monty  ' FROM names;
+------------------+--------------------+
| myname = 'Monty' | myname = 'Monty  ' |
+------------------+--------------------+
|                1 |                  1 |
+------------------+--------------------+
1 row in set (0.00 sec)

/// for like, trailing space is significant
mysql> SELECT myname LIKE 'Monty', myname LIKE 'Monty  ' FROM names;
+---------------------+-----------------------+
| myname LIKE 'Monty' | myname LIKE 'Monty  ' |
+---------------------+-----------------------+
|                   1 |                     0 |
+---------------------+-----------------------+
[ ---  end  ---- ]

=== [ topic ][ datatype ][ int ][ length ] ===
[ --- start ---- ]
tinyint: 1 byte, 
  == -128 to +127 / 0 to 255 (unsigned)
smallint: 2 bytes, 
  == -32,768 to +32,767 / 0 to 65,535 (unsigned)
mediumint: 3 bytes, 
  == -8,388,608 to 8,388,607 / 0 to 16,777,215 (unsigned)
int/integer: 4 bytes, 
  == -2,147,483,648 to +2,147,483,647 / 0 to 4,294,967,295 (unsigned)
bigint: 8 bytes, 
  == -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 / 
     0 to 18,446,744,073,709,551,615 (unsigned)
[ ---  end  ---- ]

=== [ topic ][ datatype ][ char vs text ] ===
[ --- start ---- ]
TEXT and BLOB is stored off the table with the table just having a pointer to
the location of the actual storage.

VARCHAR is stored inline with the table. VARCHAR is faster when the size is
reasonable, the tradeoff of which would be faster depends upon your data and
your hardware, you'd want to benchmark a realworld scenario with your data.

However, for a large volume of data that is not normally retrieved (that is, not
referenced by any query), then it may be better to not have the data stored
inline. There is an upper limit on the row size, for data stored inline
[ ---  end  ---- ]

=== [ topic ][ datatype ][ bool ] ===
[ --- start ---- ]
BOOL, BOOLEAN
- These types are synonyms for TINYINT(1). 
- A value of zero is considered false.
- Nonzero values are considered true:
- the values TRUE and FALSE are merely aliases for 1 and 0
[ ---  end  ---- ]

=== [ topic ][ control flow function ] ===
[ --- start ---- ]
Title: If
IF(expr1,expr2,expr3)
- if expr1 true then return expr2 else return expr3

mysql> SELECT IF(0 = FALSE, 'true', 'false');
+--------------------------------+
| IF(0 = FALSE, 'true', 'false') |
+--------------------------------+
| true                           |
+--------------------------------+

Title: case
mysql> SELECT CASE 1 WHEN 1 THEN 'one'
    ->     WHEN 2 THEN 'two' ELSE 'more' END;
        -> 'one'
mysql> SELECT CASE WHEN 1>0 THEN 'true' ELSE 'false' END;
        -> 'true'
mysql> SELECT CASE BINARY 'B'
    ->     WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;
        -> NULL
[ ---  end  ---- ]

=== [ topic ][ prepared statement ][ prevent sql injection ] ===
[ --- start ---- ]
- performance benefit as database can cache the preparation of query, making
subsequent use of the same prepared statement faster
- able to prevent SQL injection as it is strongly typed data
- don't quote placeholders, even if their values will be strings

Example :
$q = 'SELECT id, username, type, pass, IF(date_expires >= NOW(), true, false))
    AS expired FROM users WHERE email=?';
$dbc = mysqli_connect (DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
$stmt = mysqli_prepare($dbc, $q);
if (!$stmt) echo mysqli_stmt_error($stmt);
mysqli_stmt_bind_param($stmt, 's', $email);
$email = $_POST['email'];
mysqli_stmt_execute($stmt);
/// for UPDATE and INSERT, can confirm a record was affected using
if (mysqli_stmt_affected_rows($stmt) === 1)
/// for SELECT queries, to count the number of returned rows, do this
mysqli_stmt_store_result($stmt);
if(mysqli_stmt_num_rows($stmt) >= 1)
/// release resource
mysqli_stmt_close($stmt);

/// can assign value to variables
mysqli_stmt_store_result($stmt);
if(mysqli_stmt_num_rows($stmt) === 1 ) {
  mysqli_stmt_bind_result($stmt, $id, $username, $type, $pass, $expired);
  mysqli_stmt_fetch($stmt);
}

Example :
$query= "SELECT user_id FROM users WHERE username=? and password=?";	//query definition
	$preparedStatement=$database_connection()->prepare($query);				//prepare the statement
	mysqli_stmt_bind_param($preparedStatement, 'ss', $field1, $field2);		//prepare to bind two Strings (the ss)
	$field1 = $_POST['user'];			//you may want to do more input checking here!
	$field2 = $_POST['pass'];			//you may want to do more input c
[ ---  end  ---- ]

=== [ topic ][ stored procedures ] ===
[ --- start ---- ]
Title: Benefits
- improved security
- better performance
    == require less data to be sent to database, just value
    == stored procedures can be cached and managed
- cleaner model-controller separation
    == interface won't need to know what tables and columns exist
    == more logic go into database, removing sql from php code
- increased application portability

- MySQL user need to have permission to CREATE routine, ALTER, and EXECUTE 
  permissions
- no need to tell not null, unsigned etc
- MySQL, by default, uses semicolon to terminate SQL commands
- any use of a semicolon within the procedure's definition will terminate the
  definition itself, the workaround is to change the delimiter prior definition
- to execute, use CALL procedure_name(arguments)

Example :
  $r = mysqli_query("CALL get_product($id)");
  then use mysqli_fetch_array() to get the result


Example :
DELIMITER $$
CREATE PROCEDURE name(arguments datatype, ... )
BEGIN
  CODE
END $$
DELIMITER ;
[ ---  end  ---- ]

=== [ topic ][ stored procedures ][ comment header ] ===
[ --- start ---- ]
Example :
-- =============================================
-- Author:  	Name
-- Create date: 
-- Description: 
-- =============================================

Example 2:
/*<br>
##########################################################################<br>
-- Name : Template.sql<br>
-- Date             : (sysdate) <br>
-- Author           :   
-- Company          :   
-- Purpose          :   <br>
-- Usage        <br>
-- Impact   :<br>
-- Required grants  :   sel on A, upd on B, drop on C<br>
-- Called by        :   some other process<br
##########################################################################<br>
-- ver  user    date        change  <br>
-- 1.0  DDZ 20110622    initial<br>
##########################################################################<br>
*/<br>
[ ---  end  ---- ]

=== [ topic ][ stored procedures ][ comment inner ] ===
[ --- start ---- ]
CREATE TABLE IF NOT EXISTS `pre_authassignment` (
  `itemname` varchar(64) NOT NULL COMMENT '项名称',
  `userid` varchar(64) NOT NULL COMMENT '用户id',
  `bizrule` text COMMENT '业务规则',
  `data` text COMMENT '数据',
  PRIMARY KEY (`itemname`,`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='授权表';
[ ---  end  ---- ]

=== [ topic ][ procedure ][ import ] ===
[ --- start ---- ]
syntax: mysql -u <user> -p<password> databasename < sql-procedure.sql
$ mysql -u tester2 -p"temp123" test_ecommerce2 < ~/sql.sql
MySQL> call stored_procedure_name();
[ ---  end  ---- ]

=== [ topic ][ procedure ] ===
[ --- start ---- ]
DELIMITER $$
CREATE PROCEDURE select_categories (type VARCHAR(7))
BEGIN
  IF type = 'coffee' THEN
    SELECT * FROM general_coffees ORDER by category;
  ELSEIF type = 'goodies' THEN
    SELECT * FROM non_coffee_categories ORDER by category;
  END IF;
END $$
DELIMITER ;

testing:
CALL select_categories('coffee');
CALL select_categories('goodies');
[ ---  end  ---- ]

=== [ topic ][ mysqli_fetch ][ MYSQLI_ASSOC ] ===
[ --- start ---- ]
- MYSQLI_ASSOC
   == give relational array
    e.g. :  name => Synook,
	          group => Members
- MYSQL_NUM
   == give numbered array
    e.g. :  1 => Synook,
	          2 => Members

Example : object oriented style
$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = $mysqli->query($query);

/* numeric array */
$row = $result->fetch_array(MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);

/* associative array */
$row = $result->fetch_array(MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);

/* associative and numeric array */
$row = $result->fetch_array(MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);

/* free result set */
$result->free();

/* close connection */
$mysqli->close();

Example : procedural style
$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = mysqli_query($link, $query);

/* numeric array */
$row = mysqli_fetch_array($result, MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);

/* associative array */
$row = mysqli_fetch_array($result, MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);

/* associative and numeric array */
$row = mysqli_fetch_array($result, MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);

/* free result set */
mysqli_free_result($result);

/* close connection */
mysqli_close($link);


[ ---  end  ---- ]

=== [ topic ][ security ] ===
[ --- start ---- ]
Title: Privileges
non-login user: 
  == SELECT
login user:
  == carts, wish-list
    *** SELECT, INSERT, UPDATE, DELETE

- test with wrong user password, see if everything thrown up
[ ---  end  ---- ]
