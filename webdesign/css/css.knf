=== [ topic ][ why ] ===
[ --- start ---- ]
The original aim of HTML is to let the content providers concentrate on 
the content of the document and leave the appearance to be handled by the 
browsers. Authors markup the document content using markup tags (such as 
<p>, <h1>, <ul>, <table>, <img>) to indicate its semantic meaning ("This 
is a paragraph", "This is heading Level 1", "This is an unordered list", 
"This is a table", "This is an image"). The browser then decides on how 
to display or present the content on the browser's window.

However, HTML has gone out of control in the early years. Tons of markup 
tags and attributes were created for marking the appearance and the 
display styles (e.g., <font>, <center>, align, color, bgcolor, link, 
alink, vlink are concerned about the appearance in font, color and 
alignment) rather than the meaning of the content. It is important to 
separate the content and presentation of a document. Document contents 
are provided by the document authors or content providers, whereas 
presentation is usually done by a graphic designers.

The W3C (World-Wide Web Consortium @ www.w3c.org) responded to the need 
of separating document's content and presentation by introducing a style 
sheet language called CSS (Cascading Style Sheet). CSS can be viewed as 
an extension (or companion) of HTML, which allows web graphic designer to 
spice up the web pages, so that the content providers can focus on the 
document contents.
[ ---  end  ---- ]

=== [ topic ][ what ] ===
[ --- start ---- ]
- css = cascading style sheet
- collection of style rules
- style rules control the appearance of HTML elements
    - font, color, alignment, margin, border, padding, positioning properties
- cascading = multiple style rules can be applied to the same HTML element
[ ---  end  ---- ]

=== [ topic ][ syntax ] ===
[ --- start ---- ]
syntax:
selector { declaration 1 ; declaration 2 ; }
- each declaration ends with a semicolon ;

Example:
h1 { color:purple; font-size:10px; }
[ ---  end  ---- ]

=== [ topic ][ comment ] ===
[ --- start ---- ]
/* comment */
[ ---  end  ---- ]

=== [ topic ][ id ][ vs ][ class ] ===
[ --- start ---- ]
- css also allows use of own selectors called "id" and "class"
- id is unique, can only used once
- class is common, can be used by same elements multiple time, and used by different elements
[ ---  end  ---- ]

=== [ topic ][ id ][ .id ] ===
[ --- start ---- ]
- id cannot starts with a number
- in css, id is identified with "#"
Example:
#my-id { color: blue; font-size:10px; }

<p id="my-id"> my text </p>
[ ---  end  ---- ]

=== [ topic ][ class ][ #class ] ===
[ --- start ---- ]
- specify a style for a group of elements
- in css, class is identified with a "."

Example:
.my-class { color: blue; font-size:10px; }
[ ---  end  ---- ]

=== [ topic ][ insert css ] ===
[ --- start ---- ]
- 3 ways to insert css: external, internal, inline style
[ External ]
- external: ideal when applied to many pages
    * Each page link to the css using <link>
    * css page should not contains any html tags
    * saved with .css extension
    * Example: 
        <head>
        <link rel="stylesheet" type="text/css" href="mystyle.css">
        </head>

[ Internal ]
- used when a single page has unique style
    * Example:
        <head>
        <style>
        hr {color:sienna;}
        p {margin-left:20px;}
        body {background-image:url("images/back40.gif");}
        </style>
        </head>

[ Inline ]
- mix code and css
- use sparingly!
    * Example:
        <p style="color:sienna;margin-left:20px;">This is a paragraph.</p>
[ ---  end  ---- ]

=== [ topic ][ multiple css ] ===
[ --- start ---- ]
- if a selector has been set by external and internal css, internal css 
  will be used, only extra properties from external css will be taken.
- Rules of multiple css (from least to most priority)
1. Browser default
2. External style sheet
3. Internal style sheet (in the head section)
4. Inline style (inside an HTML element)
- Note: If the link to the external style sheet is placed after the 
  internal style sheet in HTML <head>, the external style sheet will 
  override the internal style sheet!

Example:
< External CSS>
h3 { color:red; text-align:left; font-size:8pt; }

< Internal CSS >
h3 { text-align:right; font-size:20pt; }

< RESULT >
color:red; text-align:right; font-size:20pt; 
[ ---  end  ---- ]

=== [ topic ][ tips ] ===
[ --- start ---- ]
- don't add space between property value and unit 
    * e.g. 
      font-size:10 px;   /* wrong */
      font-size:10px;    /* correct */
[ ---  end  ---- ]

=== [ topic ][ background ] ===
[ --- start ---- ]
- by default, background-image property repeats an image both horizontally and
  vertically

================================================================================
Property                Description
================================================================================
background	            Sets all the background properties in one declaration
background-color	    Sets the background color of an element
background-image	    Sets the background image for an element
background-repeat	    Sets how a background image will be repeated
background-attachment	Sets whether a background image is fixed or scrolls with the rest of the page
background-position	    Sets the starting position of a background image
--------------------------------------------------------------------------------

background-color:blue
background-image:url('bg.gif')
/* repeat horizontally */
background-repeat:repeat-x;
background-repeat:no-repeat;
background-position:right top;
/* 200px to the right edge is blanked */
margin-right:200px;
/* shorthand property */
/* background-color background-image background-repeat background-attachment background-position */
background:#ffffff url('img_tree.png') no-repeat right top;
[ ---  end  ---- ]

=== [ topic ][ color ] ===
[ --- start ---- ]
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
a color name - like "red"
[ ---  end  ---- ]

=== [ topic ][ gradient ] ===
[ --- start ---- ]
- background: linear-gradient(direction, color-stop1, color-stop2, ...);
div.example {
	width:auto;color:#000000;
	background-color: #000000;margin:0px;padding:5px;border:1px solid #d4d4d4;
	background-image: linear-gradient( #FFFFFF , #463655 1000px);
}

div.example_code {
	width:auto;background-color:#ffffff;padding:5px;border:1px solid #d4d4d4;font-size:14px;font-family:"courier new";
}
[ ---  end  ---- ]

=== [ topic ][ opacity ][ transparent ] ===
[ --- start ---- ]
img {
opacity:0.4;
filter:alpha(opacity=40); /* For IE8 and earlier */
}
img:hover {
opacity:1.0;
filter:alpha(opacity=100); /* For IE8 and earlier */
}
[ ---  end  ---- ]

=== [ topic ][ image ][ sprites ] ===
[ --- start ---- ]
- image sprites is a collection of images put into a single image
[ ---  end  ---- ]

=== [ topic ][ text ] ===
[ --- start ---- ]
text-align:center;
text-align:right;
text-align:justify;
text-decoration:none;
/* line on top of text */
text-decoration:overline;
/* strikethrough */
text-decoration:line-through;
text-decoration:underline;
text-transfrorm:uppercase|lowercase|capitalize;
text-indentation: 20px;
[ ---  end  ---- ]

=== [ topic ][ font ] ===
[ --- start ---- ]
- Tips: On computer screens, sans-serif fonts are considered easier to read 
  than serif fonts
- Tips: If the name of a font family is more than one word, it must be in 
  quotation marks, like: "Times New Roman".
- generic family = san-serif, serif, Monospace
- font family = Arial, Times New Roman
- san-serif fonts are without the protruding edges
- san-serif: Arial, Verdana
- serif: Times New Roman, Georgia
- Monospace: Courier New, Lucida Console 
  (All monospace characters have the same width)
- font-family property should holds several font names as fallback,
  if browser doesn't support the first, it tries the next font
- start with desired font, then end with generic family
- http://www.w3schools.com/cssref/css_websafe_fonts.asp
- font-size are to be used with html tags h1-h6, and p for paragraphs
- font size can be absolute or relative

Property:
/* oblique="leaning" (oblique is very similar to italic, but less supported) */
font-style:italic|normal|oblique;
font-size: 100%;
font-size:12px;
font-size:2.5em;
font-size:1.875em;
[ ---  end  ---- ]

=== [ topic ][ text-shadow ] ===
[ --- start ---- ]

1. value = The X-coordinate
2. value = The Y-coordinate
3. value = The blur radius
4. value = The color of the shadow

Example:
p { text-shadow: 1px 1px 1px #000; }

Example: multiple shadow
p { text-shadow: 1px 1px 1px #000, 3px 3px 5px blue; }

Example: transparent color
p { text-shadow: 0px 2px 2px rgba(255, 255, 255, 0.4); }
[ ---  end  ---- ]

=== [ topic ][ links ] ===
[ --- start ---- ]
- can consider to use :focus to replace :hover
- :hover has no effect on those using keyboard to navigate to the link
- :focus will select the link that are currently under the keyboard 
- :focus can be used on inputs and textarea
a:link {color:#FF0000;}          /* unvisited link  */ 
a:visited {color:#00FF00;}       /* visited link    */ 
a:hover {color:#FF00FF;}         /* mouse over link */ 
a:active {color:#0000FF;}        /* when link is clicked  */ 
text-decoration:none;            /* usually used to remove underline */
a:active {background-color:#FF704D;}
[ ---  end  ---- ]

=== [ topic ][ list ] ===
[ --- start ---- ]
ul.a {list-style-type: circle;}
ul.b {list-style-type: square;}
ol.c {list-style-type: upper-roman;}
ol.d {list-style-type: lower-alpha;}
ul { list-style-image: url('mycircle.gif');}
shorthand:
list-style: square url("sqpurple.gif");
shorthand order:
list-style-type -> list-style-position -> list-style-image

Example: cross-browser solution:
ul
{
list-style-type: none;
padding: 0px;
margin: 0px;
}
ul li
{
background-image: url(sqpurple.gif);
background-repeat: no-repeat;
background-position: 0px 5px; 
padding-left: 14px; 
}

Explained:
For ul:
    Set the list-style-type to none to remove the list item marker
    Set both padding and margin to 0px (for cross-browser compatibility)
For all li in ul:
    Set the URL of the image, and show it only once (no-repeat)
    Position the image where you want it (left 0px and down 5px)
    Position the text in the list with padding-left
[ ---  end  ---- ]

=== [ topic ][ table ] ===
[ --- start ---- ]
border: 1px solid black;

tr.d0 td {
    background-color: #CC9999; color: black;
}
tr.d1 td {
    background-color: #9999CC; color: black;
}

<table>
<tr class="d0"><td>One</td><td>one</td></tr>
<tr class="d1"><td>Two</td><td>two</td></tr>
</table>
[ ---  end  ---- ]

=== [ topic ][ box model ] ===
[ --- start ---- ]
- Important: When you set the width and height properties of an element with 
  CSS, you just set the width and height of the content area. To calculate the 
  full size of an element, you must also add the padding, borders and margins.
- Total element width = width + left padding + right padding + left border + 
  right border + left margin + right margin
- Total element height = height + top padding + bottom padding + top border + 
  bottom border + top margin + bottom margin
- IE8 and earlier versions of IE, included padding and border in the width property.
  To fix this problem, add a <!DOCTYPE html> to the HTML page.
Reference:
+------------------------------------------------------
|<--margin-->|<--Border-->|<--Padding-->|<--Content-->

Example:
width:250px;
padding:10px;
border:5px solid gray;
margin:10px;

250px (width)
+ 20px (left + right padding)
+ 10px (left + right border)
+ 20px (left + right margin)
= 300px

[ ---  end  ---- ]

=== [ topic ][ box model ][ border ] ===
[ --- start ---- ]
- using border-color alone does not work, border-style must be set first 
- using border-width alone does not work, border-style must be set first 
- no border appear to be same as hidden?
- shorthand: { border-width; border-style (required); border-color; }
  border:5px solid red;
- border-width:medium;
  border-width:1px;
- diffent sides can use different border (top, side)

Example 1:
  shorthand: border-style:dotted solid;
p {
border-top-style:dotted;
border-right-style:solid;
border-bottom-style:dotted;
border-left-style:solid;
}

Example 2:
  border-style:dotted solid double dashed; ==  (top, right, bottom, left)
  { top border is dotted    right border is solid
    bottom border is double left border is dashed }

Example 3:
border-style:dotted solid double; { top, right/left, bottom }
{ top border is dotted
right and left borders are solid
bottom border is double }

Example:
p.none {border-style:none;}
p.dotted {border-style:dotted;}
p.dashed {border-style:dashed;}
p.solid {border-style:solid;}
p.double {border-style:double;}
p.groove {border-style:groove;}
p.ridge {border-style:ridge; border-color:rgb(152, 191, 33);}
p.inset {border-style:inset;}
p.outset {border-style:outset;}
p.hidden {border-style:hidden;}

<p class="none">No border.</p>
<p class="dotted">A dotted border.</p>
<p class="dashed">A dashed border.</p>
<p class="solid">A solid border.</p>
<p class="double">A double border.</p>
<p class="groove">A groove border.</p>
<p class="ridge">A ridge border.</p>
<p class="inset">An inset border.</p>
<p class="outset">An outset border.</p>
<p class="hidden">A hidden border.</p>
[ ---  end  ---- ]

=== [ topic ][ box model ][ outline ] ===
[ --- start ---- ]
- An outline is a line that is drawn around elements (outside the borders)
Reference:
+------------------------------------------------------
|<--margin-->|<-- Outline -->|<--Border-->|<--Padding-->|<--Content-->
[ ---  end  ---- ]

=== [ topic ][ box model ][ margin ] ===
[ --- start ---- ]
- margin is transparent, doesn't have background color
- value: auto, length(px, pt, cm,...), %, inherit
- shorthand:
margin: top, right, bottom, left;
margin: top, right/left, bottom;
margin: top/bottom, right/left;
[ ---  end  ---- ]

<<< [ topic ][ css advanced ] >>>

=== [ topic ][ css advanced ][ grouping ][ nesting ] ===
[ --- start ---- ]
- grouping selectors with same style
h1 { color: yellow; }
p { color: yellow; }
become
h1, p { color: yellow; }

- nesting
Example:
p { color:blue; text-align:center; }
.marked { background-color:yellow; }
.marked p { color:grey; }

<p>This paragraph has blue text, and is center aligned.</p>
<div class="marked"> This isn't a paragraph, therefore has no blue text nor 
alignment.  </div>

<div class="marked"> <p>p elements inside a "marked" classed element keeps the 
alignment style, but has a different text color.</p> </div>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ dimension ] ===
[ --- start ---- ]
- when a % is assigned to a property, its parents need to have explicit height
  e.g. to set a page class inside div
html, body { height: 100%; width: 100%; margin: 0; }
div { height: 100%; width: 100%; background: red; }
div.page { height: 100%; }
- height:{auto, length, %, inherit}
- min-height
- max-height
- width
- min-width
- max-width
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ display ][ visibility ] ===
[ --- start ---- ]
- when visibility is set to hidden, the space of the element is reserved
visibility:hidden;
h1.hidden {display:none;}

Example 1:
<script>
function removeElement() {
    document.getElementById("imgbox1").style.display="none"; }
function changeVisibility() {
    document.getElementById("imgbox2").style.visibility="hidden"; }
function resetElement() {
    document.getElementById("imgbox1").style.display="block";
    document.getElementById("imgbox2").style.visibility="visible";
}
</script>

<div style="width:394px;height:150px;margin-left:auto;margin-right:auto;text-align:left;border:1px solid gray;">
<div class="imgbox" id="imgbox1" style="display: block;">Box 1<br>
<img class="thumbnail" src="sunset.jpg" alt="Klematis"><br>
<input class="box" type="button" onclick="removeElement()" value="Remove">
</div>
<div class="imgbox" id="imgbox2" style="visibility: visible;">Box 2<br>
<img class="thumbnail" src="sunset.jpg" alt="Klematis">
<input class="box" type="button" onclick="changeVisibility()" value="Hide">
</div>
<div class="imgbox">Box 3<br>
<img class="thumbnail" src="sunset.jpg" alt="Klematis">
<input class="box" type="button" onclick="resetElement()" value="Reset All">
</div>
</div>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ display ] ===
[ --- start ---- ]
- block elements takes full width avaiable and has line break b4/after its
- Example of block elements, <h1>, <p>, <div>

- inline elements only takes up as much width, no line break
- Example: <span>, <a>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ opacity ] ===
[ --- start ---- ]
Example 1:
img { opacity:0.4;
filter:alpha(opacity=40); /* For IE8 and earlier */ }

img:hover { opacity:1.0;
filter:alpha(opacity=100); /* For IE8 and earlier */ }

Example 2:
div.background {
    width: 800px;
    height: 300px;
    /* background: blue; */
    background: url("sunset.jpg") repeat;
    border: 2px solid black;
}

div.transparentbox {
    margin: 30px 50px;
    background-color: white;
    border: 1px solid black;
    opacity:0.6;
    /* for ie8 and earlier */
    filter:alpha(opacity=60);
}

div.transparentbox p {
    margin: 30px 40px;
    font-weight: bold;
}

<div class="background">
<div class="transparentbox">
    <p> 
    Text inside the transparent box, and it looks nice.
    Text inside the transparent box, and it looks nice.
    Text inside the transparent box, and it looks nice.
    Text inside the transparent box, and it looks nice.
    Text inside the transparent box, and it looks nice.
    Text inside the transparent box, and it looks nice.
</p>
</div>
</div>


[ ---  end  ---- ]

=== [ topic ][ css advanced ][ positioning ][ fixed ] ===
[ --- start ---- ]
- An element with fixed position is positioned relative to the browser window.
p.pos_fixed {
    position:fixed;
    top: 30px;
    right: 20px;
}
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ positioning ][ relative ] ===
[ --- start ---- ]
- A relative positioned element is positioned relative to its normal position.
Example 1:
h2.pos_left { position:relative; left:-20px; }
h2.pos_right { position:relative; left:20px; }

<h2>This is a heading with no position</h2>
<h2 class="pos_left">This heading is moved left according to its normal position</h2>
<h2 class="pos_right">This heading is moved right according to its normal position</h2>

Example 2:
h2.pos_top {
position:relative;
top:-50px; }

<h2>This is a heading with no position</h2>
<h2 class="pos_top">This heading is moved upwards according to its normal 
position</h2>
<p><b>Note:</b> Even if the content of the relatively positioned element is 
moved, the reserved space for the element is still preserved in the normal 
flow.</p>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ positioning ][ absolute ] ===
[ --- start ---- ]
- relative to the first parent element which has explicit position
- if not such element is found, the containing block is <html>
- Absolutely positioned elements are removed from the normal flow. The document 
  and other elements behave like the absolutely positioned element does not 
  exist.
- Absolutely positioned elements can overlap other elements.

Example 1:
h2 {
    position:absolute;
    left:100px;
    top:150px;
}

<h2>This is a heading with an absolute position</h2>
<p>With absolute positioning, an element can be placed anywhere on a page. The 
heading below is placed 100px from the left of the page and 150px from the top 
of the page.</p>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ positioning ][ overlap ] ===
[ --- start ---- ]
- When elements are positioned outside the normal flow, they can overlap other 
  elements.
- The z-index property specifies the stack order of an element (which element 
  should be placed in front of, or behind, the others).
Example 1:
img {
    position:absolute;
    left:0px;
    top:0px;
    z-index:-1;
}

<h1>This is a heading</h1>
<img src="w3css.gif" width="100" height="140" />
<p>Because the image has a z-index of -1, it will be placed behind the text.</p>
[ ---  end  ---- ]

=== [ topic ][ css advanced ][ align ] ===
[ --- start ---- ]
- block element can be center-aligned by setting the left and right margin to auto

Example:
.center {
margin-left:auto;
margin-right:auto;
width:70%;
}

Example 2: cross browswer
body {
margin:0;
padding:0;
}
.container {
position:relative;
width:100%;
}
.right {
position:absolute;
right:0px;
width:300px;
background-color:#b0e0e6;
}
<div class="container">
<div class="right">
<p><b>Note: </b>When aligning using the position property, always include the !DOCTYPE declaration! If missing, it can produce strange results in IE browsers.</p>
</div>
</div>
[ ---  end  ---- ]

=== [ topic ][ clip ] ===
[ --- start ---- ]
- rect (top, right, bottom, left)
- The clip property does not work if "overflow:visible"
- javascript syntax: object.style.clip="rect(0px,50px,50px,0px)"
Example: 
img {
position:absolute;
clip:rect(0px,60px,200px,0px);
}
<img src="w3css.gif" width="100" height="140" />
[ ---  end  ---- ]

=== [ topic ][ selector ] ===
[ --- start ---- ]
Example 1:
tr:nth-child(even) {
    background-color: #000000;
}
Note: No support in IE, even IE 8.

Example 2:
<div class="postinner">
    <article itemtype="http://schema.org/Article" itemscope="" role="article">
        <div itemprop="headline">
            <h1 class="pagetitle">Hello World!</h1>
        </div>
    </article>
</div>

div[itemprop="headline"] h1 { color: yellow; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ * ] ===
[ --- start ---- ]
- select everything
- slow down on browser
* {
 margin: 0;
 padding: 0;
}  

- child selector
Example: select every child of #container div
#container * {
    border: 1px solid black;
}
[ ---  end  ---- ]

=== [ topic ][ selector ][ X Y ] ===
[ --- start ---- ]
- descendant
- never do this: X Y Z A B.subclass

Example: applied to anchor in unordered list
ul a{
    text-decoration: none;
}
[ ---  end  ---- ]

=== [ topic ][ selector ][ X > Y ] ===
[ --- start ---- ]
- select direct children
[ ---  end  ---- ]

=== [ topic ][ selector ][ X + Y ] ===
[ --- start ---- ]
- adjacent selector

Example: select first <p> that is immediately preceded by <ul>
ul + p { color: red; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ X ~ Y ] ===
[ --- start ---- ]
- similar to X + Y, however, it's less strict
Example: select any <p> as long as they follow a ul
ul ~ p { color: red; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ attribute ][ X[title] ] ===
[ --- start ---- ]
- attributes selector, select those with the attribute specified

Example: select those anchor that has a title attribute
a[tite] { color: red; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ attribute ][ X[href="foo"] ] ===
[ --- start ---- ]
Example:
a[href="http://www.w3schools.com"]{color:blue;}

Example: select any href with value w3schools in it
a[href*="w3schools"]{color:yellow;}

Example: select any href begin with "http"
a[href^="http"]{color:purple;}

Example: select any href ends with ".jpg"
a[href$=".jpg"]{color:blue;}

Example: select image data-type (than create a all the a[href$=".png"], jpg,... )
a[data-filetype="image"]{color:brown;}
<a href="path/to/image.jpg" data-filetype="image"> Image Link </a>

Example: select attribute with space in between
a[data-info~="external"] { color: red; }
a[data-info~="image"] { border: 1px solid black; }
<a href="http://www.google.com" data-info="external">consectetur</a>
<a href="http://www.google.com" data-info="external image">consectetur</a>
[ ---  end  ---- ]

=== [ topic ][ selector ][ :checked ] ===
[ --- start ---- ]
- applied to element that has been checked, like a button, checkbox

Example:
input[type=radio]:checked { border: 1px solid black; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ :hover ] ===
[ --- start ---- ]
Example:
div:hover { background: yellow; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ not ] ===
[ --- start ---- ]
Example: select every div element, except the one with id=container
div:not(#container){ color: white; }

Example 2: select every single element (not advised), except for paragraph
*:not(p){ color: green; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ ::first-line ][ pseudoElement ] ===
[ --- start ---- ]
- use two colons ::, however user-agent accept single colon usage too
- The following properties apply to the "first-line" pseudo-element:
font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear

Example:
p::first-line { background: yellow; }
p::first-letter { background: yellow; }

Example:
a:link {color:#FF0000;}      /* unvisited link */
a:visited {color:#00FF00;}  /* visited link */
a:hover {color:#FF00FF;}  /* mouse over link */
a:active {color:#0000FF;}  /* selected link */
a.red:visited {color:#FF0000;}
<a class="red" href="css_syntax.asp">CSS Syntax</a>
[ ---  end  ---- ]

=== [ topic ][ pseudo-class ][ lang ] ===
[ --- start ---- ]
Example:
q:lang(new-lang) {
    quotes: "::" "::";
}
<p> This is some text with a quote in <q lang="new-lang">this phrase</q>.</p>
[ ---  end  ---- ]

=== [ topic ][ selector ][ nth-child(n) ][ nth-last-child(n) ] ===
[ --- start ---- ]
Example: 
li:nth-child(3) { color: green; }

Example: select second last child in a <li>
li:nth-last-child(2){ color: grey; }

Example: 
ul li:first-child {border: none; }
ul li:last-child {border: none; }

Example:
div:first-child{
    color: red;
}
<div> This is the first child of div. The text color will be in red.  </div>
<div> This is the second child of div. The text color will be default (black).  </div>

Example:
p > b:first-child{
    background: yellow;
    color: purple;
}
<p> First bold element will be in <b> purple </b>. 
    Second bold element will be in <b> default(black)</b> </p>

[ ---  end  ---- ]

=== [ topic ][ selector ][ nth-of-type(n) ][ nth-last-of-type(n) ] ===
[ --- start ---- ]
Example: select the third <li> of of <ul> type
ul:nth-of-type(3){ color:white; }
[ ---  end  ---- ]

=== [ topic ][ selector ][ :after ] ===
[ --- start ---- ]

Example: after the <p> add content
p:after { 
content:"- Remember this";
background-color:yellow;
color:red;
font-weight:bold;
}

<p>My name is Donald</p>
<p>I live in Ducksburg</p>
[ ---  end  ---- ]

=== [ topic ][ selector ][ pseudo-class ][ summary ] ===
[ --- start ---- ]
Selector	    Example	        Example description
:link	        a:link	        Selects all unvisited links
:visited	    a:visited	    Selects all visited links
:active	        a:active	    Selects the active link
:hover	        a:hover	        Selects links on mouse over
:focus	        input:focus	    Selects the input element which has focus
:first-letter	p:first-letter	Selects the first letter of every <p> element
:first-line	    p:first-line	Selects the first line of every <p> element
:first-child	p:first-child	Selects every <p> elements that is the first child of its parent
:before	        p:before	    Insert content before every <p> element
:after	        p:after	        Insert content after every <p> element
:lang(language)	p:lang(it)	    Selects every <p> element with a lang attribute value starting with "it"
[ ---  end  ---- ]

=== [ topic ][ gradient ] ===
[ --- start ---- ]
[ ---  end  ---- ]

=== [ topic ][ font-face ] ===
[ --- start ---- ]
Example:
@font-face {
	font-family: 'MyWebFont';
	src: url('webfont.eot'); /* IE9 Compat Modes */
	src: url('webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
	     url('webfont.woff') format('woff'), /* Modern Browsers */
	     url('webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
	     url('webfont.svg#svgFontName') format('svg'); /* Legacy iOS */
	}

body {
       font-family: 'MyFontFamily', Fallback, sans-serif;
}
[ ---  end  ---- ]

=== [ topic ][ reference ] ===
[ --- start ---- ]
shorthand : color, style, width
width: { thin medium thick}
style: { none dotted dashed solid double groove ridge inset outset inherit}

More Complete:
.reset-this {
    animation : none;
    animation-delay : 0;
    animation-direction : normal;
    animation-duration : 0;
    animation-fill-mode : none;
    animation-iteration-count : 1;
    animation-name : none;
    animation-play-state : running;
    animation-timing-function : ease;
    backface-visibility : visible;
    background : 0;
    background-attachment : scroll;
    background-clip : border-box;
    background-color : transparent;
    background-image : none;
    background-origin : padding-box;
    background-position : 0 0;
    background-position-x : 0;
    background-position-y : 0;
    background-repeat : repeat;
    background-size : auto auto;
    border : 0;
    border-style : none;
    border-width : medium;
    border-color : inherit;
    border-bottom : 0;
    border-bottom-color : inherit;
    border-bottom-left-radius : 0;
    border-bottom-right-radius : 0;
    border-bottom-style : none;
    border-bottom-width : medium;
    border-collapse : separate;
    border-image : none;
    border-left : 0;
    border-left-color : inherit;
    border-left-style : none;
    border-left-width : medium;
    border-radius : 0;
    border-right : 0;
    border-right-color : inherit;
    border-right-style : none;
    border-right-width : medium;
    border-spacing : 0;
    border-top : 0;
    border-top-color : inherit;
    border-top-left-radius : 0;
    border-top-right-radius : 0;
    border-top-style : none;
    border-top-width : medium;
    bottom : auto;
    box-shadow : none;
    box-sizing : content-box;
    caption-side : top;
    clear : none;
    clip : auto;
    color : inherit;
    columns : auto;
    column-count : auto;
    column-fill : balance;
    column-gap : normal;
    column-rule : medium none currentColor;
    column-rule-color : currentColor;
    column-rule-style : none;
    column-rule-width : none;
    column-span : 1;
    column-width : auto;
    content : normal;
    counter-increment : none;
    counter-reset : none;
    cursor : auto;
    direction : ltr;
    display : inline;
    empty-cells : show;
    float : none;
    font : normal;
    font-family : inherit;
    font-size : medium;
    font-style : normal;
    font-variant : normal;
    font-weight : normal;
    height : auto;
    hyphens : none;
    left : auto;
    letter-spacing : normal;
    line-height : normal;
    list-style : none;
    list-style-image : none;
    list-style-position : outside;
    list-style-type : disc;
    margin : 0;
    margin-bottom : 0;
    margin-left : 0;
    margin-right : 0;
    margin-top : 0;
    max-height : none;
    max-width : none;
    min-height : 0;
    min-width : 0;
    opacity : 1;
    orphans : 0;
    outline : 0;
    outline-color : invert;
    outline-style : none;
    outline-width : medium;
    overflow : visible;
    overflow-x : visible;
    overflow-y : visible;
    padding : 0;
    padding-bottom : 0;
    padding-left : 0;
    padding-right : 0;
    padding-top : 0;
    page-break-after : auto;
    page-break-before : auto;
    page-break-inside : auto;
    perspective : none;
    perspective-origin : 50% 50%;
    position : static;
    /* May need to alter quotes for different locales (e.g fr) */
    quotes : '\201C' '\201D' '\2018' '\2019';
    right : auto;
    tab-size : 8;
    table-layout : auto;
    text-align : inherit;
    text-align-last : auto;
    text-decoration : none;
    text-decoration-color : inherit;
    text-decoration-line : none;
    text-decoration-style : solid;
    text-indent : 0;
    text-shadow : none;
    text-transform : none;
    top : auto;
    transform : none;
    transform-style : flat;
    transition : none;
    transition-delay : 0s;
    transition-duration : 0s;
    transition-property : none;
    transition-timing-function : ease;
    unicode-bidi : normal;
    vertical-align : baseline;
    visibility : visible;
    white-space : normal;
    widows : 0;
    width : auto;
    word-spacing : normal;
    z-index : auto;
}
[ ---  end  ---- ]

=== [ topic ][ tips ] ===
[ --- start ---- ]
- kn: css is case sensitive!
  div.title is different than div.Title
<!--
	View source is a feature, not a bug. Thanks for your curiosity and
	interest in participating!

	Here are the submission guidelines for the new and improved csszengarden.com:

	- CSS3? Of course! Prefix for ALL browsers where necessary.
	- go responsive; test your layout at multiple screen sizes.
	- your browser testing baseline: IE9+, recent Chrome/Firefox/Safari, and iOS/Android
	- Graceful degradation is acceptable, and in fact highly encouraged.
	- use classes for styling. Don't use ids.
	- web fonts are cool, just make sure you have a license to share the files. Hosted 
	  services that are applied via the CSS file (ie. Google Fonts) will work fine, but
	  most that require custom HTML won't. TypeKit is supported, see the readme on this
	  page for usage instructions: https://github.com/mezzoblue/csszengarden.com/

	And a few tips on building your CSS file:

	- use :first-child, :last-child and :nth-child to get at non-classed elements
	- use ::before and ::after to create pseudo-elements for extra styling
	- use multiple background images to apply as many as you need to any element
	- use the Kellum Method for image replacement, if still needed. http://goo.gl/GXxdI
	- don't rely on the extra divs at the bottom. Use ::before and ::after instead.
-->
[ ---  end  ---- ]

=== [ topic ][ case ][ alternating row color ] ===
[ --- start ---- ]
tr:nth-child(even) {
    background-color: #000000;
}
Note: No support in IE, even IE 8.

Or, if you have jQuery:

$(document).ready(function()
{
  $("tr:even").css("background-color", "#000000");
});
[ ---  end  ---- ]

=== [ topic ][ to know ] ===
[ --- start ---- ]
-webkit-margin-end
-itemprop
-overflow
- cursor
- text-align: left !important;
[ ---  end  ---- ]

=== [ topic ][ problem ] ===
[ --- start ---- ]
[ Problem ] 
Description: text-align: right is not working
div.desc {
    display: inline-block;
    text-align: right;
    font-family: Trebuchet MS, Helvetica, sans-serif;
    font-size: 15px;
    color: rgb(83, 83, 83);
}
Solution: remove the display element
div.desc {
    text-align: right;
    font-family: Trebuchet MS, Helvetica, sans-serif;
    font-size: 15px;
    color: rgb(83, 83, 83);
}
[ ---  end  ---- ]
